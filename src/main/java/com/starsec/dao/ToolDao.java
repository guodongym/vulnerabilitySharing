package com.starsec.dao;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.hibernate.Query;
import org.hibernate.transform.Transformers;
import org.springframework.stereotype.Repository;

import com.starsec.constants.ToolStatus;
import com.starsec.model.DataTablePage;
import com.starsec.po.SysDepartment;
import com.starsec.po.SysUser;
import com.starsec.po.Tool;
import com.starsec.po.ToolType;
import com.starsec.util.DateUtil;
import com.starsec.util.SessionUtil;
import com.starsec.vo.PageParameBean;
import com.starsec.vo.ToolVo;

/** 工具表(TOOL) **/
@Repository
public class ToolDao extends BaseDao<Tool, Serializable> {

	/**
	 * 检查工具类型下工具总数
	 * 
	 * @param toolType
	 * @return
	 */
	public Long findCountToolInToolType(ToolType toolType) {
		String countHql = " select count(*) from " + Tool.class.getCanonicalName() + "  as tool where tool.toolType = ?";
		Long count = super.countByHql(countHql, toolType);
		return count;
	}

	/**
	 * 分页查询工具
	 * 
	 * @param page
	 * @param createEndTime
	 * @param createStarTime
	 * @param leakTypeIds
	 * @param toolTypeId
	 * @param likeKeyWord
	 * @return
	 */
	public DataTablePage findPage(DataTablePage page, String likeKeyWord, Integer toolTypeId, String createStarTime, String createEndTime) {
		StringBuffer hql = new StringBuffer(" from " + Tool.class.getCanonicalName() + " where 1=1");
		List<Object> paramList = new ArrayList<Object>();
		if (StringUtils.isNotBlank(page.getSearch())) {
			hql.append(" and toolName like ? ");
			paramList.add("%" + page.getSearch() + "%");
		}
		if (StringUtils.isNotBlank(likeKeyWord)) {
			hql.append(" and (toolName like ? ");
			paramList.add("%" + likeKeyWord + "%");

			hql.append(" or toolAuthor like ? ");
			paramList.add("%" + likeKeyWord + "%");

			hql.append(" or toolOutline like ? ");
			paramList.add("%" + likeKeyWord + "%");
			hql.append(" ) ");
		}

		if (toolTypeId != null && toolTypeId != 0) {
			hql.append(" and toolType.id = ? ");
			paramList.add(toolTypeId);
		}

		if (StringUtils.isNotBlank(createStarTime)) {
			hql.append(" and createTime >= ? ");
			paramList.add(DateUtil.parseDate(createStarTime));
		}

		if (StringUtils.isNotBlank(createEndTime)) {
			hql.append(" and createTime <= ? ");
			paramList.add(DateUtil.parseDate(createEndTime));
		}
		hql.append(" and status = ?");
		paramList.add(ToolStatus.已共享.value());
		hql.append(" order by createTime desc ");

		return super.findPageByFetchedHql(ToolVo.class, hql.toString(), null, page.getPageNo(), page.getLimit(), paramList.toArray());
	}

	public DataTablePage findMyToolPage(DataTablePage page, String likeKeyWord, Integer status) {
		StringBuffer hql = new StringBuffer(" from " + Tool.class.getCanonicalName() + " where 1=1");
		List<Object> paramList = new ArrayList<Object>();

		if (StringUtils.isNotBlank(page.getSearch())) {
			hql.append(" and toolName like ? ");
			paramList.add("%" + page.getSearch() + "%");
		}
		if (StringUtils.isNotBlank(likeKeyWord)) {
			hql.append(" and (toolName like ? ");
			paramList.add("%" + likeKeyWord + "%");

			hql.append(" or toolAuthor like ? ");
			paramList.add("%" + likeKeyWord + "%");

			hql.append(" or toolOutline like ? ");
			paramList.add("%" + likeKeyWord + "%");
			hql.append(" ) ");
		}
		hql.append(" and submitUser.id = ? ");
		paramList.add(SessionUtil.loginUser().getId());
		if (status == ToolStatus.已共享.value()) {
			hql.append(" and status != ? ");
			paramList.add(ToolStatus.未共享.value());
		}else{
			hql.append(" and status = ? ");
			paramList.add(status);
		}
		hql.append(" order by createTime desc ");
		return super.findPageByFetchedHql(ToolVo.class, hql.toString(), null, page.getPageNo(), page.getLimit(), paramList.toArray());
	}

	/**
	 * 已发布工具 数量
	 */
	public Long findSumReleasedTool() {

		String countHql = " select count(*) from " + Tool.class.getCanonicalName() + "  as tool where tool.status = ? ";

		Long findSumReleasedTool = super.countByHql(countHql, ToolStatus.已共享.value());
		return findSumReleasedTool;
	}

	/**
	 * 未发布工具 数量
	 * 
	 * @return
	 */
	public Long findSumUnreleasedTool() {
		String countHql = " select count(*) from " + Tool.class.getCanonicalName() + "  as tool where tool.status = ? ";

		Long sumUnreleasedTool = super.countByHql(countHql, ToolStatus.未共享.value());
		return sumUnreleasedTool;
	}

	/**
	 * 查询工具类型统计结果
	 * 
	 * @return
	 */
	public List<ToolVo> findToolTypeStatistics() {
		String sqlString = "SELECT " 
							+ " DISTINCT " 
							+ " tool.tool_type_id as toolTypeId, " 
							+ " tool_type.tool_name  as toolTypeName, " 
				            + " COUNT(tool.tool_id) as countTool " 
							+ " FROM " 
				            + " tool "
				            + " LEFT JOIN " 
				            + " tool_type on tool_type.tool_type_id = tool.tool_type_id "
				            + " GROUP BY tool.tool_type_id ";

		Query query = super.getSession().createSQLQuery(sqlString).setResultTransformer(Transformers.aliasToBean(ToolVo.class));

		@SuppressWarnings("unchecked")
		List<ToolVo> toolTypeStatistics = query.list();
		return toolTypeStatistics;
	}

	/**
	 * 查询用户组中工具统计结果
	 * 
	 * @return
	 */
	public List<ToolVo> findToolInUserGroupStatistic() {
		String sqlString = "SELECT " 
							+ " DISTINCT " 
							+ " sys_user_group.user_group_id as userGroupId, "
							+ " sys_user_group.user_group_name as userGroupName , "
							+ " COUNT(tool.tool_id) as countTool"
							+ " FROM " 
							+ " tool "
							+ " LEFT JOIN "
							+ " sys_user on sys_user.user_id = tool.submit_user_id " 
							+ " LEFT JOIN " 
							+ " sys_user_group on sys_user.user_group_id = sys_user_group.user_group_id "
							+ " WHERE sys_user.user_group_id IS NOT NULL "
							+ " GROUP BY sys_user_group.user_group_id ";

		Query query = super.getSession().createSQLQuery(sqlString).setResultTransformer(Transformers.aliasToBean(ToolVo.class));

		@SuppressWarnings("unchecked")
		List<ToolVo> toolTypeStatistics = query.list();
		return toolTypeStatistics;
	}

	/**
	 * 工具 个人榜
	 * 
	 * @param pageParameBean
	 * @return
	 */
	public DataTablePage findPagePersonalToolRanks(PageParameBean pageParameBean) {
		String sqlString = " SELECT   " 
							+ " DISTINCT  " 
							+ " sys_user.user_id as submitUserId   " 
							+ " ,sys_user.user_account as nickName  " 
							+ " ,sys_user_group.user_group_id as userGroupId  "
							+ " ,sys_user_group.user_group_name as userGroupName  "
							+ " ,sys_department.department_id as departmentId   " 
							+ " ,sys_department.department_name as departmentName  "
							+ " ,COUNT(tool.tool_id) AS countTool  " 
							+ " FROM  " 
							+ " sys_user   "
							+ " LEFT JOIN sys_user_group  " 
							+ " ON sys_user.user_group_id = sys_user_group.user_group_id  "
							+ " LEFT JOIN sys_department  "
							+ " ON sys_user.department_id = sys_department.department_id  " 
							+ " LEFT JOIN tool   " 
							+ " ON sys_user.user_id = tool.submit_user_id   "
							+ " GROUP BY sys_user.user_id  " 
							+ " ORDER BY countTool DESC  ";

		DataTablePage retValue = new DataTablePage();

		Query query = super.getSession().createSQLQuery(sqlString);
		query.setResultTransformer(Transformers.aliasToBean(ToolVo.class));
		Integer pageNo = pageParameBean.getPageNo();
		Integer pageSize = pageParameBean.getLimit();
		int currentPage = pageNo > 1 ? pageNo : 1;

		String countHql = " select count(*) from " + SysUser.class.getCanonicalName();
		Long count = super.countByHql(countHql);
		retValue.setTotal(count.intValue());

		@SuppressWarnings("unchecked")
		List<ToolVo> itemList = query.setFirstResult((currentPage - 1) * pageSize).setMaxResults(pageSize).list();
		if (itemList == null) {
			itemList = new ArrayList<ToolVo>();
		}
		retValue.setRows(itemList);
		return retValue;
	}

	/**
	 * 工具 单位榜
	 * 
	 * @param pageParameBean
	 * @return
	 */
	public DataTablePage findPageDepartmentToolRanks(PageParameBean pageParameBean) {
		String sqlString = " SELECT   " 
							+ " DISTINCT  " 
							+ " sys_department.department_id as departmentId  " 
							+ " ,sys_department.department_name as departmentName   "
							+ " ,COUNT(DISTINCT sys_user.user_id) AS countUser  " 
							+ " ,COUNT(DISTINCT tool.tool_id)  AS countTool  " 
							+ " FROM  "
							+ " sys_department  " 
							+ " LEFT JOIN sys_user  "
							+ " ON sys_user.department_id = sys_department.department_id  " 
							+ " LEFT JOIN tool  " 
							+ " ON sys_user.user_id = tool.submit_user_id  " 
							+ " GROUP BY sys_department.department_id  "
							+ " ORDER BY countTool DESC  ";

		DataTablePage retValue = new DataTablePage();

		Query query = super.getSession().createSQLQuery(sqlString);
		query.setResultTransformer(Transformers.aliasToBean(ToolVo.class));
		Integer pageNo = pageParameBean.getPageNo();
		Integer pageSize = pageParameBean.getLimit();
		int currentPage = pageNo > 1 ? pageNo : 1;

		String countHql = " select count(*) from " + SysDepartment.class.getCanonicalName();
		Long count = super.countByHql(countHql);
		retValue.setTotal(count.intValue());

		@SuppressWarnings("unchecked")
		List<ToolVo> itemList = query.setFirstResult((currentPage - 1) * pageSize).setMaxResults(pageSize).list();
		if (itemList == null) {
			itemList = new ArrayList<ToolVo>();
		}
		retValue.setRows(itemList);
		return retValue;
	}

	/**
	 * 个人工具信息
	 * 
	 * @param pageParameBean
	 * @param userId
	 * @param status
	 * @return
	 */
	public DataTablePage findPagePersonalTools(PageParameBean pageParameBean, Integer userId, Integer status) {
		String sqlString = " SELECT   " + " DISTINCT  " + " tool.create_time as createTime,  " + " tool.tool_id as toolId,  " + " tool.tool_name AS toolName,  "
				+ " tool.attachment_path AS attachmentPath,  " + " COUNT(tool_comment.id) as countToolComment  " + " FROM  " + " tool  " + " LEFT JOIN tool_comment   "
				+ " ON tool.tool_id = tool_comment.tool_id  " + " where tool.user_id = :userId  " + " AND tool.status  =  :status " + " GROUP BY tool.tool_id    " + " ORDER BY createTime DESC    ";

		DataTablePage retValue = new DataTablePage();

		Query query = super.getSession().createSQLQuery(sqlString);
		query.setParameter("userId", userId);
		query.setParameter("status", status);
		query.setResultTransformer(Transformers.aliasToBean(ToolVo.class));

		Integer pageNo = pageParameBean.getPageNo();
		Integer pageSize = pageParameBean.getLimit();
		int currentPage = pageNo > 1 ? pageNo : 1;

		String hql = "select count(*) from ( " + sqlString + " ) as countTable ";
		Query queryForCount = super.getSession().createSQLQuery(hql);
		queryForCount.setParameter("userId", userId);
		queryForCount.setParameter("status", status);
		Long count = Long.parseLong(queryForCount.uniqueResult().toString());

		retValue.setTotal(count.intValue());

		@SuppressWarnings("unchecked")
		List<ToolVo> itemList = query.setFirstResult((currentPage - 1) * pageSize).setMaxResults(pageSize).list();
		if (itemList == null) {
			itemList = new ArrayList<ToolVo>();
		}
		retValue.setRows(itemList);
		return retValue;
	}

	@SuppressWarnings("unchecked")
	public List<ToolVo> findLatestReleaseTool(Integer pageSize ,Integer userID) {
		String hql = " from " + Tool.class.getCanonicalName() + " where status=? ";
		List<Object> paramList = new ArrayList<Object>();
		paramList.add(ToolStatus.已共享.value());
		
		if (userID != null && userID != 0) {
			hql+= " and submitUser.id=? ";
			paramList.add(userID);
		}
		
		hql+=" order by createTime desc ";
		DataTablePage dataTablePage = super.findPageByFetchedHql(ToolVo.class, hql, null, 1, pageSize, paramList.toArray());
		return (List<ToolVo>) dataTablePage.getRows();
	}

}
package com.starsec.dao;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.hibernate.Query;
import org.hibernate.transform.Transformers;
import org.springframework.stereotype.Repository;

import com.starsec.constants.TaskStatus;
import com.starsec.model.DataTablePage;
import com.starsec.po.SysDepartment;
import com.starsec.po.SysUser;
import com.starsec.po.Task;
import com.starsec.po.TaskType;
import com.starsec.po.TaskUser;
import com.starsec.util.DateUtil;
import com.starsec.util.SessionUtil;
import com.starsec.vo.PageParameBean;
import com.starsec.vo.TaskUserVo;
import com.starsec.vo.TaskVo;

/** 任务表(TASK) **/
@Repository
public class TaskDao extends BaseDao<Task, Serializable> {

	/**
	 * 找出任务类型下任务总数
	 * 
	 * @param taskType
	 * @return
	 */
	public Long findCountTaskInTaskType(TaskType taskType) {
		String countHql = " select count(*) from " + Task.class.getCanonicalName() + "  as task where task.taskType = ?";
		Long count = super.countByHql(countHql, taskType);
		return count;
	}

	/**
	 * 分页查询 用于成员接受的任务
	 * 
	 * @param pageParameBean
	 * @return
	 */
	public DataTablePage findPageTasksForAccept(PageParameBean pageParameBean) {
		String sqlString = " SELECT   " + " DISTINCT  " + " task.status AS taskStatus    " + " ,task.task_id AS taskId    " + " ,task.task_name AS taskName  "
				+ " ,task.release_time AS releaseTime    " + " ,task.user_id AS releaseUserId  " + " ,task.task_num AS taskNum    " + " ,task.task_score AS taskScore    "
				+ " ,sys_user.user_name AS releaseUserName  " + " ,COUNT(task_user.user_id) AS sumParticipator    "
				+ " ,CASE WHEN task_user.is_leader=1 THEN task_user.user_id ELSE NULL END AS leaderUserId    "
				+ " ,CASE WHEN task_user.is_leader=1 THEN sys_user1.user_name ELSE NULL END AS leaderUserName    " + " FROM task  " + " LEFT JOIN sys_user   "
				+ " ON sys_user.user_id  = task.user_id  " + " LEFT JOIN task_user  " + " ON task_user.task_id  = task.task_id  " + " LEFT JOIN sys_user AS sys_user1  "
				+ " ON sys_user1.user_id  = task.user_id  " + " WHERE task.status = 1  " + " GROUP BY task.task_id  " + " ORDER BY task.release_time DESC  ";

		DataTablePage retValue = new DataTablePage();

		Query query = super.getSession().createSQLQuery(sqlString);
		query.setResultTransformer(Transformers.aliasToBean(TaskVo.class));

		Integer pageNo = pageParameBean.getPageNo();
		Integer pageSize = pageParameBean.getLimit();
		int currentPage = pageNo > 1 ? pageNo : 1;

		String hql = "select count(*) from ( " + sqlString + " ) as countTable ";
		Query queryForCount = super.getSession().createSQLQuery(hql);
		Long count = Long.parseLong(queryForCount.uniqueResult().toString());

		retValue.setTotal(count.intValue());

		@SuppressWarnings("unchecked")
		List<TaskVo> itemList = query.setFirstResult((currentPage - 1) * pageSize).setMaxResults(pageSize).list();
		if (itemList == null) {
			itemList = new ArrayList<TaskVo>();
		}
		retValue.setRows(itemList);
		return retValue;
	}

	/**
	 * 任务状态统计
	 * 
	 * @return
	 */
	public List<TaskVo> getTaskStatusStatistic() {
		String sqlString = " SELECT   " 
							+ " task.status as status, " 
							+ " COUNT(task.task_id) AS countTask " 
							+ " FROM " 
							+ " task " 
							+ " GROUP BY task.status ";
		Query query = super.getSession().createSQLQuery(sqlString);
		query.setResultTransformer(Transformers.aliasToBean(TaskVo.class));
		@SuppressWarnings("unchecked")
		List<TaskVo> taskStatusStatistic = query.list();
		for (TaskVo taskVo : taskStatusStatistic) {
			taskVo.setTaskStatus(TaskStatus.valueOf(taskVo.getStatus()).toString());
		}
		return taskStatusStatistic;
	}

	/*
	 * 任务类型统计
	 */
	public List<TaskVo> getTaskTypeStatistic() {
		String sqlString = " SELECT  " 
							+ " DISTINCT  " 
							+ " task.task_type_id AS taskTypeId  " 
							+ " ,task_type.task_name AS  taskTypeName " 
							+ " ,COUNT(task.task_id) as countTask  " 
							+ " FROM  "
							+ " task   " 
							+ " LEFT JOIN task_type  " 
							+ " ON task.task_type_id = task_type.task_type_id  " 
							+ " GROUP BY  task.task_type_id  ";
		Query query = super.getSession().createSQLQuery(sqlString);
		query.setResultTransformer(Transformers.aliasToBean(TaskVo.class));
		@SuppressWarnings("unchecked")
		List<TaskVo> taskStatusStatistic = query.list();
		return taskStatusStatistic;
	}

	/**
	 * 任务 个人榜
	 * 
	 * @param pageParameBean
	 * @return
	 */
	public DataTablePage findPagePersonalTaskRanks(PageParameBean pageParameBean) {
		String sqlString = " SELECT   " 
							+ " DISTINCT  " 
							+ " sys_user.user_id as userId  " 
							+ " ,sys_user.user_account as nickname " 
							+ " ,sys_user.task_score as taskScore "
							+ " ,sys_user_group.user_group_id as userGroupId " 
							+ " ,sys_user_group.user_group_name as userGroupName " 
							+ " ,sys_department.department_id as departmentId  "
							+ " ,sys_department.department_name as departmentName " 
							+ " ,COUNT(task_user.task_id) AS countTask "
							+ " FROM " + " sys_user  "
							+ " LEFT JOIN sys_user_group "
							+ " ON sys_user.user_group_id = sys_user_group.user_group_id " 
							+ " LEFT JOIN sys_department " 
							+ " ON sys_user.department_id = sys_department.department_id " 
							+ " LEFT JOIN task_user "
							+ " ON sys_user.user_id = task_user.user_id " 
							+ " GROUP BY sys_user.user_id " 
							+ " ORDER BY countTask DESC ";

		DataTablePage retValue = new DataTablePage();

		Query query = super.getSession().createSQLQuery(sqlString);
		query.setResultTransformer(Transformers.aliasToBean(TaskVo.class));
		Integer pageNo = pageParameBean.getPageNo();
		Integer pageSize = pageParameBean.getLimit();
		int currentPage = pageNo > 1 ? pageNo : 1;

		String countHql = " select count(*) from " + SysUser.class.getCanonicalName();
		Long count = super.countByHql(countHql);
		retValue.setTotal(count.intValue());

		@SuppressWarnings("unchecked")
		List<TaskVo> itemList = query.setFirstResult((currentPage - 1) * pageSize).setMaxResults(pageSize).list();
		if (itemList == null) {
			itemList = new ArrayList<TaskVo>();
		}
		retValue.setRows(itemList);
		return retValue;

	}

	/**
	 * 任务 单位榜
	 * 
	 * @param pageParameBean
	 * @return
	 */
	public DataTablePage findPageDepartmentTaskRanks(PageParameBean pageParameBean) {
		String sqlString = " SELECT   " 
						+ " DISTINCT  " 
						+ " sys_department.department_id as departmentId  " 
						+ " ,sys_department.department_name as departmentName   "
						+ " ,COUNT(DISTINCT sys_user.user_id) AS countUser  " 
						+ " ,COUNT(DISTINCT task_user.task_id)  AS countTask  " 
						+ " ,sys_department_score.departmentSumScore AS sumScore  " 
						+ " FROM  "
						+ " sys_department  " 
						+ " LEFT JOIN sys_user  " 
						+ " ON sys_user.department_id = sys_department.department_id  " 
						+ " LEFT JOIN task_user    "
						+ " ON sys_user.user_id = task_user.user_id  " 
						+ " LEFT JOIN   " 
						+ " (SELECT   " 
						+ " sys_user.department_id,  " 
						+ " SUM(sys_user.task_score) AS departmentSumScore  " + " FROM  "
						+ " sys_user  " 
						+ " GROUP BY sys_user.department_id  " 
						+ " ) AS  sys_department_score  " 
						+ " ON sys_department_score.department_id = sys_department.department_id  "
						+ " GROUP BY sys_department.department_id  " 
						+ " ORDER BY sumScore DESC  ";

		DataTablePage retValue = new DataTablePage();

		Query query = super.getSession().createSQLQuery(sqlString);
		query.setResultTransformer(Transformers.aliasToBean(TaskVo.class));
		Integer pageNo = pageParameBean.getPageNo();
		Integer pageSize = pageParameBean.getLimit();
		int currentPage = pageNo > 1 ? pageNo : 1;

		String countHql = " select count(*) from " + SysDepartment.class.getCanonicalName();
		Long count = super.countByHql(countHql);
		retValue.setTotal(count.intValue());

		@SuppressWarnings("unchecked")
		List<TaskVo> itemList = query.setFirstResult((currentPage - 1) * pageSize).setMaxResults(pageSize).list();
		if (itemList == null) {
			itemList = new ArrayList<TaskVo>();
		}
		retValue.setRows(itemList);
		return retValue;
	}

	
	
	public DataTablePage findPage(DataTablePage page, String likeKeyWord, Integer taskTypeId, Integer status, String createStarTime, String createEndTime) {

		StringBuffer hql = new StringBuffer(" from " + Task.class.getCanonicalName() + " where 1=1");
		List<Object> paramList = new ArrayList<Object>();
		if (StringUtils.isNotBlank(page.getSearch())) {
			hql.append(" and taskName like ? ");
			paramList.add("%" + page.getSearch() + "%");
		}
		if (StringUtils.isNotBlank(likeKeyWord)) {
			hql.append(" and (taskName like ? ");
			paramList.add("%" + likeKeyWord + "%");

			hql.append(" or taskOutline like ? ");
			paramList.add("%" + likeKeyWord + "%");
			hql.append(" ) ");
		}

		if (taskTypeId != null && taskTypeId != 0) {
			hql.append(" and taskType.id = ? ");
			paramList.add(taskTypeId);
		}

		if (StringUtils.isNotBlank(createStarTime)) {
			hql.append(" and releaseTime >= ? ");
			paramList.add(DateUtil.parseDate(createStarTime));
		}

		if (StringUtils.isNotBlank(createEndTime)) {
			hql.append(" and releaseTime <= ? ");
			paramList.add(DateUtil.parseDate(createEndTime));
		}

		if (status != null && status != 0) {
			hql.append(" and status = ? ");
			paramList.add(status);
		}else{
			hql.append(" and status != ? ");
			paramList.add(TaskStatus.未发布.value());
		}
		hql.append(" order by releaseTime desc ");

		return super.findPageByFetchedHql(TaskVo.class, hql.toString(), null, page.getPageNo(), page.getLimit(), paramList.toArray());

	}

	@SuppressWarnings("unchecked")
	public List<TaskVo> findLatestReleaseTask(Integer pageSize,Integer userID) {
		String hql = " from " + Task.class.getCanonicalName() + " where status=? ";
		List<Object> paramList = new ArrayList<Object>();
		paramList.add(TaskStatus.已发布.value());
		
		if (userID != null && userID != 0) {
			hql+= " and releaseUser.id=? ";
			paramList.add(userID);
		}
		
		hql+= " order by releaseTime desc ";
		DataTablePage dataTablePage = super.findPageByFetchedHql(TaskVo.class, hql, null, 1, pageSize, paramList.toArray());
		return (List<TaskVo>) dataTablePage.getRows();
	}

	@SuppressWarnings("unchecked")
	public List<TaskVo> findLatestFinishTask(Integer pageSize) {
		String hql = " from " + Task.class.getCanonicalName() + " where status=? order by taskFinishTime desc";
		DataTablePage dataTablePage = super.findPageByFetchedHql(TaskVo.class, hql, null, 1, pageSize, TaskStatus.已完成.value());
		return (List<TaskVo>) dataTablePage.getRows();
	}

	public DataTablePage findReceivingPage(DataTablePage page) {
		StringBuffer hql = new StringBuffer(" from " + TaskUser.class.getCanonicalName() + " where 1=1");
		List<Object> paramList = new ArrayList<Object>();
		if (StringUtils.isNotBlank(page.getSearch())) {
			hql.append(" and task.taskName like ? ");
			paramList.add("%" + page.getSearch() + "%");
		}
		
		hql.append(" and  sysUser.id = ?");
		paramList.add(SessionUtil.loginUser().getId());
		hql.append(" order by id desc");
		
		return super.findPageByFetchedHql(TaskUserVo.class, hql.toString(), null, page.getPageNo(), page.getLimit(), paramList.toArray());
	}

	public DataTablePage findMyTaskPage(DataTablePage page, Integer status) {
		StringBuffer hql = new StringBuffer(" from " + Task.class.getCanonicalName() + " where 1=1");
		List<Object> paramList = new ArrayList<Object>();
		if (StringUtils.isNotBlank(page.getSearch())) {
			hql.append(" and taskName like ? ");
			paramList.add("%" + page.getSearch() + "%");
		}
		if (status != null && status != 0) {
			hql.append(" and status = ? ");
			paramList.add(status);
		}else{
			hql.append(" and status != ? ");
			paramList.add(TaskStatus.未发布.value());
		}
		
		hql.append(" and releaseUser.id=?");
		paramList.add(SessionUtil.loginUser().getId());
		
		hql.append(" order by releaseTime desc ");
		return super.findPageByFetchedHql(TaskVo.class, hql.toString(), null, page.getPageNo(), page.getLimit(), paramList.toArray());

	}

	public List<TaskVo> findTaskTimeLine() {
		String sqlString = " SELECT  " 
				+ " DISTINCT  " 
				+ " user_score.year AS year  " 
				+ " ,user.user_account AS  nickname " 
				+ " ,sum(user_score.score) as sumScore  " 
				+ " FROM  "
				+ " sys_user_history_score as user_score " 
				+ " LEFT JOIN sys_user as user  " 
				+ " ON user_score.user_id=user.user_id  " 
				+ " GROUP BY  user_score.year,user_score.user_id  ";
		Query query = super.getSession().createSQLQuery(sqlString);
		query.setResultTransformer(Transformers.aliasToBean(TaskVo.class));
		@SuppressWarnings("unchecked")
		List<TaskVo> timeLine = query.list();
		return timeLine;
	}

}
package com.starsec.dao;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.transform.Transformers;
import org.springframework.stereotype.Repository;

import com.starsec.model.DataTablePage;
import com.starsec.po.TaskType;
import com.starsec.vo.SysDepartmentVo;
import com.starsec.vo.TaskTypeVo;

/** 任务类型(TASK_TYPE) **/
@Repository
public class TaskTypeDao extends BaseDao<TaskType, Serializable> {

	/**
	 * 根据id查出任务类型
	 * @param taskTypeId
	 * @return
	 */
	public TaskType findTaskTypeById(Integer taskTypeId) {
		return super.get(taskTypeId);
	}

	/**
	 * 分页查询 任务类型
	 * @param page
	 * @return
	 */
	public DataTablePage findPageTasks(DataTablePage page) {
		//判断是否要搜索
		Boolean isSearch =StringUtils.isNotBlank(page.getSearch());
		String sqlString = " SELECT   " 
				+ " DISTINCT  " 
				+ " task_type.task_type_id AS id,  "
				+ " task_type.task_name AS taskName,  "
				+ " task_type.parent_id AS parentId,  "
				+ " CASE  "
			+ " WHEN parentTaskType.task_name IS NULL THEN  "
				+ " '-'  "
			+ " ELSE  "
				+ " parentTaskType.task_name  "
			+ " END AS parentTaskName  "
			+ " FROM  "
				+ " task_type  "
			+ " LEFT JOIN task_type AS parentTaskType ON task_type.parent_id = parentTaskType.task_type_id  "
			+ " WHERE  "
				+ " 1 = 1  "
			
				;
		if(isSearch){
			sqlString=sqlString+
					" and ( " 
					+ " task_type.task_name like :taskName   "
					+ " OR parentTaskType.task_name like :parentTaskName   "
					+ "	) ";
		}
		sqlString = sqlString+
				" ORDER BY  "
				+ " task_type.task_type_id DESC  "
				;
		
		DataTablePage retValue = new DataTablePage();

		Query query = super.getSession().createSQLQuery(sqlString);
		//如果 有搜索词
		if(isSearch){
			query.setParameter("taskName", "%"+page.getSearch()+"%");
			query.setParameter("parentTaskName","%"+ page.getSearch()+"%");
		}
		query.setResultTransformer(Transformers.aliasToBean(TaskTypeVo.class));
		Integer pageNo = page.getPageNo();
		Integer pageSize = page.getLimit();
		int currentPage = pageNo > 1 ? pageNo : 1;

		String hql = "select count(*) from ( " + sqlString + " ) as countTable ";
		Query queryForCount = super.getSession().createSQLQuery(hql);
		//如果 有搜索词
		if(isSearch){
			queryForCount.setParameter("taskName", "%"+page.getSearch()+"%");
			queryForCount.setParameter("parentTaskName","%"+ page.getSearch()+"%");
		}
		Long count = Long.parseLong(queryForCount.uniqueResult().toString());
		retValue.setTotal(count.intValue());

		@SuppressWarnings("unchecked")
		List<SysDepartmentVo> itemList = query.setFirstResult((currentPage - 1) * pageSize).setMaxResults(pageSize).list();
		if (itemList == null) {
			itemList = new ArrayList<SysDepartmentVo>();
		}
		retValue.setRows(itemList);
		return retValue;

	}

	/**
	 * 添加修改任务类型
	 * @param taskTypeForSaveOrUpdate
	 * @return
	 */
	public Integer saveOrUpdateTaskType(TaskType taskTypeForSaveOrUpdate) {
		try{
			super.saveOrUpdate(taskTypeForSaveOrUpdate);
			return 1;
		}catch(HibernateException e){
			return 0;
		}
	}

	/**
	 * 删除任务类型
	 * @param taskType
	 * @return
	 */
	public boolean deleteTaskType(TaskType taskType) {
		try{
			super.delete(taskType);
			return true;
		}catch(HibernateException e){
			return false;
		}
	}

	/**
	 * 批量删除任务类型
	 * @param taskTypeList
	 * @return
	 */
	public boolean deleteTaskTypeList(List<TaskType> taskTypeList) {
		try{
			for (TaskType taskType:taskTypeList) {
				super.delete(taskType);
			}
			return true;
		}catch(HibernateException e){
			return false;
		}
	}

	/**
	 * 检查 是否有子任务类型
	 * @param id
	 * @return
	 */
	public Long findCountChild(Integer id) {
		String countHql = " select count(*) from "+ TaskType.class.getCanonicalName() 
				+"  as taskType where taskType.parentId = ?";
		Long count = super.countByHql(countHql,id);
		return count;
	}

	public List<TaskType> findAll() {
		String hql =" from "+TaskType.class.getCanonicalName() ;
		return super.getListByHQL(hql);
	}

	/**
	 * 根据name查出任务类型总数
	 */
	public Long findCountByName(String taskName) {
		String countHql = " select count(*) from "+ TaskType.class.getCanonicalName() 
				+"  where taskName = ?";
		Long count = super.countByHql(countHql,taskName);
		return count;
	}
}
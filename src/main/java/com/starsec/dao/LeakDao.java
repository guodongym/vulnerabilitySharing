package com.starsec.dao;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.transform.Transformers;
import org.springframework.stereotype.Repository;

import com.starsec.constants.LeakAuditResult;
import com.starsec.constants.LeakStatus;
import com.starsec.model.DataTablePage;
import com.starsec.po.Leak;
import com.starsec.po.LeakType;
import com.starsec.util.DateUtil;
import com.starsec.vo.AnnualLeakStatistic;
import com.starsec.vo.AuditResultStatistic;
import com.starsec.vo.DepartmentRank;
import com.starsec.vo.LeakAmountInLeakType;
import com.starsec.vo.LeakAndCountComment;
import com.starsec.vo.LeakVo;
import com.starsec.vo.PageParameBean;
import com.starsec.vo.SysUserRank;

/** 漏洞表(LEAK) **/
@Repository
public class LeakDao extends BaseDao<Leak, Serializable> {
	/**
	 * 根据漏洞类型查出漏洞
	 */
	public Long findCountLeakInLeakType(LeakType leakType) {
		String countHql = " select count(*) from "+ Leak.class.getCanonicalName() 
				+"  as leak where leak.leakType = ?";
		Long count = super.countByHql(countHql,leakType);
		return count;
	}

	/**
	 * 分页查询漏洞
	 * @param reviewEndTime 
	 * @param reviewStartTime 
	 * @param createEndTime 
	 * @param createStarTime 
	 * @param reviewStatus 
	 * @param leakStatus 
	 * @param leakRiskLevel 
	 * @param leakTypeId 
	 * @param likeKeyWord 
	 * @param pageParameBean
	 * @return
	 */
	public DataTablePage findPageLeak(DataTablePage dataTablePage, String likeKeyWord, Integer leakTypeId, Integer leakRiskLevel, Integer leakStatus, Integer reviewStatus, String createStarTime, String createEndTime, String reviewStartTime, String reviewEndTime) {
		StringBuffer hql = new StringBuffer( " from "+Leak.class.getCanonicalName()+" where 1=1") ;
		List<Object> paramList = new ArrayList<Object>();
		//search
		if (StringUtils.isNotBlank(dataTablePage.getSearch())) {
			//漏洞编号
			hql.append(" and ( leakNo like ? ");
			paramList.add("%" + dataTablePage.getSearch() + "%");
			//漏洞名
			hql.append(" or leakName like ? ) ");
			paramList.add("%" + dataTablePage.getSearch() + "%");
		}
		//search,漏洞编号、漏洞名称、涉及的信息系统名称、漏洞概要
		if (StringUtils.isNotBlank(likeKeyWord)) {
			//漏洞编号
			hql.append(" and ( leakNo like  ? ");
			paramList.add("%" + likeKeyWord + "%");
			//漏洞名称
			hql.append(" or leakName like ? ");
			paramList.add("%" + likeKeyWord + "%");
			//涉及的信息系统名称
			hql.append(" or influenceSystemName like ? ");
			paramList.add("%" + likeKeyWord + "%");
			//漏洞概要
			hql.append(" or leakOutline like ? ");
			paramList.add("%" + likeKeyWord + "%");
			hql.append(" ) ");
		}
		
		//漏洞类型id  leakTypeId
		if (null!=leakTypeId&&0!=leakTypeId ) {
			hql.append(" and leakType.id = ? ");
			paramList.add(leakTypeId);
		}
		//危险等级  
		if (null!=leakRiskLevel &&0!=leakRiskLevel) {
			hql.append(" and riskLevel = ? ");
			paramList.add(leakRiskLevel);
		}
		
		//漏洞状态
		if (null!=leakStatus &&0!=leakStatus) {
			hql.append(" and leakStatus = ? ");
			paramList.add(leakStatus);
		}
		
		//审核结果
		if (null!=reviewStatus &&0!=reviewStatus) {
			hql.append(" and auditResult = ? ");
			paramList.add(reviewStatus);
		}
		// 提交时间
		if(StringUtils.isNotBlank(createStarTime)){
			hql.append(" and submitTime >= ? ");
			paramList.add(DateUtil.parseDate(createStarTime));
		}
		// 提交时间
		if(StringUtils.isNotBlank(createEndTime)){
			hql.append(" and submitTime <= ? ");
			paramList.add(DateUtil.parseDate(createEndTime));
		}
		// 审核时间 
		if(StringUtils.isNotBlank(reviewStartTime)){
			hql.append(" and auditTime >= ? ");
			paramList.add(DateUtil.parseDate(reviewStartTime));
		}
		// 审核时间 
		if(StringUtils.isNotBlank(reviewEndTime)){
			hql.append(" and auditTime <= ? ");
			paramList.add(DateUtil.parseDate(reviewEndTime));
		}
		//状态是"已发布"
		hql.append( " and leakStatus  IN (?, ?)  ");
		paramList.add(LeakStatus.未审核.value());
		paramList.add(LeakStatus.已审核.value());
		
		hql.append(" order by submitTime desc ");
		
		return super.findPageByFetchedHql(LeakVo.class, hql.toString(), null, dataTablePage.getPageNo(), 
				dataTablePage.getLimit(), paramList.toArray());
	
		
	}

	/**
	 * 添加修改漏洞
	 * @param leakForSaveOrUpdate
	 * @return
	 */
	public boolean saveOrUpdateLeak(Leak leakForSaveOrUpdate) {
		try{
			super.saveOrUpdate(leakForSaveOrUpdate);
			return true;
		}catch(HibernateException e){
			return false;
		}
	}


	/**
	 * 根据id获得漏洞信息get
	 * @param id
	 * @return
	 */
	public Leak getLeakById(Integer id) {
		return super.get(id);
	}

	/**
	 * 根据id删除漏洞信息
	 * @param leakForDelete
	 * @return
	 */
	public boolean deleteLeak(Leak leakForDelete) {
		try{
			super.delete(leakForDelete);
			return true;
		}catch(HibernateException e){
		
			return false;
		}
	}

	/**
	 * 批量删除漏洞
	 * @param leakList
	 * @return
	 */
	public boolean deleteLeakList(List<Leak> leakList) {
		try{
			for (Leak leak:leakList) {
				super.delete(leak);
			}
			return true;
		}catch(HibernateException e){
			return false;
		}
	}


	/**
	 * 分页查询漏洞信息和漏洞评论
	 * @param pageParameBean
	 * @return
	 */
	public DataTablePage findPageLeakAndCountComments(PageParameBean pageParameBean) {
		
		String sqlString = " select DISTINCT  "
				+ " leak.leak_id as leakId, "
				+ " leak.leak_name as leakName, "
				+ " leak.submit_time as submitTime, "//发布日期
				+ " leak.leak_status as leakStatus, "//状态
				+ " sys_user.user_id as submitUserId ,"//发布人id
				+ " sys_user.user_name as submitUserName , "//发布人姓名
				+ " COUNT(leak_comment.leak_id)  as countLeakComments "//评论数
				+ "  FROM  leak "
				+ " LEFT JOIN  sys_user "
				+ " on leak.submit_user_id = sys_user.user_id "
				+ " LEFT JOIN leak_comment "
				+ " on leak.leak_id = leak_comment.leak_id "
				+ " GROUP BY leak.leak_id ,leak_comment.leak_id ";
		
		
		DataTablePage retValue = new DataTablePage();
		Query query = super.getSession().createSQLQuery(sqlString).
				setResultTransformer(Transformers.aliasToBean(LeakAndCountComment.class));

		Integer pageNo = pageParameBean.getPageNo();
		Integer pageSize = pageParameBean.getLimit();
		int currentPage = pageNo > 1 ? pageNo : 1;
		
		

		Long count = countBySql(sqlString);
		retValue.setTotal(count.intValue());
		
		@SuppressWarnings("unchecked")
		List<Object[]> itemList = query.setFirstResult((currentPage - 1) * pageSize).setMaxResults(pageSize).list();
		if (itemList == null) {
			itemList = new ArrayList<Object[]>();
		}
		retValue.setRows(itemList);
		return retValue;
	}
	
	/**
	 * 统计查询结果的总条数
	 */
	public Long countBySql(String sqlString) {
		String hql= "select count(*) from ( "
				+ sqlString
				+ " ) as countTable ";
		Query query = super.getSession().createSQLQuery(hql);	
		return  Long.parseLong(query.uniqueResult().toString());
	}

	/**
	 * 获得未发布的漏洞数量
	 * @return
	 */
	public Long findCountLeakUnreleased() {
		
		String countHql = " select count(*) from "
				+ Leak.class.getCanonicalName() 
				+"  where 1=1"
				+ "and  leakStatus = ? ";
		Long countLeakUnreleased = super.countByHql(countHql,LeakStatus.未发布.value());
		return countLeakUnreleased;
	}

	/**
	 * 先获得漏洞总数量
	 * @return
	 */
	public Long findCountLeak() {
		String countHql = " select count(*) from "
				+ Leak.class.getCanonicalName() ;
		Long countLeak = super.countByHql(countHql);
		return countLeak;
	}

	/**
	 * 漏洞类型统计
	 * @return
	 */
	public List<LeakAmountInLeakType> countLeakTypes() {
		String sqlString =  "SELECT "
				+" DISTINCT "
				+" leak_type.leak_type_id as leakTypeId, "
				+" leak_type.leak_name as leakTypeName, "
				+" COUNT(leak.leak_id) as leakAmountInLeakType "
				+" FROM  "
				+" leak_type LEFT JOIN leak  "
				+" on leak_type.leak_type_id = leak.leak_type_id "
				+" where leak.leak_status IN ("
				+ LeakStatus.未审核.value()
				+ ","
				+ LeakStatus.已审核.value()
				+ ") "
				+" GROUP BY leak_type.leak_type_id ";
		
		
		Query query = super.getSession().createSQLQuery(sqlString).
				setResultTransformer(Transformers.aliasToBean(LeakAmountInLeakType.class));
		
		@SuppressWarnings("unchecked")
		List<LeakAmountInLeakType> leakAmountInLeakTypeList = query.list();
		return leakAmountInLeakTypeList;
	}
	
	
	
	/**
	 * 审核结果统计
	 * 统计每个审核结果的漏洞个数
	 * @return
	 */
	public List<AuditResultStatistic> findAuditResultStatistics() {
		
		String sqlString = 
				" SELECT  "
				+" leak.audit_result as auditResult, "
				+" COUNT(leak.leak_id) as sumLeakInAuditResult "
				+" FROM "
				+" leak "
				+" WHERE "
				+" NOT ISNULL(leak.audit_result) "
				+" and leak.leak_status IN ("
				+ LeakStatus.未审核.value()
				+ ","
				+ LeakStatus.已审核.value()
				+ ") "
				+" GROUP BY leak.audit_result ";

		Query query = super.getSession().createSQLQuery(sqlString).
				setResultTransformer(Transformers.aliasToBean(AuditResultStatistic.class));
		
		@SuppressWarnings("unchecked")
		List<AuditResultStatistic>  auditResultStatisticList = query.list();
		for (AuditResultStatistic auditResultStatistic : auditResultStatisticList) {
			auditResultStatistic.resetAuditResultName();
		}
		return auditResultStatisticList;
	}

	/**
	 *  漏洞
	 * 个人榜
	 * @param page
	 * @return
	 */
	public DataTablePage findPageSysUserRanks(DataTablePage page) {
		

		String sqlString =
				" SELECT   "
				+ " DISTINCT "
				+ " sys_user.user_id as userId "
				+ " ,sys_user.nickName as nickName "
				+ " ,sys_user.user_account AS userAccount  "
				+ " ,sys_user_group.user_group_id as userGroupId "
				+ " ,sys_user_group.user_group_name as userGroupName "
				+ " ,sys_department.department_id as departmentId "
				+ " ,sys_department.department_name  as departmentName "
				+ " ,SUM(CASE WHEN releasedleak.audit_result =  "
				+ LeakAuditResult.省公司首发漏洞.value()
				+ "   THEN 1 ELSE 0 END) AS sumLeakInProvince  "
				+ "  ,SUM(CASE WHEN releasedleak.audit_result = "
				+ LeakAuditResult.国网首发漏洞.value()
				+ "  THEN 1 ELSE 0 END) AS sumLeakInCountry  "
				+ " ,SUM(CASE WHEN (releasedleak.audit_result = "
				+ LeakAuditResult.省公司首发漏洞.value()
				+ "  ) or (releasedleak.audit_result =  "
				+ LeakAuditResult.国网首发漏洞.value()
				+ " ) THEN 1 ELSE 0 END) "
				+ " AS sumLeakInProvinceAndCountry "
				+ " FROM "
				+ " sys_user  "
				+ " LEFT JOIN sys_user_group "
				+ " ON sys_user.user_group_id = sys_user_group.user_group_id "
				+ " LEFT JOIN sys_department "
				+ " ON sys_user.department_id = sys_department.department_id "
				+ " LEFT JOIN "
				+ "(SELECT * from leak WHERE leak.leak_status IN ("
				+ LeakStatus.未审核.value()
				+ ","
				+ LeakStatus.已审核.value()
				+ ")) AS releasedleak "
				+ " ON sys_user.user_id = releasedleak.submit_user_id  "
				+ " WHERE 1=1 "
				+ " and sys_user.is_delete =   "
				+false
//				+ " AND sys_user.user_id<>    "
//				+Constants.ADMIN_ID
				+ " GROUP BY sys_user.user_id "
				+ " ORDER BY sumLeakInProvinceAndCountry DESC ";
		DataTablePage retValue = new DataTablePage();
		Query query = super.getSession().createSQLQuery(sqlString).
				setResultTransformer(Transformers.aliasToBean(SysUserRank.class));

		Integer pageNo = page.getPageNo();
		Integer pageSize = page.getLimit();
		int currentPage = pageNo > 1 ? pageNo : 1;

		Long count = countBySql(sqlString);
		retValue.setTotal(count.intValue());
		
		@SuppressWarnings("unchecked")
		List<SysUserRank> itemList = query.setFirstResult((currentPage - 1) * pageSize).setMaxResults(pageSize).list();
		if (itemList == null) {
			itemList = new ArrayList<SysUserRank>();
		}
		retValue.setRows(itemList);
		return retValue;
	}

	/**
	 *  漏洞
	 * 单位榜
	 * @param page
	 * @return
	 */
	public DataTablePage findPageDepartmentRanks(DataTablePage page) {
		
		String sqlString =
				" SELECT    "
				+ " DISTINCT   "
				+ " sys_department.department_id  as departmentId "
				+ " ,sys_department.department_name  as  departmentName "
				+ "  ,COUNT(DISTINCT sys_user.user_id) as sumSysUser   "
				+ "  ,SUM(CASE WHEN leak.audit_result = "
				+ LeakAuditResult.省公司首发漏洞.value()
				+ " THEN 1 ELSE 0 END) AS sumLeakInProvince   "
				+ "  ,SUM(CASE WHEN leak.audit_result = "
				+ LeakAuditResult.国网首发漏洞.value()
				+ " THEN 1 ELSE 0 END) AS sumLeakInCountry    "
				+ "  ,SUM(CASE WHEN (leak.audit_result = "
				+ LeakAuditResult.省公司首发漏洞.value()
				+ ") or (leak.audit_result = "
				+ LeakAuditResult.国网首发漏洞.value()
				+ " ) THEN 1 ELSE 0 END) "
				+ "AS sumLeakInProvinceAndCountry   "
				+ " FROM   "
				+ " sys_department    "
				+ " LEFT JOIN "
				+ " (SELECT * FROM sys_user WHERE sys_user.is_delete = 0 ) as sys_user  "
				+ " ON sys_department.department_id = sys_user.department_id   "
				+ " LEFT JOIN "
				+ " (SELECT * from leak WHERE leak.leak_status  IN ("
				+ LeakStatus.未审核.value()
				+ ","
				+ LeakStatus.已审核.value()
				+ ")) AS leak    "
				+ " ON sys_user.user_id = leak.submit_user_id   "
				+ " GROUP BY sys_department.department_id   "
				+ " ORDER BY sumLeakInProvinceAndCountry DESC    ";
			


		DataTablePage retValue = new DataTablePage();
		Query query = super.getSession().createSQLQuery(sqlString).
				setResultTransformer(Transformers.aliasToBean(DepartmentRank.class));

		Integer pageNo = page.getPageNo();
		Integer pageSize = page.getLimit();
		int currentPage = pageNo > 1 ? pageNo : 1;

		Long count = countBySql(sqlString);
		retValue.setTotal(count.intValue());
		
		@SuppressWarnings("unchecked")
		List<DepartmentRank> itemList = query.setFirstResult((currentPage - 1) * pageSize).setMaxResults(pageSize).list();
		if (itemList == null) {
			itemList = new ArrayList<DepartmentRank>();
		}
		retValue.setRows(itemList);
		return retValue;
	}

	/**
	 * 年度漏洞统计
	 * @return
	 */
	public List<AnnualLeakStatistic> findAnnualLeakStatistis() {
		String sqlString =
				" SELECT  "
				+ " leak_year_mounth.audit_result as   auditResult"
				+ " ,leak_year_mounth.YEARNO   as yearNo  "
				+ " ,leak_year_mounth.MONTHNO  as monthNo  "
				+ " ,COUNT(leak_year_mounth.leak_id)   as sumLeak "
				+ " FROM  "
				+ " (  "
				+ " SELECT  "
				+ " YEAR(leak.submit_time)  as YEARNO  "
				+ " ,MONTH(leak.submit_time) as MONTHNO  "
				+ " ,leak.*  "
				+ " FROM  "
				+ " leak  "
				+ " ) as leak_year_mounth  "
				+ " WHERE NOT ISNULL(leak_year_mounth.audit_result)   "
				+ " GROUP BY   "
				+ " leak_year_mounth.audit_result  "
				+ " ,leak_year_mounth.YEARNO  "
				+ " ,leak_year_mounth.MONTHNO  ";


		Query query = super.getSession().createSQLQuery(sqlString).
				setResultTransformer(Transformers.aliasToBean(AnnualLeakStatistic.class));

		@SuppressWarnings("unchecked")
		List<AnnualLeakStatistic> itemList = query.list();
		return itemList;
	}

	/**
	 * 未发布漏洞信息
	 * @param pageParameBean
	 * @param submitUser 
	 * @return
	 */
	public DataTablePage findPageUnreleasedLeaks(PageParameBean pageParameBean, Integer userId) {
		String Hql = " from "+Leak.class.getCanonicalName() 
				+"  as leak where leak.leakStatus = ?"
				+" and leak.submitUser.id = ?";
		String countHql = " select count(*)  " + Hql ;
		return super.findPageByFetchedHql(Hql, countHql, 
				pageParameBean.getPageNo(),
				pageParameBean.getLimit(),
				LeakStatus.未发布.value(),
				userId
				);
	}

	
	
	
	/**
	 * 已发布漏洞信息
	 * @param pageParameBean
	 * @param userId 
	 * @return
	 */
	public DataTablePage findPageReleasedLeaks(PageParameBean pageParameBean,  Integer userId) {
		String sqlString =
				" SELECT   "
				+ " DISTINCT  "
				+ " leak.leak_id as leakId  "
				+ " ,leak.leak_name as  leakName "
				+ " ,leak.submit_time as  submitTime  "
				+ " ,leak.audit_result as auditResult  "
				+ " ,COUNT(leak_comment.id) as sumLeakComment "
				+ " FROM  "
				+ " leak  "
				+ " LEFT JOIN leak_comment  "
				+ " ON leak.leak_id = leak_comment.leak_id  "
				+ " WHERE leak.submit_user_id = :userId  "
				+ " AND leak.leak_status IN (:auditing,:audited)   "
				+ " GROUP BY  leak.leak_id  ";
		
		DataTablePage retValue = new DataTablePage();
		
		Query query = super.getSession().createSQLQuery(sqlString);
		query.setParameter("userId",userId);
		query.setParameter("auditing",LeakStatus.未审核.value());
		query.setParameter("audited",LeakStatus.已审核.value());
		query.setResultTransformer(Transformers.aliasToBean(LeakVo.class));
		
		Integer pageNo = pageParameBean.getPageNo();
		Integer pageSize = pageParameBean.getLimit();
		int currentPage = pageNo > 1 ? pageNo : 1;

		
		String hql= "select count(*) from ( "
				+ sqlString
				+ " ) as countTable ";
		Query queryForCount = super.getSession().createSQLQuery(hql);
		queryForCount.setParameter("userId",userId);
		query.setParameter("auditing",LeakStatus.未审核.value());
		query.setParameter("audited",LeakStatus.已审核.value());
		Long count = Long.parseLong(queryForCount.uniqueResult().toString());
		
		
		
		retValue.setTotal(count.intValue());
		
		@SuppressWarnings("unchecked")
		List<LeakVo> itemList = query.setFirstResult((currentPage - 1) * pageSize).setMaxResults(pageSize).list();
		if (itemList == null) {
			itemList = new ArrayList<LeakVo>();
		}
		retValue.setRows(itemList);
		return retValue;
	}

	
	/**
	 * @Title: findLatestReleaseLeak 
	 * @Description: 首页，获取最新发布漏洞
	 * @author zhaogd 
	 * @param pageSize 需要的漏洞条数
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public List<LeakVo> findLatestReleaseLeak(Integer pageSize, Integer userId) {
		String hql = " from " + Leak.class.getCanonicalName() + " where leakStatus=? ";
		List<Object> paramList = new ArrayList<Object>();
		paramList.add(LeakStatus.未审核.value());

		if (userId != null && userId != 0) {
			hql+= " and submitUser.id=? ";
			paramList.add(userId);
		}

		hql += " order by submitTime desc ";
		DataTablePage dataTablePage = super.findPageByFetchedHql(LeakVo.class, hql, null, 1, pageSize, paramList.toArray());
		return (List<LeakVo>) dataTablePage.getRows();
	}


	
	public List<LeakVo> findLatestAuditLeak(Integer pageSize) {
		String hql = " from "+ Leak.class.getCanonicalName() +" where leakStatus=? order by auditTime desc";
		List<Leak> leakList = super.getListByHQL(hql, LeakStatus.已审核.value());
		List<LeakVo> leakVoList = getLeakVoList(pageSize, leakList);
		return leakVoList;
	}
	
	
	
	private List<LeakVo> getLeakVoList(Integer pageSize, List<Leak> leakList) {
		int size = pageSize;
		if(size>leakList.size()){
			size = leakList.size();
		}
		leakList = leakList.subList(0, size);
		List<LeakVo> leakVoList = new ArrayList<LeakVo>();
		for (Leak leak : leakList) {
			LeakVo leakVo = new LeakVo();
			leakVo.from(leak);
			leakVoList.add(leakVo);
		}
		return leakVoList;
	}

	/**
	 * 用用户名查询漏洞数
	 * @param leakName
	 * @return
	 */
	public Long findLeakByName(String leakName) {
		String countHql = " select count(*) from "+ Leak.class.getCanonicalName() 
				+"  as leak where leak.leakName = ?";
		Long count = super.countByHql(countHql,leakName);
		return count;
	}

	public Leak findLeakById(Integer id) {
		return super.get(id);
	}

	/**
	 * 我的未发布漏洞
	 * @param dataTablePage 
	 * @param integer 
	 * @return
	 */
	public DataTablePage findMyUnreleasePageLeaks(Integer userId, DataTablePage dataTablePage) {
		StringBuffer Hql = new StringBuffer(" from " + Leak.class.getCanonicalName() + 
				" as leak "
				);
		List<Object> paramList = new ArrayList<Object>();
		//用户id
		Hql.append( " where leak.submitUser.id = ? ");
		paramList.add(userId);
		
		//状态是"未发布"1
		Hql.append( " and leak.leakStatus= ? ");
		paramList.add(LeakStatus.未发布.value());
		
		//搜索
		if(!isEmptyString(dataTablePage.getSearch())){
			Hql.append( " and leak.leakName like ? ");
			paramList.add("%"+dataTablePage.getSearch()+"%");
		}
		
		//按提交时间倒序排序
		Hql.append( " order by leak.submitTime desc ");
		
		String countHql =  " select count(*) " + Hql.toString();
		return super.findPageByFetchedHql(LeakVo.class,
				Hql.toString(), 
				countHql.toString(), 
				dataTablePage.getPageNo(),
				dataTablePage.getLimit(), 
				paramList.toArray());
	}

	/**
	 * 我的已发布漏洞
	 * @param id
	 * @param dataTablePage
	 * @return
	 */
	public DataTablePage findMyReleasePageLeaks(Integer userId, DataTablePage dataTablePage) {
		StringBuffer Hql = new StringBuffer(" from " + Leak.class.getCanonicalName() + 
				" as leak "
				);
		List<Object> paramList = new ArrayList<Object>();
		//用户id
		Hql.append( " where leak.submitUser.id = ? ");
		paramList.add(userId);
		
		//状态是"已发布"
		Hql.append( " and leak.leakStatus  IN (?, ?, ?)  ");
		paramList.add(LeakStatus.未审核.value());
		paramList.add(LeakStatus.已审核.value());
		paramList.add(LeakStatus.已删除.value());
		
		//搜索
		if(!isEmptyString(dataTablePage.getSearch())){
			Hql.append( " and leak.leakName like ? ");
			paramList.add("%"+dataTablePage.getSearch()+"%");
		}
		
		//按提交时间倒序排序
		Hql.append( " order by leak.submitTime desc ");
		
		String countHql =  " select count(*) " + Hql.toString();
		return super.findPageByFetchedHql(LeakVo.class,
				Hql.toString(), 
				countHql.toString(), 
				dataTablePage.getPageNo(),
				dataTablePage.getLimit(), 
				paramList.toArray());
	}
	
	/**
    * 判断字符串是否为空
    * @param str 字符串
    * @return 是否为空
    */
    public  boolean isEmptyString(String str)
    {
    return str == null || str.trim().length() == 0;
    }

    /**
     * 已发布漏洞信息
     * @param dataTablePage
     * @return
     */
	public DataTablePage findPageReleasedLeak(DataTablePage dataTablePage) {
		StringBuffer Hql = new StringBuffer(" from " + Leak.class.getCanonicalName() + 
				" as leak "
				);
		List<Object> paramList = new ArrayList<Object>();
		//状态是"已发布"
		Hql.append( " where leak.leakStatus  IN (?, ?)  ");
		paramList.add(LeakStatus.未审核.value());
		paramList.add(LeakStatus.已审核.value());
		
		//搜索
		if(!isEmptyString(dataTablePage.getSearch())){
			Hql.append( " and leak.leakName like ? ");
			paramList.add("%"+dataTablePage.getSearch()+"%");
		}
		//按提交时间倒序排序
		Hql.append( " order by leak.submitTime desc ");
		
		String countHql =  " select count(*) " + Hql.toString();
		return super.findPageByFetchedHql(LeakVo.class,
				Hql.toString(), 
				countHql.toString(), 
				dataTablePage.getPageNo(),
				dataTablePage.getLimit(), 
				paramList.toArray());
	}

	public String findLastLeakNo() {
		String hql = " from " + Leak.class.getCanonicalName() + " as a"
		             + " where not exists ( select 1 "
		             + " from " + Leak.class.getCanonicalName() + " as b"
		             + " where b.id > a.id ) ";
		
		Leak leak = super.getByHQL(hql);
		if(leak == null){
			return null;
		}
		return leak.getLeakNo();
	}

	/**
	 * 获得已发布的漏洞数量
	 * @return
	 */
	public Long findCountLeakReleased() {
		String countHql = " select count(*) from "
				+ Leak.class.getCanonicalName() 
				+"  where 1=1"
				+ "and  leakStatus in  (?,?) ";
		Long countLeakUnreleased = super.countByHql(countHql,LeakStatus.未审核.value(),LeakStatus.已审核.value());
		return countLeakUnreleased;
	}


	
}
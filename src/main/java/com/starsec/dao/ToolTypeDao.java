package com.starsec.dao;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.transform.Transformers;
import org.springframework.stereotype.Repository;

import com.starsec.model.DataTablePage;
import com.starsec.po.ToolType;
import com.starsec.vo.SysDepartmentVo;
import com.starsec.vo.ToolTypeVo;

/** 工具类型(TOOL_TYPE) **/
@Repository
public class ToolTypeDao extends BaseDao<ToolType, Serializable> {

	/**
	 * 分页查询工具类型
	 * @param pageParameBean
	 * @return
	 */
	public DataTablePage findPageToolTypes(DataTablePage page)  {
		//判断是否要搜索
		Boolean isSearch =StringUtils.isNotBlank(page.getSearch());
		String sqlString = " SELECT   " 
				+ " DISTINCT  " 
				+ " tool_type.tool_type_id as id,  " 
				+ " tool_type.tool_name as toolTypeName ,  " 
				+ " tool_type.parent_id  as parentId ,  " 
				+ " CASE WHEN parentToolType.tool_name is null   " 
						 	+ " THEN '-'    " 
							+ " ELSE parentToolType.tool_name END AS parentToolTypeName  " 
				+ " from   " 
				+ " tool_type  " 
				+ " LEFT JOIN tool_type as parentToolType  " 
				+ " ON tool_type.parent_id = parentToolType.tool_type_id  " 
				+ " WHERE 1=1   " ;
		if(isSearch){
			sqlString=sqlString+
					 " and (  " 
					+ " tool_type.tool_name like :toolName  " 
				+ " OR parentToolType.tool_name like :parentToolName  " 
				+ " )  " ;
		}
		sqlString = sqlString+
				 "  order by tool_type.tool_type_id DESC  " 
				;
		
		DataTablePage retValue = new DataTablePage();

		Query query = super.getSession().createSQLQuery(sqlString);
		//如果 有搜索词
		if(isSearch){
			query.setParameter("toolName", "%"+page.getSearch()+"%");
			query.setParameter("parentToolName","%"+ page.getSearch()+"%");
		}
		query.setResultTransformer(Transformers.aliasToBean(ToolTypeVo.class));
		Integer pageNo = page.getPageNo();
		Integer pageSize = page.getLimit();
		int currentPage = pageNo > 1 ? pageNo : 1;

		String hql = "select count(*) from ( " + sqlString + " ) as countTable ";
		Query queryForCount = super.getSession().createSQLQuery(hql);
		//如果 有搜索词
		if(isSearch){
			queryForCount.setParameter("toolName", "%"+page.getSearch()+"%");
			queryForCount.setParameter("parentToolName","%"+ page.getSearch()+"%");
		}
		Long count = Long.parseLong(queryForCount.uniqueResult().toString());
		retValue.setTotal(count.intValue());

		@SuppressWarnings("unchecked")
		List<SysDepartmentVo> itemList = query.setFirstResult((currentPage - 1) * pageSize).setMaxResults(pageSize).list();
		if (itemList == null) {
			itemList = new ArrayList<SysDepartmentVo>();
		}
		retValue.setRows(itemList);
		return retValue;
	}

	/**
	 * 
	 * @Title: findAll 
	 * @Description: 查询所有
	 * @author zhaogd 
	 * @return
	 */
	public List<ToolType> findAll() {
		String hql =" from "+ToolType.class.getCanonicalName() ;
		return super.getListByHQL(hql);
	}
	
	
	/**
	 *根据id查出对象 
	 * @param id
	 * @return
	 */
	public ToolType findToolTypeById(Integer id) {
		return super.get(id);
	}

	/**
	 * 添加/更新工具类型
	 * @param toolTypeForSaveOrUpdate
	 * @return
	 */
	public Integer saveOrUpdateToolType(ToolType toolTypeForSaveOrUpdate) {
		try{
			super.saveOrUpdate(toolTypeForSaveOrUpdate);
			return 1;
		}catch(HibernateException e){
			return 0;
		}
	}

	/**
	 * 检查工具类型下子工具类型总数
	 * @param id
	 * @return
	 */
	public Long findCountChildToolType(Integer id) {
		String countHql = " select count(*) from "+ ToolType.class.getCanonicalName() 
				+"  as toolType where toolType.parentId = ?";
		Long count = super.countByHql(countHql,id);
		return count;
	}

	/**
	 * 删除工具类型
	 * @param toolTypeForDelete
	 * @return
	 */
	public boolean deleteLeakType(ToolType toolTypeForDelete) {
		try{
			super.delete(toolTypeForDelete);
			return true;
		}catch(HibernateException e){
		
			return false;
		}
	}

	/**
	 * 批量删除工具类型
	 * @param toolTypeList
	 * @return
	 */
	public boolean deleteToolTypeList(List<ToolType> toolTypeList) {
		try{
			for (ToolType toolType:toolTypeList) {
				super.delete(toolType);
			}
			return true;
		}catch(HibernateException e){
			return false;
		}
	}

	/**
	 * 用工具类型名查工具类型总数
	 * @param toolName
	 * @return
	 */
	public Long finCountByName(String toolName) {
		String countHql = " select count(*) from "+ ToolType.class.getCanonicalName() 
				+"   where  toolName = ?";
		Long count = super.countByHql(countHql,toolName);
		return count;
	}
	
}
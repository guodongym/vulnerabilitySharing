package com.starsec.dao;

import java.io.Serializable;
import java.util.List;

import org.hibernate.HibernateException;
import org.springframework.stereotype.Repository;

import com.starsec.model.DataTablePage;
import com.starsec.po.SysUserGroup;
import com.starsec.vo.PageParameBean;

/** 用户组(SYS_USER_GROUP) **/
@Repository
public class SysUserGroupDao extends BaseDao<SysUserGroup, Serializable> {

	/**
	 * 根据id获得部门信息
	 * @param id
	 * @return
	 */
	public SysUserGroup getSysUserGroupById(Integer id) {
		SysUserGroup sysUserGroup = super.get(id);
		return sysUserGroup;
	}

	/**
	 *更新或保存用户分组
	 * @param sysUserGroupForSaveOrUpdate
	 * @return
	 */
	public boolean saveOrUpdateSysUserGroup(SysUserGroup sysUserGroupForSaveOrUpdate) {
		try{
			super.saveOrUpdate(sysUserGroupForSaveOrUpdate);
			return true;
		}catch(HibernateException e){
			return false;
		}
	}


	/**
	 * 删除分组
	 * @param sysUserGroup
	 * @return
	 */
	public boolean deleteSysDepartment(SysUserGroup sysUserGroup) {
		try{
			super.delete(sysUserGroup);
			return true;
		}catch(HibernateException e){
			return false;
		}
	}
	
	/**
	 * 开始批量删除分组 
	 * @param sysUserGroupList
	 * @return
	 */
	public boolean deleteSysDepartmentList(List<SysUserGroup> sysUserGroupList) {
		try{
			for (SysUserGroup sysUserGroup:sysUserGroupList) {
				super.delete(sysUserGroup);
			}
			return true;
		}catch(HibernateException e){
			return false;
		}
	}

	/**
	 * 分页查询分组
	 * @param pageParameBean
	 * @return
	 */
	public DataTablePage findPageSysUserGroups(PageParameBean pageParameBean) {
		//判断是否有搜索
		Boolean isSearch = !isEmptyString(pageParameBean.getSearch());
		String Hql = " from "+SysUserGroup.class.getCanonicalName()+" as sysUserGroup " ;
		if(isSearch){
			Hql = Hql+ " where sysUserGroup.userGroupName LIKE ? ";
		}
		Hql = Hql+ " order by sysUserGroup.id desc ";
		
		String countHql = " select count(*)  "+ Hql ;
		if(isSearch){
			return super.findPageByFetchedHql(Hql, countHql, 
					pageParameBean.getPageNo(),
					pageParameBean.getLimit(),
					"%"+pageParameBean.getSearch()+"%"
					);
		}
		return super.findPageByFetchedHql(Hql, countHql, 
				pageParameBean.getPageNo(),
				pageParameBean.getLimit()
				);
	}

	
	/**
	 * 根据用户组名,查出用户组数量
	 * @param userGroupName
	 * @return
	 */
	public Long findCountSysUserGroup(String userGroupName) {
		String countHql = " select count(*) from "+ SysUserGroup.class.getCanonicalName() 
				+"  as sysUserGroup where sysUserGroup.userGroupName = ?";
		Long count = super.countByHql(countHql,userGroupName);
		return count;

	}
	
	

	
	

	

	/**
    * 判断字符串是否为空
    * @param str 字符串
    * @return 是否为空
    */
    public  boolean isEmptyString(String str)
    {
    return str == null || str.trim().length() == 0;
    }

    
    /**
     * 查询所有的用户组信息
     * @return
     */
	public List<SysUserGroup> findSysUserGroups() {
		String Hql = " from "+ SysUserGroup.class.getCanonicalName() ;
		List<SysUserGroup> sysUserGroups = super.getListByHQL(Hql);
		return sysUserGroups;
	}
}
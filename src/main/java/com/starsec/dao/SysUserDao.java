package com.starsec.dao;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.hibernate.HibernateException;
import org.springframework.stereotype.Repository;

import com.starsec.constants.Constants;
import com.starsec.model.DataTablePage;
import com.starsec.po.SysDepartment;
import com.starsec.po.SysUser;
import com.starsec.po.SysUserGroup;
import com.starsec.vo.SysUserVo;

/** 用户表(SYS_USER) **/
@Repository
public class SysUserDao extends BaseDao<SysUser, Serializable> {
	/**
	 * 根据用户名查找用户信息
	 * 改为
	 * 根据账号查找用户信息
	 * @param userName
	 * @return
	 */
	public SysUser findSysUserByUserAccount(String userAccount){
		String Hql = " from "+ SysUser.class.getCanonicalName() +
				" as sysUser  where sysUser.userAccount = ?  and sysUser.isDelete = ?";
		List<SysUser> sysUserList = super.getListByHQL(Hql,userAccount,false);
		if(null!=sysUserList&&!sysUserList.isEmpty()){
			return (SysUser) sysUserList.get(0);
		}
		return null;
	}

	/**
	 * 分页查询用户信息
	 * @param pageParameBean
	 * @return
	 */
	public DataTablePage  findPageSysUsers(DataTablePage dataTablePage) {
		StringBuffer hql = new StringBuffer( " from "+SysUser.class.getCanonicalName()+" where 1=1") ;
		List<Object> paramList = new ArrayList<Object>();
		
		//search
		String search = dataTablePage.getSearch();
		if (StringUtils.isNotBlank(search)) {
			//左括号
			hql.append(" and ( ");
			//用户帐号
			hql.append( " userAccount like  ? ");
			paramList.add("%" + search + "%");
			//用户角色
			hql.append(" or userName like ? ");
			paramList.add("%" + search + "%");
			//右括号
			hql.append(" ) ");
		}
		
		//是否删除
		hql.append(" and isDelete = ? ");
		paramList.add(false);
		
//		//不是管理员
		hql.append(" and id <> ? ");
		paramList.add(Constants.ADMIN_ID);
		
		//排序
		hql.append(" order by  createTime desc ");
		

		return super.findPageByFetchedHql(SysUserVo.class, hql.toString(), null, dataTablePage.getPageNo(), 
				dataTablePage.getLimit(), paramList.toArray());
	}
	
	/**
	* 判断字符串是否为空
	* @param str 字符串
	* @return 是否为空
	*/
	public static boolean isEmptyString(String str)
	{
	return str == null || str.trim().length() == 0;
	}
	/**
	 * 更新用户信息
	 * @param sysUser
	 * @return
	 */
	public Integer updateSysUser(SysUser sysUser) {
		try{
			super.update(sysUser);
			return 1;
		}catch(HibernateException e){
			return 0;
		}
	}

	/**
	 * 用id查找系统用户信息
	 * @param id
	 * @return
	 */
	public SysUser findSysUserById(Integer id) {
		SysUser sysUser = super.get(id);
		return sysUser;
		
	}
	/**
	 * 用id查找系统用户信息get
	 * @param id
	 * @return
	 */
	public SysUser getSysUserById(Integer id) {
		SysUser sysUser = super.get(id);
		return sysUser;
		
	}

	/**
	 * 添加或修改用户
	 * @param sysUser
	 * @return
	 */
	public Integer saveOrUpdateSysUer(SysUser sysUser) {
		try{
			super.saveOrUpdate(sysUser);
			return 1;
		}catch(HibernateException e){
			return 0;
		}
		
	}

	/**
	 * 批量更新sysUserList
	 * @param sysUserList
	 * @return
	 */
	public boolean updateSysUserList(List<SysUser> sysUserList) {
		try{
			for (SysUser sysUser:sysUserList) {
				super.update(sysUser);
			}
			return true;
		}catch(HibernateException e){
			return false;
		}
	}

	/**
	 * 查询部门下员工总数
	 * @param sysDepartmentId
	 * @return
	 */
	public Long findCountUserInDepartment(SysDepartment sysDepartment) {
		String countHql = " select count(*) from "+ SysUser.class.getCanonicalName() 
				+"  as sysUser where sysUser.sysDepartment = ?";
		Long count = super.countByHql(countHql,sysDepartment);
		return count;
	}

	/**
	 * 查询员工分组下的员工数量
	 * @param sysUserGroup
	 * @return
	 */
	public Long findCountUserInGroup(SysUserGroup sysUserGroup) {
		String countHql = " select count(*) from "+ SysUser.class.getCanonicalName() 
				+"  as sysUser where sysUser.sysUserGroup = ?";
		Long count = super.countByHql(countHql,sysUserGroup);
		return count;
	}

	/**
	 * 获得所有的用户信息
	 * @return
	 */
	public List<SysUser> getSysUserListByHQL() {
		String Hql = " from "+ SysUser.class.getCanonicalName();
		List<SysUser> sysUserList = super.getListByHQL(Hql);
		return sysUserList;
	}

	/**
	 * 帐号相同的用户个数
	 * @param userAccount
	 * @return
	 */
	public Long findCountUserByUserAccount(String userAccount) {
		String countHql = " select count(*) from "+ SysUser.class.getCanonicalName() 
				+"  as sysUser where sysUser.userAccount = ?  "
				;
		Long count = super.countByHql(countHql,userAccount);
		return count;
	}

}
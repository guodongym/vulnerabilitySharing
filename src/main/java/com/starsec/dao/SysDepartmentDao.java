package com.starsec.dao;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.transform.Transformers;
import org.springframework.stereotype.Repository;

import com.starsec.model.DataTablePage;
import com.starsec.po.SysDepartment;
import com.starsec.vo.PageParameBean;
import com.starsec.vo.SysDepartmentVo;

/** 部门表(SYS_DEPARTMENT) **/
@Repository
public class SysDepartmentDao extends BaseDao<SysDepartment, Serializable> {
	/**
	 * 根据id查出部门信息
	 * @return
	 */
	public SysDepartment getSysDepartmentById(Integer id) {
		SysDepartment sysDepartment = super.get(id);
		return sysDepartment;
	}
	
	

	/**
	 * 分页查询部门信息
	 * @param pageParameBean
	 * @return
	 */
	public DataTablePage findPageSysDepartments(PageParameBean pageParameBean) {
		String Hql = " from "+SysDepartment.class.getCanonicalName() ;
		String countHql = " select count(*) from "+ SysDepartment.class.getCanonicalName() ;
		return super.findPageByFetchedHql(Hql, countHql, 
				pageParameBean.getPageNo(),
				pageParameBean.getLimit()
				);
		
	}
	
	
	
	/**
	* 判断字符串是否为空
	* @param str 字符串
	* @return 是否为空
	*/
	public  boolean isEmptyString(String str)
	{
	return str == null || str.trim().length() == 0;
	}



	/**
	 * 根据 id查出部门信息
	 * @param id
	 * @return
	 */
	public SysDepartment findSysDepartmentById(Integer id) {
		return super.get(id);
	}



	/**
	 * 添加或修改部门信息
	 * @param sysDepartmentForSaveOrUpdate
	 * @return
	 */
	public Boolean saveOrUpdateSysDepartment(SysDepartment sysDepartment) {
		try{
			super.saveOrUpdate(sysDepartment);
			return true;
		}catch(HibernateException e){
			return false;
		}
	}



	/**
	 * 查询子部门个数
	 * @param id
	 */
	public Long findCountChild(Integer id) {
		String countHql = " select count(*) from "+ SysDepartment.class.getCanonicalName() 
				+"  as sysDepartment where sysDepartment.parentId = ?";
		Long count = super.countByHql(countHql,id);
		return count;
	}


	/**
	 * 删除部门 
	 * @param sysDepartment
	 * @return
	 */
	public boolean deleteSysDepartment(SysDepartment sysDepartment) {
		try{
			super.delete(sysDepartment);
			return true;
		}catch(HibernateException e){
		
			return false;
		}
	}



	/**
	 * 批量删除部门 
	 * @param sysDepartmentList
	 * @return
	 */
	public boolean deleteSysDepartmentList(List<SysDepartment> sysDepartmentList) {
		try{
			for (SysDepartment sysDepartment:sysDepartmentList) {
				super.delete(sysDepartment);
			}
			return true;
		}catch(HibernateException e){
			return false;
		}
	}



	/**
	 * 查询父部门下所有部门
	 * @param parentId
	 * @return
	 */
	public List<SysDepartment> findChildDepartments(Integer parentId) {
		String Hql = " from "+ SysDepartment.class.getCanonicalName() 
				+" as sysDepartment where sysDepartment.parentId = ? ";
		List<SysDepartment> childDepartment = super.getListByHQL(Hql,parentId);
		return childDepartment;
		
	}



	/**
	 * 分页查询部门信息,用于显示部门信息,及父级部门信息
	 * @param page
	 * @return
	 */
	public DataTablePage findPageSysDepartmentVos(DataTablePage page) {
		//判断是否要搜索
		Boolean isSearch = !isEmptyString(page.getSearch());
		String sqlString = " SELECT   " 
				+ " DISTINCT  " 
				+ " sys_department.department_id AS id "
				+ " ,sys_department.department_name AS departmentName "
				+ " ,sys_department.parent_id  parentDepartmentId "
				+ " ,CASE WHEN parent_department.department_name is null  "
				+ " 	THEN '-'   "
				+ " 	ELSE parent_department.department_name END AS parentDepartmentName    "
				+ " FROM  "
				+ " sys_department  "
				+ " LEFT JOIN sys_department AS parent_department  "
				+ " ON sys_department.parent_id = parent_department.department_id  ";
		//如果 有搜索词
		if(isSearch){
			sqlString = sqlString+
					 " where sys_department.department_name LIKE :departmentName "
					+ " or parent_department.department_name LIKE :parentDepartmentName ";
		}
		sqlString = sqlString+
				 " ORDER BY sys_department.department_id DESC  "
				;
		
		DataTablePage retValue = new DataTablePage();

		Query query = super.getSession().createSQLQuery(sqlString);
		//如果 有搜索词
		if(isSearch){
			query.setParameter("departmentName", "%"+page.getSearch()+"%");
			query.setParameter("parentDepartmentName","%"+ page.getSearch()+"%");
		}
		query.setResultTransformer(Transformers.aliasToBean(SysDepartmentVo.class));
		Integer pageNo = page.getPageNo();
		Integer pageSize = page.getLimit();
		int currentPage = pageNo > 1 ? pageNo : 1;

		String hql = "select count(*) from ( " + sqlString + " ) as countTable ";
		Query queryForCount = super.getSession().createSQLQuery(hql);
		//如果 有搜索词
		if(isSearch){
			queryForCount.setParameter("departmentName", "%"+page.getSearch()+"%");
			queryForCount.setParameter("parentDepartmentName","%"+ page.getSearch()+"%");
		}
		Long count = Long.parseLong(queryForCount.uniqueResult().toString());
		retValue.setTotal(count.intValue());

		@SuppressWarnings("unchecked")
		List<SysDepartmentVo> itemList = query.setFirstResult((currentPage - 1) * pageSize).setMaxResults(pageSize).list();
		if (itemList == null) {
			itemList = new ArrayList<SysDepartmentVo>();
		}
		retValue.setRows(itemList);
		return retValue;
	}



	/*
	 * 
	 * 查询所有的部门信息list
	 */
	public List<SysDepartment> findSysDepartments() {
		String Hql = " from "+ SysDepartment.class.getCanonicalName() ;
		List<SysDepartment> sysDepartments = super.getListByHQL(Hql);
		return sysDepartments;
	}




	/**
	 * 查询同名漏洞信息数量
	 */
	public Long findLeakByName(String departmentName) {
		String countHql = " select count(*) from "+ SysDepartment.class.getCanonicalName() 
				+"   where departmentName = ?";
		Long count = super.countByHql(countHql,departmentName);
		return count;
	}
	
	

	
}
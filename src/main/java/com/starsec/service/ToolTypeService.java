package com.starsec.service;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.starsec.dao.SysLogDao;
import com.starsec.dao.ToolDao;
import com.starsec.dao.ToolTypeDao;
import com.starsec.model.DataTablePage;
import com.starsec.model.Result;
import com.starsec.po.ToolType;
import com.starsec.util.SessionUtil;

/**
 * 工具类型
 * 
 * @author cheng cheng
 *
 */
@Service
public class ToolTypeService {
	// 用户组
	@Autowired
	private ToolTypeDao toolTypeDao;

	// 工具
	@Autowired
	private ToolDao toolDao;
	
	//日志
	@Autowired
	private SysLogDao sysLogDao;
	//日志模块
	private static final String logTarget = "工具类型";

	/**
	 * 分页查询工具类型
	 * 
	 * @param pageParameBean
	 * @return
	 */
	public DataTablePage findPageToolTypes(DataTablePage page) {
		// 设置页面编号
		page.resetPageNo();
		return toolTypeDao.findPageToolTypes(page);
	}
	
	

	/**
	 * @Title: findAll 
	 * @Description: 查询所有
 	 * @author zhaogd 
	 * @return
	 */
	public List<ToolType> findAll() {
		return toolTypeDao.findAll();
	}
	
	
	
	/**
	 * 添加修改工具类型
	 * 
	 * @param toolType
	 * @return
	 */
	public Result saveOrUpdateToolType(ToolType toolType) {
		if(null==toolType.getId()){
			//新增工具类型
			return  saveToolType(toolType);
		}else{
			//修改漏洞类型
			return  updateToolType(toolType);
		}
	}

	/**
	 * 修改工具类型
	 * @param toolType
	 * @return
	 */
	private Result updateToolType(ToolType toolType) {
		//不是原来的工具类型名   且      有相同漏洞类型名
		if(!isQuondamName(toolType)&&isHaveSameToolType(toolType)){
				return Result.error("有相同工具类型");
		}
		toolType = getToolTypeForUpdate(toolType);
		toolTypeDao.saveOrUpdate(toolType);
		updateToolTypeLog(toolType);//修改工具类型   日志
		return Result.SUCCESS;
	}



	/**
	 * 修改工具类型   日志
	 * @param toolType
	 */
	private void updateToolTypeLog(ToolType toolType) {
		String logContent = "修改工具类型    "+getPartLogContent(toolType);
		saveLog(logContent);
	}



	/**
	 * 是否为原来的工具类型名
	 * @param toolType
	 * @return
	 */
	private boolean isQuondamName(ToolType toolType) {
		//用id查询漏洞类型
		ToolType toolTypeFinded = toolTypeDao.get(toolType.getId());
		if(toolTypeFinded.getToolName().
				equals(toolType.getToolName())){
			return true;
		}
		return false;
	}



	/**
	 * 新增工具类型
	 * @param toolType
	 * @return
	 */
	private Result saveToolType(ToolType toolType) {
		//判断是否有相同漏洞类型名
		if(isHaveSameToolType(toolType)){
			return Result.error("有相同工具类型");
		}
		Integer id = (Integer) toolTypeDao.save(toolType);
		saveToolTypeLog(id);//新增工具类型   日志
		return Result.SUCCESS;
		
		
	}

	/**
	 * 新增工具类型   日志
	 * @param id
	 */
	private void saveToolTypeLog(Integer id) {
		ToolType toolType = toolTypeDao.get(id);
		String logContent = "添加工具类型    "+getPartLogContent(toolType);
		saveLog(logContent);
		
	}
	
	/**
	 *  工具类型  日志的一部分
	 * @param toolType 
	 * @return
	 */
	private String getPartLogContent(ToolType toolType) {
		StringBuffer partLogContent = new StringBuffer();
		partLogContent.append(" 工具类型id:");
		partLogContent.append(toolType.getId());
		partLogContent.append("  工具类型名称:");
		partLogContent.append(toolType.getToolName());
		return partLogContent.toString();
	}
	
	/**
	 * 用日志内容保存日志
	 * @param logContent
	 */
	private void saveLog(String logContent) {
		sysLogDao.createSysLog(SessionUtil.loginUserAccount()
				, logTarget
				, logContent);
	}



	/**
	 * 判断是否有相同漏洞类型名
	 * @param toolType
	 * @return
	 */
	private boolean isHaveSameToolType(ToolType toolType) {
		//用工具类型名查工具类型总数
		Long countToolType = toolTypeDao.finCountByName(toolType.getToolName());
		if(countToolType>0){
			return true;
		}
		return false;
	}



	/**
	 * 得到用于更新的工具类型
	 * 
	 * @param toolType
	 * @return
	 */
	private ToolType getToolTypeForUpdate(ToolType toolType) {
		// 查出要更新的对象
		ToolType toolTypeForUpdate = toolTypeDao.findToolTypeById(toolType.getId());
		toolTypeForUpdate.setToolName(toolType.getToolName());
		toolTypeForUpdate.setParentId(toolType.getParentId());
		return toolTypeForUpdate;
	}
	/**
	 * 删除工具类型
	 * 
	 * @param id
	 * @return
	 */
	public Result deleteToolType(Integer id) {
		// 检查工具类型下是否有子工具类型
		Boolean isHaveChildToolType = checkChildToolType(id);
		// 有子工具类型返回删除不成功
		if (isHaveChildToolType) {
			return Result.error("请先删除子工具类型");
		}
		// 检查工具类型下是否有工具
		Boolean isHaveToolInToolType = checkToolInToolType(id);
		if (isHaveToolInToolType) {
			return Result.error("本工具类型下有工具");
		}
		// 根据id查到工具类型
		ToolType toolTypeForDelete = toolTypeDao.findToolTypeById(id);
		String name = toolTypeForDelete.getToolName();
		// 开始删除工具类型
		toolTypeDao.delete(toolTypeForDelete);
		deleteToolTypeLog(id,name);//删除工具类型  日志		
		return Result.SUCCESS;
	}

	/**
	 * 删除工具类型  日志		
	 * @param id
	 * @param name
	 */
	private void deleteToolTypeLog(Integer id, String name) {
		String logContent = "删除工具类型    "
				+"  工具类型 id:"
				+id
				+"  工具类型名称:"
				+name
				;
		saveLog(logContent);
	}



	/**
	 * 检查工具类型下是否有工具
	 * 
	 * @param id
	 * @return
	 */
	private Boolean checkToolInToolType(Integer id) {
		Boolean isHaveToolInToolType = false;
		ToolType toolType = toolTypeDao.findToolTypeById(id);
		Long count = toolDao.findCountToolInToolType(toolType);
		if (count > 0) {
			isHaveToolInToolType = true;
		} else {
			isHaveToolInToolType = false;
		}
		return isHaveToolInToolType;
	}
	/**
	 * 检查工具类型下是否有子工具类型
	 * 
	 * @param id
	 * @return
	 */
	private Boolean checkChildToolType(Integer id) {
		Boolean isHaveChildToolType = false;
		Long count = toolTypeDao.findCountChildToolType(id);
		if (count > 0) {
			isHaveChildToolType = true;
		} else {
			isHaveChildToolType = false;
		}
		return isHaveChildToolType;
	}

	/**
	 * 批量删除工具类型
	 * 
	 * @param idListString
	 * @return
	 */
	public Result deleteToolTypeList(String idListString) {
		List<ToolType> toolTypeList = new ArrayList<ToolType>();

		List<Integer> idList = parseStringToIntegerList(idListString);
		for (Integer id : idList) {
			// 检查工具类型下是否有子工具类型
			Boolean isHaveChildToolType = checkChildToolType(id);
			// 有子工具类型返回删除不成功
			if (isHaveChildToolType) {
				return Result.error("请先删除子工具类型");
			}
			// 检查工具类型下是否有工具
			Boolean isHaveToolInToolType = checkToolInToolType(id);
			if (isHaveToolInToolType) {
				return Result.error("请先删除工具类型下工具");
			}

			// 根据id查到工具类型
			ToolType toolTypeForDelete = toolTypeDao.findToolTypeById(id);
			// 添加到list
			toolTypeList.add(toolTypeForDelete);

		}
		// 开始批量删除工具类型
		for (ToolType toolType : toolTypeList) {
			Integer id = toolType.getId();
			String name = toolType.getToolName();
			toolTypeDao.delete(toolType);
			deleteToolTypeLog(id,name);//日志
		}
	
		return Result.SUCCESS;
	}

	/**
	 * string转成数组
	 * 
	 * @param str
	 * @return
	 */
	public List<Integer> parseStringToIntegerList(String str) {
		str = str.replace("[", "");
		str = str.replace("]", "");
		String[] ss = str.split(",");
		List<Integer> integerList = new ArrayList<Integer>();
		for (int i = 0; i < ss.length; i++) {
			Integer integer = Integer.parseInt(ss[i]);

			integerList.add(integer);
		}
		return integerList;

	}
	
}
package com.starsec.service;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.starsec.dao.SysDepartmentDao;
import com.starsec.dao.SysLogDao;
import com.starsec.dao.SysUserDao;
import com.starsec.model.DataTablePage;
import com.starsec.model.Result;
import com.starsec.po.SysDepartment;
import com.starsec.util.SessionUtil;
/**
 * 用户组织部门维护
 * @author cheng cheng
 *
 */
@Service
public class SysDepartmentService{
	/**
	 * 用户组织部门维护dao
	 */
	@Autowired
	private SysDepartmentDao sysDepartmentDao;
	
	//用户信息dao
	@Autowired
	private SysUserDao sysUserDao;
	
	
	//日志
	@Autowired
	private SysLogDao sysLogDao;
	//日志模块
	private static final String logTarget = "组织部门";
	
	

	/**
	 * 分页查询部门信息
	 * @param pageParameBean
	 * @return
	 */
	public DataTablePage findPageSysDepartmentVos(DataTablePage page) {
		//设置页面编号
		page.resetPageNo();
		DataTablePage pageSysDepartmentVos = 
				sysDepartmentDao.findPageSysDepartmentVos(page);
		return pageSysDepartmentVos;
	}
	
	
	



	/**
	 * 添加修改部门信息
	 * @param sysDepartment
	 * @return
	 */
	public Result saveOrUpdateSysDepartment(SysDepartment sysDepartment) {
		if(null== sysDepartment.getId()){
			//添加部门信息
			return saveSysDepartment( sysDepartment) ;
		}else{
			//修改部门信息
			return updateSysDepartment( sysDepartment) ;
		}

	}



	/**
	 * 修改部门信息
	 * @param sysDepartment
	 * @return
	 */
	private Result updateSysDepartment(SysDepartment sysDepartment) {
		if(!isQuondamName(sysDepartment)&&isExistSameName(sysDepartment)){
			return Result.error("有相同漏洞名");
		}
		//获得用于更新的部门信息
		SysDepartment sysDepartmentForUpdate = getSysDepartmentForUpdate(sysDepartment);
		sysDepartmentDao.update(sysDepartmentForUpdate);
		updateSysDepartmentLog(sysDepartmentForUpdate);//修改部门信息 日志
		return Result.SUCCESS;
	}






	/**
	 * 修改部门信息 日志
	 * @param sysDepartmentForUpdate
	 */
	private void updateSysDepartmentLog(SysDepartment sysDepartmentForUpdate) {
		String logContent = "修改部门信息    "+getPartLogContent(sysDepartmentForUpdate);
		saveLog(logContent);
		
	}






	/**
	 * 获得用于更新的部门信息
	 * @param sysDepartment
	 * @return
	 */
	private SysDepartment getSysDepartmentForUpdate(SysDepartment sysDepartment) {
		SysDepartment sysDepartmentForUpdate = sysDepartmentDao.findSysDepartmentById(sysDepartment.getId());
		sysDepartmentForUpdate.setDepartmentName(sysDepartment.getDepartmentName());
		sysDepartmentForUpdate.setParentId(sysDepartment.getParentId());
		return sysDepartmentForUpdate;
	}






	/**
	 * 添加部门信息
	 * @param sysDepartment
	 * @return
	 */
	private Result saveSysDepartment(SysDepartment sysDepartment) {
		//不是原来的名字,没有相同的名字
		if(isExistSameName(sysDepartment)){
			return Result.error("有相同漏洞名");
		}
		Integer id = (Integer) sysDepartmentDao.save(sysDepartment);
		saveSysDepartmentLog(id);
		return Result.SUCCESS;
	}
	
	/**
	 * 添加部门信息 日志
	 * @param id
	 */
	private void saveSysDepartmentLog(Integer id) {
		SysDepartment sysDepartment = sysDepartmentDao.get(id);
		String logContent = "添加部门信息    "+getPartLogContent(sysDepartment);
		saveLog(logContent);
		
	}
	






	/**
	 * 是否存在同名 部门
	 * @param sysDepartment
	 * @return
	 */
	private boolean isExistSameName(SysDepartment sysDepartment) {
		Long countLeak = sysDepartmentDao.findLeakByName(sysDepartment.getDepartmentName());
		if(countLeak>0){
			return true;
		}
		return false;
	}






	/**
	 * 是否为原来的名字
	 * @param sysDepartment
	 * @return
	 */
	private boolean isQuondamName(SysDepartment sysDepartment) {
		SysDepartment sysDepartmentFinded = sysDepartmentDao.findSysDepartmentById(sysDepartment.getId());
		if(sysDepartmentFinded.getDepartmentName().equals(sysDepartment.getDepartmentName())){
			return true;
		}
		return false;
	}






	





	

	/**
	 * 删除部门信息
	 * @param sysDepartment
	 * @return
	 */
	public Result deleteSysDepartment(SysDepartment sysDepartment) {
		//检查是否有子部门
		Boolean isHaveChild  = checkChildSysDepartment(sysDepartment.getId());
		//有子部门返回删除不成功 
		if(isHaveChild){
			return Result.error("请先删除子部门");
		}
		//检查部门下是否有员工
		Boolean isHaveSysUser = checkUserInDepartment(sysDepartment.getId());
		//部门下有员工返回删除不成功 
		if(isHaveSysUser){
			return Result.error("请先删除部门下所有员工");
		}
		//根据id查到部门
		sysDepartment = sysDepartmentDao.findSysDepartmentById(sysDepartment.getId());
		Integer id = sysDepartment.getId();
		String name = sysDepartment.getDepartmentName();
		//开始删除部门 
		sysDepartmentDao.delete(sysDepartment);
		deleteSysDepartmentLog(id,name);//删除部门信息 日志
		return Result.SUCCESS;
	}

	/**
	 * 删除部门信息 日志
	 * @param name 
	 * @param id 
	 */
	private void deleteSysDepartmentLog(Integer id, String name) {
		StringBuffer logContent = new StringBuffer();
		logContent.append(" 删除部门信息   ");
		logContent.append(" id:");
		logContent.append(id);
		logContent.append("   部门名称:");
		logContent.append(name);
		sysLogDao.createSysLog(SessionUtil.loginUserAccount()
				, logTarget
				, logContent.toString());
	}





	






	/**
	 * 检查部门下是否有员工
	 * @param id
	 * @return
	 */
	private Boolean checkUserInDepartment(Integer sysDepartmentId) {
		//查出部门信息
		SysDepartment sysDepartment = sysDepartmentDao.findSysDepartmentById(sysDepartmentId);
		Boolean isHaveSysUser = false;
		Long count = sysUserDao.findCountUserInDepartment(sysDepartment);
		if(count>0){
			isHaveSysUser = true;
		}else{
			isHaveSysUser = false;
		}
		return isHaveSysUser;
	}






	/**
	 * 检查是否有子部门
	 * @return
	 */
	private Boolean checkChildSysDepartment(Integer id) {
		Boolean isHaveChild = false;
		Long count = sysDepartmentDao.findCountChild(id);
		if(count>0){
			isHaveChild = true;
		}else{
			isHaveChild = false;
		}
		return isHaveChild;
	}






	/**
	 * 批量删除部门信息
	 * @param idList
	 * @return 
	 */
	public Result deleteSysDepartmentList(String idListString) {
		List<SysDepartment> sysDepartmentList = new ArrayList<SysDepartment>();
		  
		List<Integer> idList = parseStringToIntegerList(idListString);
		for (Integer id : idList) {
			//检查是否有子部门
			Boolean isHaveChild  = checkChildSysDepartment(id);
			//有子部门返回删除不成功 
			if(isHaveChild){
				return Result.error("请先删除子部门");
			}
			
			//检查部门下是否有员工
			Boolean isHaveSysUser = checkUserInDepartment(id);
			//部门下有员工返回删除不成功 
			if(isHaveSysUser){
				return Result.error("请先删除部门下所有员工");
			}
			//根据id查到部门
			SysDepartment  sysDepartment = sysDepartmentDao.findSysDepartmentById(id);
			//添加到list
			sysDepartmentList.add(sysDepartment);
			//删除日志
			Integer departmentId = sysDepartment.getId();
			String name = sysDepartment.getDepartmentName();
			deleteSysDepartmentLog(departmentId, name);
		
		}
		//开始批量删除部门 
		Boolean  isSuccess=  sysDepartmentDao.deleteSysDepartmentList(sysDepartmentList);
		if(!isSuccess){
			return Result.error("删除失败");
		}
		return Result.SUCCESS;
		
	}



	

	/**
	 * string转成数组
	 * @param str
	 * @return
	 */
	public List<Integer> parseStringToIntegerList(String str){
		str=str.replace("[",""); 
		str=str.replace("]",""); 
		String[] ss=str.split(",");
		List<Integer> integerList = new ArrayList<Integer>();
		for (int i = 0; i < ss.length; i++) {
			Integer integer = Integer.parseInt(ss[i]);
			
			integerList.add(integer);
		}
		return integerList;
		
	}






	/**
	 * 查询所有的部门信息list
	 * @return
	 */
	public List<SysDepartment> findSysDepartments() {
		List<SysDepartment> sysDepartments =sysDepartmentDao.findSysDepartments();
		return sysDepartments;
	}

	
	
	/**
	 *  组织部门 日志的一部分
	 * @param leak
	 * @return
	 */
	private String getPartLogContent( SysDepartment sysDepartment) {
		StringBuffer partLogContent = new StringBuffer();
		partLogContent.append(" id:");
		partLogContent.append(sysDepartment.getId());
		partLogContent.append("   部门名称:");
		partLogContent.append(sysDepartment.getDepartmentName());
		return partLogContent.toString();
	}
	
	/**
	 * 用日志内容保存日志
	 * @param logContent
	 */
	private void saveLog(String logContent) {
		sysLogDao.createSysLog(SessionUtil.loginUserAccount()
				, logTarget
				, logContent);
	}

	
}
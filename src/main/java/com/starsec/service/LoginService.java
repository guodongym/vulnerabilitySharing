package com.starsec.service;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.starsec.constants.Constants;
import com.starsec.dao.SysLogDao;
import com.starsec.dao.SysMenuDao;
import com.starsec.dao.SysMessageDao;
import com.starsec.dao.SysUserDao;
import com.starsec.model.Result;
import com.starsec.po.SysMenu;
import com.starsec.po.SysRole;
import com.starsec.po.SysRoleAuthority;
import com.starsec.po.SysUser;
import com.starsec.util.MD5Util;
import com.starsec.util.SessionUtil;
import com.starsec.vo.SysMenuVo;
import com.starsec.vo.SysUserLoginBean;

@Service
public class LoginService {
	// 不可过多登陆的时间范围（单位：min 例如：10，表示10分钟可登陆限制次数）
	private static final Integer timeRange = 10;
	// 指定时间内可错误登陆次数
	private static final Integer maxLoginTimes = 3;
	// 锁定时间(单位:分钟)
	private static final Integer intervalTime = 5;

	// 0:成功登陆
	private static final String loginSuccessFlg = "0";
	// 1:用户名或密码错误
	private static final String wrongUserNameorPasswordFlg = "1";
	// 3.限定登陆
	private static final String refuseLoginFlg = "3";

	// 引入系统用户操作的dao
	@Autowired
	private SysUserDao sysUserDao;

	@Autowired
	private SysMenuDao sysMenuDao;

	@Autowired
	private SysMessageDao sysMessageDao;

	// 日志
	@Autowired
	private SysLogDao sysLogDao;
	// 日志模块
	private static final String logTarget = "用户";

	/**
	 * 用户登录
	 * 
	 * @param sysUser
	 * @param session
	 * @param session
	 * @return
	 */
	public Result login(SysUser sysUser, HttpSession session) {

		// 如果用户名为空,返回提示
		String userAccount = sysUser.getUserAccount();
		if (null == userAccount || "".equals(userAccount)) {
			return Result.error("用户名或密码错误");// 用户名或密码错误
		}
		// 如果密码为空,返回提示
		String password = sysUser.getPassword();
		if (null == password || "".equals(password)) {
			return Result.error("用户名或密码错误");// 用户名或密码错误
		}
		// 查询用户信息
		SysUser sysUserFinded = sysUserDao.findSysUserByUserAccount(sysUser.getUserAccount());
		// 如果查询用户信息为空,
		if (null == sysUserFinded) {
			return Result.error("用户名或密码错误");// 用户名或密码错误
		}

		// 判断 2.账号禁用 , 显示.账号禁用
		if (sysUserFinded.isDisable()) {
			return Result.error("账号已禁用,请联系管理员");
		}
		// 对密码进行加密
		password = MD5Util.encryptMD5(sysUser.getPassword());
		sysUser.setPassword(password);
		// 密码不正确
		if (!sysUser.getPassword().equals(sysUserFinded.getPassword())) {
			// 锁定账户相关设置
			setLock(sysUser, session);
			return Result.error("用户名或密码错误");// 用户名或密码错误
		}

		// 如果密码正确,判断是否锁定
		if (sysUser.getPassword().equals(sysUserFinded.getPassword())) {
			// 锁定账户相关设置
			if (refuseLoginFlg == checkLock(sysUser, session)) {
				return Result.error("限制登录中,请五分钟后登录");// 账户锁定
			}
		}


		List<String> permissions = new ArrayList<String>();
		if (!sysUserFinded.getSysRoles().isEmpty()) {
			Set<SysRole> roles = sysUserFinded.getSysRoles();
			for (SysRole sysRole : roles) {
				Set<SysRoleAuthority> sysRoleAuthoritys = sysRole.getSysRoleAuthoritys();
				for (SysRoleAuthority sysRoleAuthority : sysRoleAuthoritys) {
					permissions.add(sysRoleAuthority.getAuthorityUrl());
				}
			}
		}
		
		List<SysMenu> menus = sysMenuDao.findAll();
		Map<String, List<SysMenuVo>> map = makeMap(menus);
		List<SysMenuVo> roots = map.get("0");
		if (roots == null) {
			roots = Collections.emptyList();
		}
		Collections.sort(roots);
		for (SysMenuVo root : roots) {
			buildTree(root, map);
		}

		session.setAttribute("menus", roots);
		session.setAttribute(Constants.LOGIN_USER, sysUserFinded);
		session.setAttribute(Constants.LOGIN_USER_PERMISSIONS, permissions);
		session.setAttribute(Constants.NEWS_NUM, sysMessageDao.countNotRead().intValue());

		loginLog(sysUserFinded);// 登陆日志
		return Result.SUCCESS;

	}

	/**
	 * 登陆日志
	 * 
	 * @param sysUserFinded
	 */
	private void loginLog(SysUser sysUserFinded) {
		String logContent = "用户登陆    " + getPartLogContent(sysUserFinded);
		saveLog(logContent);

	}

	/**
	 * 登陆日志的一部分
	 * 
	 * @param leak
	 * @return
	 */
	private String getPartLogContent(SysUser sysUser) {
		StringBuffer partLogContent = new StringBuffer();
		partLogContent.append(" id:");
		partLogContent.append(sysUser.getId());
		partLogContent.append("   用户帐号:");
		partLogContent.append(sysUser.getUserAccount());
		return partLogContent.toString();
	}
	/**
	 * 用日志内容保存日志
	 * 
	 * @param logContent
	 */
	private void saveLog(String logContent) {
		sysLogDao.createSysLog(SessionUtil.loginUserAccount(), logTarget, logContent);
	}

	/**
	 * 检查帐户是否锁定
	 * 
	 * @param session
	 * @param sysUser
	 * @param session
	 * @return
	 */
	public String checkLock(SysUser sysUser, HttpSession session) {
		// 获得session中的用户登陆信息
		@SuppressWarnings("unchecked")
		List<SysUserLoginBean> sysUserLoginBeanList = (List<SysUserLoginBean>) session.getAttribute("sysUserLoginBeanList");
		// 遍历用户登陆信息
		// 如果userLoginBeanList存在,遍历用户登陆信息
		if (null != sysUserLoginBeanList && sysUserLoginBeanList.size() > 0) {
			// 遍历用户登陆信息
			for (SysUserLoginBean sessionSysUserLoginBean : sysUserLoginBeanList) {
				// 如果用户名相同,就是以前登陆过
				if (sessionSysUserLoginBean.getSysUser().getUserAccount().equals(sysUser.getUserAccount())) {
					// 判断帐户是否锁定
					Integer loginTimes = sessionSysUserLoginBean.getLoginTimes();
					// 现在时间-第一次时间
					Long lockToNow = null;
					// 登录次数是否大于指定次数,已锁定,检查是否可到解锁时间
					if (loginTimes >= maxLoginTimes) {
						Date now = new Date();
						Date lockTime = sessionSysUserLoginBean.getLockTime();
						lockToNow = (now.getTime() - lockTime.getTime()) / (1000 * 60);

					}
					// 登录次数是否大于指定次数,距锁定时间<=5,显:3.限定登陆
					if (loginTimes >= maxLoginTimes && lockToNow <= intervalTime) {
						// 3.限定登陆
						return refuseLoginFlg;
					}

					// 设为登陆次数为0
					sessionSysUserLoginBean.setLoginTimes(0);
				}

			}

		}

		// 返回登陆成功
		return loginSuccessFlg;
	}

	/**
	 * 锁定账户相关设置
	 * 
	 * @param sysUser
	 * @param session
	 * @return
	 */
	private String setLock(SysUser sysUser, HttpSession session) {
		// userAccount
		// 获得session中的用户登陆信息
		@SuppressWarnings("unchecked")
		List<SysUserLoginBean> sysUserLoginBeanList = (List<SysUserLoginBean>) session.getAttribute("sysUserLoginBeanList");
		// 遍历用户登陆信息
		// 如果userLoginBeanList存在,遍历用户登陆信息
		if (null != sysUserLoginBeanList && sysUserLoginBeanList.size() > 0) {
			Boolean isUserAccountExistSession = false;
			// 遍历用户登陆信息
			for (SysUserLoginBean sessionSysUserLoginBean : sysUserLoginBeanList) {
				// 如果用户名相同,就更改登陆次数
				if (sessionSysUserLoginBean.getSysUser().getUserAccount().equals(sysUser.getUserAccount())) {
					isUserAccountExistSession = true;
					// 设置登陆次数+1
					sessionSysUserLoginBean.setLoginTimes(sessionSysUserLoginBean.getLoginTimes() + 1);
					// 如果是第一次登陆,就添添加第一次登陆 时间
					if (1 == sessionSysUserLoginBean.getLoginTimes()) {
						sessionSysUserLoginBean.setFirstLoginTime(new Date());
					}
					Long time = null;
					// 如果不是第一次登陆,判断是否在指定时间内再次登陆
					if (1 != sessionSysUserLoginBean.getLoginTimes()) {
						Date now = new Date();
						Date firstLoginTime = sessionSysUserLoginBean.getFirstLoginTime();
						time = (now.getTime() - firstLoginTime.getTime()) / (1000 * 60);
					}
					// 如果不是第一次登陆,距第一次登陆时间超过限定时间,认为是第一次登陆
					if (1 != sessionSysUserLoginBean.getLoginTimes() && time >= timeRange) {
						// 设为第一次登陆
						sessionSysUserLoginBean.setLoginTimes(1);
						// 添加第一次登陆 时间
						sessionSysUserLoginBean.setFirstLoginTime(new Date());
					}

					// 判断登录次数是否大于指定次数
					Integer loginTimes = sessionSysUserLoginBean.getLoginTimes();
					// 如果是第三次,就加锁定时间,显示账号限定登陆
					if (loginTimes == maxLoginTimes) {
						sessionSysUserLoginBean.setLockTime(new Date());
						// 3.限定登陆
						return refuseLoginFlg;
					}
					// 如果大于3次,判断是否超过锁定时间
					if (loginTimes > maxLoginTimes) {
						Date now = new Date();
						Date lockTime = sessionSysUserLoginBean.getLockTime();
						time = (now.getTime() - lockTime.getTime()) / (1000 * 60);
						// 如果在锁定密码的时间内,就显示 限定登陆
						if (time < intervalTime) {
							// 3.限定登陆
							return refuseLoginFlg;
						} else {
							// 如果不在锁定密码的时间内,认为是第一次登陆
							// 设为第一次登陆
							sessionSysUserLoginBean.setLoginTimes(1);
							// 添加第一次登陆 时间
							sessionSysUserLoginBean.setFirstLoginTime(new Date());
						}
					}
				}
			}
			// 如果session中没有该用户信息
			if (!isUserAccountExistSession) {
				// 如果没有相同用户名,就添加一条用户信息
				// 创建一条用户登陆信息
				// 设为第一次登陆
				SysUserLoginBean addedSysUserLoginBean = new SysUserLoginBean();
				addedSysUserLoginBean.setSysUser(sysUser);
				addedSysUserLoginBean.setLoginTimes(1);
				// 添加第一次登陆 时间
				addedSysUserLoginBean.setFirstLoginTime(new Date());
				sysUserLoginBeanList.add(addedSysUserLoginBean);
			}
			// 如果session 中用户信息为空,需要新建用户登陆信息到session中
		} else {
			// 没有相同用户名,就添加一条用户信息
			// 创建一条用户登陆信息
			// 设为第一次登陆
			SysUserLoginBean addedSysUserLoginBean = new SysUserLoginBean();
			addedSysUserLoginBean.setSysUser(sysUser);
			addedSysUserLoginBean.setLoginTimes(1);
			// 添加第一次登陆 时间
			addedSysUserLoginBean.setFirstLoginTime(new Date());
			List<SysUserLoginBean> addedSysUserLoginBeanList = new ArrayList<SysUserLoginBean>();
			addedSysUserLoginBeanList.add(addedSysUserLoginBean);
			session.setAttribute("sysUserLoginBeanList", addedSysUserLoginBeanList);
		}
		// 1:用户名或密码错误
		return wrongUserNameorPasswordFlg;
	}

	/**
	 * 退出登陆日志
	 * 
	 * @param sysUserFinded
	 */
	public void logoutLog() {
		String logContent = "退出登陆    " + getPartLogContent(SessionUtil.loginUser());
		saveLog(logContent);
	}
	

	private void buildTree(SysMenuVo parent, Map<String, List<SysMenuVo>> map) {
		String menuCode = parent.getMenuCode();
		List<SysMenuVo> children = map.get(menuCode);
		parent.setChildren(children);
		if (children == null) {
			return;
		}
		for (SysMenuVo child : children) {
			buildTree(child, map);
		}
	}

	private Map<String, List<SysMenuVo>> makeMap(List<SysMenu> menus) {
		Map<String, List<SysMenuVo>> map = new HashMap<String, List<SysMenuVo>>();
		for (SysMenu menu : menus) {
			String pid = menu.getParentCode();
			List<SysMenuVo> nodes = map.get(pid);
			if (nodes == null) {
				nodes = new ArrayList<SysMenuVo>();
				map.put(pid, nodes);
			}
			SysMenuVo menuVo = new SysMenuVo();
			menuVo.setMenuCode(menu.getMenuCode());
			menuVo.setName(menu.getName());
			menuVo.setUrl(menu.getUrl());
			menuVo.setParentCode(menu.getParentCode());
			menuVo.setSort(menu.getSort());
			nodes.add(menuVo);
		}
		return map;
	}
}
package com.starsec.service;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.starsec.constants.Constants;
import com.starsec.dao.SysDepartmentDao;
import com.starsec.dao.SysLogDao;
import com.starsec.dao.SysRoleDao;
import com.starsec.dao.SysUserDao;
import com.starsec.dao.SysUserGroupDao;
import com.starsec.model.DataTablePage;
import com.starsec.model.Result;
import com.starsec.po.SysAttachment;
import com.starsec.po.SysDepartment;
import com.starsec.po.SysRole;
import com.starsec.po.SysUser;
import com.starsec.util.MD5Util;
import com.starsec.util.SessionUtil;

@Service
public class SysUserService {

	@Autowired
	private SysUserDao sysUserDao;
	
	
	//用户组dao
	@Autowired
	private SysUserGroupDao sysUserGroupDao;
	
	//用户角色dao
	@Autowired
	private SysRoleDao sysRoleDao ;
	
	@Autowired
	private SysDepartmentDao sysDepartmentDao;
	
	//日志
	@Autowired
	private SysLogDao sysLogDao;
	//日志模块
	private static final String logTarget = "用户信息";
	
	/**
	 * 分页查询用户信息
	 * @param pageParameBean
	 * @return
	 */
	public DataTablePage  findPageResults(DataTablePage dataTablePage) {
		//设置页面编号
		dataTablePage.resetPageNo();
		return sysUserDao.findPageSysUsers(dataTablePage);
	}

	
	
	/**
	 *  用户信息  日志的一部分
	 * @param leak
	 * @return
	 */
	private String getPartLogContent( SysUser sysUser) {
		StringBuffer partLogContent = new StringBuffer();
		partLogContent.append(" 用户id:");
		partLogContent.append(sysUser.getId());
		partLogContent.append("   用户帐号:");
		partLogContent.append(sysUser.getUserAccount());
		return partLogContent.toString();
	}
	
	/**
	 * 用日志内容保存日志
	 * @param logContent
	 */
	private void saveLog(String logContent) {
		sysLogDao.createSysLog(SessionUtil.loginUserAccount()
				, logTarget
				, logContent);
	}

	
	
	/**
	 * 根据id禁用用户  日志
	 * @param sysUser
	 */
	private void disableSysUserLog(SysUser sysUser) {
		String logContent = "禁用用户     "+getPartLogContent(sysUser);
		saveLog(logContent);
		
	}
	
	/**
	 * 根据id禁用用户
	 * @param id
	 * @return
	 */
	public Result disableSysUser(Integer id) {
		//用id查找系统用户信息
		SysUser sysUser =  sysUserDao.findSysUserById(id);
		//设置禁用标记
		sysUser.setDisable(true);
		sysUserDao.update(sysUser);
		disableSysUserLog(sysUser);//根据id禁用用户  日志
		return Result.SUCCESS;
	}
	
	/**
	 * 根据idList禁用多个用户
	 * @param idListJson
	 * @return
	 */
	public Result updateDisableSysUserList(String idListString) {
		List<Integer> sysUserIdList = parseStringToIntegerList(idListString);
		List<SysUser> sysUserList = new ArrayList<SysUser>();
		for(Integer sysUserId:sysUserIdList){
			//用id查找系统用户信息
			SysUser sysUser =  sysUserDao.findSysUserById(sysUserId);
			//设置禁用标记
			sysUser.setDisable(true);
			sysUserList.add(sysUser);
			disableSysUserLog(sysUser);//根据id禁用用户  日志
		}
		boolean isSuccess =  sysUserDao.updateSysUserList(sysUserList);
		if(!isSuccess){
			return Result.error("批量禁用不成功");
		}
		return Result.SUCCESS;
	}
	
	
	/**
	 * 根据idList取消禁用多个用户
	 * @param idListJson
	 * @return
	 */
	public Result upadateCancelDisableSysUserList(String idListString) {
		List<Integer> sysUserIdList = parseStringToIntegerList(idListString);
		List<SysUser> sysUserList = new ArrayList<SysUser>();
		for(Integer sysUserId:sysUserIdList){
			//用id查找系统用户信息
			SysUser sysUser =  sysUserDao.findSysUserById(sysUserId);
			//设置取消禁用标记
			sysUser.setDisable(false);
			sysUserList.add(sysUser);
			cancelDisableSysUserLog(sysUser);//根据id禁用用户  日志
		}
		boolean isSuccess =  sysUserDao.updateSysUserList(sysUserList);
		if(!isSuccess){
			return Result.error("批量取消禁用不成功");
		}
		return Result.SUCCESS;
	}
	
	/**
	 * 取消禁用用户  日志
	 * @param sysUser
	 */
	private void cancelDisableSysUserLog(SysUser sysUser) {
		String logContent = "取消禁用用户     "+getPartLogContent(sysUser);
		saveLog(logContent);
	}
	/**
	 * 根据idList批量删除用户
	 * @param idListJson
	 * @return
	 */
	public Result deleteSysUserList(String idListString) {
		List<Integer> sysUserIdList = parseStringToIntegerList(idListString);
		for(Integer sysUserId:sysUserIdList){
			//用id查找系统用户信息
			SysUser sysUser =  sysUserDao.findSysUserById(sysUserId);
			//设置删除标记
			sysUser.setDelete(true);
			sysUserDao.update(sysUser);
			deleteSysUserLog(sysUser);//删除用户   日志
		}
		return Result.SUCCESS;
	}

	/**
	 * 删除用户   日志
	 * @param sysUser
	 */
	private void deleteSysUserLog(SysUser sysUser) {
		String logContent = "删除用户     "+getPartLogContent(sysUser);
		saveLog(logContent);
		
	}



	/**
	 *  根据id取消禁用用户
	 * @param id
	 * @return
	 */
	public Result cancelDisableSysUser(Integer id) {
		//用id查找系统用户信息
		SysUser sysUser =  sysUserDao.findSysUserById(id);
		//设置取消禁用标记
		sysUser.setDisable(false);
		sysUserDao.update(sysUser);
		cancelDisableSysUserLog(sysUser);//消禁用用户   日志
		return Result.SUCCESS;
	}

	/**
	 * 根据 id删除用户信息
	 * @param id
	 * @return
	 */
	public Result deleteSysUserById(Integer id) {
		//用id查找系统用户信息
		SysUser sysUser =  sysUserDao.findSysUserById(id);
		//设置删除标记
		sysUser.setDelete(true);
		sysUserDao.update(sysUser);
		deleteSysUserLog(sysUser);//日志
		return Result.SUCCESS;
	}
	
	/**
	 * 	添加用户
	 * @param sysUser
	 * @param sysRoleIds
	 * @param userGroupId
	 * @param defaultPassword
	 * @return
	 */
	public Result saveSysUer(SysUser sysUser, Integer[] sysRoleIds, Integer userGroupId, String defaultPassword) {
		//判断是否有相同帐号
		Boolean isHaveSameAccount = isHaveSameAccount(sysUser);
		if(isHaveSameAccount){
			return Result.error("有相同帐号,请更换一个");
		}
		//得到用于插入的用户信息
		SysUser sysUserForSaveOrUpdate = getSysUserForSave(sysUser,sysRoleIds,userGroupId,defaultPassword);
		sysUserDao.save(sysUserForSaveOrUpdate);
		saveSysUerLog(sysUserForSaveOrUpdate);//添加用户 日志
		return Result.SUCCESS;
	}
	
	


	/**
	 * 添加用户 日志
	 * @param sysUserForSaveOrUpdate
	 */
	private void saveSysUerLog(SysUser sysUserForSaveOrUpdate) {
		String logContent = "添加用户    "+getPartLogContent(sysUserForSaveOrUpdate);
		saveLog(logContent);
	}



	/**
	 * 判断是否有相同帐号
	 * @return
	 */
	private Boolean isHaveSameAccount(SysUser sysUser) {
		//有相同帐号的个数
		Long countUser = sysUserDao.findCountUserByUserAccount(sysUser.getUserAccount());
		if(countUser>0){
			return true;
		}
		return false;
	}


	/**
	 * 得到用于插入的用户信息
	 * @param sysUser
	 * @param sysUserSaveAndUpdateBean
	 * @param defaultPassword 
	 * @return
	 */
	private SysUser getSysUserForSave(SysUser sysUser,
			Integer[] sysRoleIds, Integer userGroupId, 
			String defaultPassword)  {
		
		
		//用户角色
		sysUser.setSysRoles(getSysRoles(sysRoleIds));
		//用户组
		sysUser.setSysUserGroup(sysUserGroupDao.get(userGroupId));
		//加密漠认密码
		String password = MD5Util.encryptMD5(defaultPassword);
		sysUser.setPassword(password);
		
		sysUser.setNickname("");
		sysUser.setCreateTime(new Date());
		sysUser.setDelete(false);
		sysUser.setDisable(false);
		sysUser.setTaskScore(Constants.DEFAULT_TASK_SCORE);

		return sysUser;
	}



	/**
	 * 根据id获得用户角色
	 * @param sysUserSaveAndUpdateBean 
	 * @return
	 */
	private Set<SysRole> getSysRoles(Integer[] sysRoleIds) {
		Set<SysRole>  sysRoleSet = new HashSet<SysRole>();
		//遍历数组 
		for (Integer sysRoleId : sysRoleIds) {
			SysRole sysRole = sysRoleDao.getSysRoleById(sysRoleId);
			sysRoleSet.add(sysRole);
		}
		return sysRoleSet;
	}



	/**
	 * string转成数组
	 * @param str
	 * @return
	 */
	public List<Integer> parseStringToIntegerList(String str){
		str=str.replace("[",""); 
		str=str.replace("]",""); 
		String[] ss=str.split(",");
		List<Integer> integerList = new ArrayList<Integer>();
		for (int i = 0; i < ss.length; i++) {
			Integer integer = Integer.parseInt(ss[i]);
			
			integerList.add(integer);
		}
		return integerList;
		
	}

//	/*
//	 * 根据 id显示一个用户信息
//	 */
//	public SysUser toShowUser(Integer id) {
//		
//		return sysUserDao.findSysUserById(id) ;
//	}

	public SysUser findById(Integer id) {
		return sysUserDao.findSysUserById(id);
	}

	
	/**
	 *  初始化密码
	 * @param userId
	 * @param defaultPassword 
	 * @return
	 */
	public Result initPassword(Integer userId, String defaultPassword) {
		SysUser  sysUser = sysUserDao.findSysUserById(userId);
		 //加密漠认密码
		String password = MD5Util.encryptMD5(defaultPassword);
		sysUser.setPassword(password);
		sysUserDao.update(sysUser);
		initPasswordLog(sysUser);//初始化密码  日志
		return Result.SUCCESS;
	}

	/**
	 * 初始化密码  日志
	 * @param sysUser 
	 */
	private void initPasswordLog(SysUser sysUser) {
		String logContent = "初始化密码    "+getPartLogContent(sysUser);
		saveLog(logContent);
	}



	/**
	 * 添加或修改用户信息
	 * @param sysUser
	 * @param sysRoleIds
	 * @param userGroupId
	 * @param defaultPassword
	 * @return
	 */
	public Result saveOrUpdateSysUer(SysUser sysUser, Integer[] sysRoleIds, Integer userGroupId,
			String defaultPassword) {
		if(null==sysUser.getId()){
			return saveSysUer(sysUser, sysRoleIds, userGroupId, defaultPassword);
		}else{
			return updateSysUer(sysUser, sysRoleIds, userGroupId, defaultPassword);
		}
	}

	/**
	 * 修改用户信息
	 * @param sysUser
	 * @param sysRoleIds
	 * @param userGroupId
	 * @param defaultPassword
	 * @return
	 */
	private Result updateSysUer(SysUser sysUser, Integer[] sysRoleIds, Integer userGroupId, String defaultPassword) {

		//判断是否与原帐号相同 
		if(!isQuondamAccount(sysUser)){
			//判断是否有相同帐号
			Boolean isHaveSameAccount = isHaveSameAccount(sysUser);
			if(isHaveSameAccount){
				return Result.error("有相同帐号,请更换一个");
			}
		}
		
		//得到用于更新的用户信息
		SysUser sysUserForUpdate = getSysUserForUpdate(sysUser,sysRoleIds,userGroupId);
		sysUserDao.update(sysUserForUpdate);
		updateSysUerLog(sysUserForUpdate);//修改用户信息 日志
		return Result.SUCCESS;
	}
	

	/**
	 * 修改用户信息 日志
	 * @param sysUserForUpdate
	 */
	private void updateSysUerLog(SysUser sysUserForUpdate) {
		String logContent = "修改用户信息    "+getPartLogContent(sysUserForUpdate);
		saveLog(logContent);
	}



	/**
	 * 得到用于更新的用户信息
	 * @param sysUser
	 * @param sysRoleIds
	 * @param userGroupId
	 * @return
	 */
	private SysUser getSysUserForUpdate(SysUser sysUser, Integer[] sysRoleIds, Integer userGroupId) {
		SysUser sysUserFinded = sysUserDao.findSysUserById(sysUser.getId());
		//帐号
		sysUserFinded.setUserAccount(sysUser.getUserAccount());
		//姓名
		sysUserFinded.setUserName(sysUser.getUserName());
		//用户角色
		sysUserFinded.setSysRoles(getSysRoles(sysRoleIds));
		//用户组
		sysUserFinded.setSysUserGroup(sysUserGroupDao.get(userGroupId));
		return sysUserFinded;
	}

	/**
	 * 判断是否与原帐号相同 
	 * @param sysUser
	 * @return
	 */
	private Boolean isQuondamAccount(SysUser sysUser) {
		SysUser sysUserFinded = sysUserDao.findSysUserById(sysUser.getId());
		if(sysUserFinded.getUserAccount().
				equals(sysUser.getUserAccount())){
			return true;
		}
		return false;
	}

	public Result update(SysUser sysUser, Integer sysDepartmentId, SysAttachment sysAttachment) {
		SysUser updateUser = sysUserDao.get(sysUser.getId());
		
		updateUser.setUserName(sysUser.getUserName());
		updateUser.setNickname(sysUser.getNickname());
		if(StringUtils.isNotBlank(sysUser.getPassword())){
			updateUser.setPassword(MD5Util.encryptMD5(sysUser.getPassword()));
		}
		if(sysDepartmentId!=null && sysDepartmentId!=0){
			SysDepartment sysDepartment = sysDepartmentDao.get(sysDepartmentId);
			updateUser.setSysDepartment(sysDepartment);
		}
		if(sysAttachment!=null){
			updateUser.setSysAttachment(sysAttachment);
		}
		sysUserDao.update(updateUser);
		SessionUtil.getSession().setAttribute(Constants.LOGIN_USER, updateUser);
		updateSysUerLog(updateUser);
		return Result.SUCCESS;
	}




	
	
}

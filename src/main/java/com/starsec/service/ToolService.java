package com.starsec.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.starsec.constants.SysRoleType;
import com.starsec.constants.ToolStatus;
import com.starsec.dao.LeakTypeDao;
import com.starsec.dao.SysAttachmentDao;
import com.starsec.dao.SysLogDao;
import com.starsec.dao.ToolDao;
import com.starsec.dao.ToolTypeDao;
import com.starsec.model.DataTablePage;
import com.starsec.model.Result;
import com.starsec.po.LeakType;
import com.starsec.po.SysAttachment;
import com.starsec.po.SysRole;
import com.starsec.po.Tool;
import com.starsec.po.ToolType;
import com.starsec.util.DateUtil;
import com.starsec.util.SessionUtil;
import com.starsec.vo.PageParameBean;
import com.starsec.vo.ToolVo;
/**
 * 工具类型
 * 
 * @author cheng cheng
 *
 */
@Service
public class ToolService {
	// 工具
	@Autowired
	private ToolDao toolDao;

	@Autowired
	private SysAttachmentDao sysAttachmentDao;
	// 工具类型
	@Autowired
	private ToolTypeDao toolTypeDao;
	// 漏洞类型
	@Autowired
	private LeakTypeDao leakTypeDao;
	
	//日志
	@Autowired
	private SysLogDao sysLogDao;
	//日志模块
	private static final String logTarget = "工具";


	/**
	 * 分页查询工具
	 * 
	 * @param page
	 * @param createEndTime
	 * @param createStarTime
	 * @param leakTypeIds
	 * @param toolTypeId
	 * @param likeKeyWord
	 * @return
	 */
	public DataTablePage findPage(DataTablePage page, String likeKeyWord, Integer toolTypeId, String createStarTime, String createEndTime) {
		// 设置页面编号
		page.resetPageNo();
		return toolDao.findPage(page, likeKeyWord, toolTypeId, createStarTime, createEndTime);
	}

	public DataTablePage findMyToolPage(DataTablePage page, String likeKeyWord, Integer status) {
		// 设置页面编号
		page.resetPageNo();
		return toolDao.findMyToolPage(page, likeKeyWord, status);
	}

	public Result save(Tool tool, Integer attachmentId, Integer toolTypeId, Integer[] leakTypeIds, Integer status) {
		if (attachmentId != null && attachmentId != 0) {
			SysAttachment sysAttachment = sysAttachmentDao.get(attachmentId);
			tool.setSysAttachment(sysAttachment);
		}
		if (toolTypeId != null && toolTypeId != 0) {
			ToolType toolType = toolTypeDao.get(toolTypeId);
			tool.setToolType(toolType);
		}
		Set<LeakType> leakTypes = leakTypeDao.findByIds(leakTypeIds);
		tool.setLeakTypes(leakTypes);
		tool.setSubmitUser(SessionUtil.loginUser());
		tool.setCreateTime(DateUtil.currentTime());
		tool.setStatus(status);
		Integer id = (Integer) toolDao.save(tool);
		saveToolLog(id);//添加工具  日志
		return Result.SUCCESS;
	}

	/**
	 * 添加工具  日志
	 * @param id
	 */
	private void saveToolLog(Integer id) {
		Tool tool = toolDao.get(id);
		if(ToolStatus.已共享.value()==tool.getStatus()){
			String logContent = "添加工具    "+getPartLogContent(tool);
			saveLog(logContent);
		} 
	}
	
	/**
	 * 日志的一部分
	 * @param tool 
	 * @param leak
	 * @return
	 */
	private String getPartLogContent(Tool tool ) {
		StringBuffer partLogContent = new StringBuffer();
		partLogContent.append(" 工具id:");
		partLogContent.append(tool.getId());
		partLogContent.append("   工具名称:");
		partLogContent.append(tool.getToolName());
		return partLogContent.toString();
	}
	
	/**
	 * 用日志内容保存日志
	 * @param logContent
	 */
	private void saveLog(String logContent) {
		sysLogDao.createSysLog(SessionUtil.loginUserAccount()
				, logTarget
				, logContent);
	}


	public Result update(Tool tool, Integer attachmentId, Integer toolTypeId, Integer[] leakTypeIds, Integer status) {
		Tool updateTool = toolDao.get(tool.getId());
		//判断是否有修改权限
		if(!getCanUpdate(tool.getId())){
			return Result.error("没有修改权限");
		}
	
		
		if(updateTool == null ){
			return Result.error("该工具不存在");
		}
		updateTool.setCnnvdId(tool.getCnnvdId());
		updateTool.setCnvdId(tool.getCnvdId());
		updateTool.setCreateTime(DateUtil.currentTime());
		updateTool.setCveId(tool.getCveId());
		Set<LeakType> leakTypes = leakTypeDao.findByIds(leakTypeIds);
		updateTool.setLeakTypes(leakTypes);
		updateTool.setStatus(status);
		if (attachmentId != null && attachmentId != 0) {
			SysAttachment sysAttachment = sysAttachmentDao.get(attachmentId);
			updateTool.setSysAttachment(sysAttachment);
		}
		updateTool.setToolAuthor(tool.getToolAuthor());
		updateTool.setToolName(tool.getToolName());
		updateTool.setToolOutline(tool.getToolOutline());
		if (toolTypeId != null && toolTypeId != 0) {
			ToolType toolType = toolTypeDao.get(toolTypeId);
			updateTool.setToolType(toolType);
		}

		updateTool.setUsageMethod(tool.getUsageMethod());
		
		toolDao.update(updateTool);
		releaseToolLog(updateTool);//发布工具  日志
		return Result.SUCCESS;
	}
	
	/**
	 * 发布工具  日志
	 * @param updateTool
	 */
	private void releaseToolLog(Tool updateTool) {
		if(ToolStatus.已共享.value()==updateTool.getStatus()){
			String logContent = "发布工具    "+getPartLogContent(updateTool);
			saveLog(logContent);
		}
	}

	/**
	 * 删除工具
	 * 
	 * @param toolIds
	 * @return
	 */

	public Result deleteTool(String toolIds) {
		//判断是否有删除权限
		if(!deleteToolRight(toolIds)){
			return Result.error("没有删除权限");
		}
		
		if (toolIds != null) {
			String[] toolIdArr = toolIds.split(",");
			for (String toolId : toolIdArr) {
				toolDao.deleteById(Integer.valueOf(toolId));
			}
		}else{
			return Result.error("工具ID为空");
		}
		return Result.SUCCESS;
	}
	

	/**
	 * 判断是否有删除权限
	 * @param toolIds
	 * @return
	 */
	private boolean deleteToolRight(String toolIds) {
		if (toolIds != null) {
			String[] toolIdArr = toolIds.split(",");
			for (String toolId : toolIdArr) {
				//如果本人是提交人,且文件未发布,可以删除
				Tool tool = toolDao.get(Integer.valueOf(toolId));
				//是自己的工具   未共享工具
				if(isSubmitUser(tool)&&isBeforRlease(tool)){
					return true;
				}
				
				return false;
			}
		}
		return false;
	}

	/**
	 * 删除工具  日志
	 * @param task
	 */
	private void deleteToolLog(Tool tool) {
		String logContent = "删除工具    "+getPartLogContent(tool);
		saveLog(logContent);
	}

	/**
	 * 根据id查到工具信息
	 * @param toolId
	 * @return
	 */
	public Tool findById(Integer toolId) {
		Tool tool = toolDao.get(toolId);
		return tool;
	}
	
	/**
	 * 根据id查到工具信息
	 * @param toolId
	 * @return
	 */
	public ToolVo findVoById(Integer toolId) {
		Tool tool = toolDao.get(toolId);
		ToolVo toolVo = new ToolVo();
		toolVo.from(tool);
		return toolVo;
	}

	/**
	 * 查询用户组中工具统计结果
	 * 
	 * @return
	 */
	public List<ToolVo> findToolInUserGroupStatistic() {
		List<ToolVo> toolInUserGroupStatistic = toolDao.findToolInUserGroupStatistic();
		return toolInUserGroupStatistic;
	}

	/**
	 * 查询工具发布统计结果
	 * 
	 * @param toolId
	 * @return
	 */
	 public ToolVo findToolReleaseStatistic() {
		 ToolVo toolReleaseStatistic = new ToolVo();
		 // 已发布工具 数量
		 toolReleaseStatistic.setSumReleasedTool(toolDao.findSumReleasedTool());
		 // 未发布工具 数量
		 toolReleaseStatistic.setSumUnreleasedTool(toolDao.findSumUnreleasedTool());
		 return toolReleaseStatistic;
	 }

	/**
	 * 查询工具类型统计结果
	 * 
	 * @return
	 */
	public List<ToolVo> findToolTypeStatistics() {
		List<ToolVo> toolTypeStatistics = toolDao.findToolTypeStatistics();
		return toolTypeStatistics;
	}

	/**
	 * 工具 个人榜
	 * 
	 * @param pageParameBean
	 * @return
	 */
	public DataTablePage findPagePersonalToolRanks(PageParameBean pageParameBean) {
		pageParameBean.resetPageNo();
		DataTablePage pagePersonalToolRanks = toolDao.findPagePersonalToolRanks(pageParameBean);
		return pagePersonalToolRanks;
	}

	/**
	 * 工具 单位榜
	 * 
	 * @param pageParameBean
	 * @return
	 */
	public DataTablePage findPageDepartmentToolRanks(PageParameBean pageParameBean) {
		pageParameBean.resetPageNo();
		DataTablePage pageDepartmentToolRanks = toolDao.findPageDepartmentToolRanks(pageParameBean);
		return pageDepartmentToolRanks;
	}

	/**
	 * 个人工具信息
	 * 
	 * @param pageParameBean
	 * @param userId
	 * @param status
	 * @return
	 */
	public DataTablePage findPagePersonalTools(PageParameBean pageParameBean, Integer userId, Integer status) {
		pageParameBean.resetPageNo();
		DataTablePage pagePersonalTools = toolDao.findPagePersonalTools(pageParameBean, userId, status);
		return pagePersonalTools;
	}

	/**
	 * 发布工具
	 * 
	 * @param toolId
	 * @return
	 */
	public Result releaseTool(Integer toolId) {
		if(!getCanUpdate(toolId)){
			return Result.error("没有发布权限");
		}
		Tool tool = toolDao.get(toolId);
		tool.setStatus(ToolStatus.已共享.value());
		tool.setCreateTime(DateUtil.currentTime());
		toolDao.update(tool);
		releaseToolLog(tool);//发布工具 日志
		return Result.SUCCESS;
	}

	public List<ToolVo> findLatestReleaseTool(Integer pageSize,Integer userID) {
		return toolDao.findLatestReleaseTool(pageSize,userID);
	}

	/**
	 * 根据工具id删除工具
	 * @param toolId
	 * @return
	 */
	public Result deleteTool(Integer toolId) {
		//判断是否有删除权限
		if(!deleteToolRight(toolId)){
			return Result.error("没有删除权限");
		}
		Tool tool = toolDao.get(toolId);
		tool.setStatus(ToolStatus.已删除.value());
		toolDao.update(tool);
		deleteToolLog(tool);//删除工具  日志
		return Result.SUCCESS;
	}

	/**
	 * 判断是否有删除权限
	 * @param toolId
	 * @return
	 */
	private boolean deleteToolRight(Integer toolId) {
		Tool tool = toolDao.get(toolId);
		if(isSysUser()&&ToolStatus.已共享.value().equals(tool.getStatus())){
			return true;
		}
		return false;
	}
	

	/**
	 * 判断是否是管理员
	 * @return
	 */
	private boolean isSysUser() {
		boolean flag = false;
		Set<SysRole> sysRoles = SessionUtil.loginUser().getSysRoles();
		for (SysRole sysRole : sysRoles) {
			if(SysRoleType.系统管理员.value() == sysRole.getId()){
				flag = true;
				break;
			}
		}
		return flag;
	}

	/**
	 * 批量删除工具
	 * @param idListString
	 * @return
	 */
	public Result deleteTools(String idListString) {
		List<Integer> idList = parseStringToIntegerList(idListString);
		for (Integer id : idList) {
			// 根据id查到漏洞
			Tool tool = toolDao.get(id);
			tool.setStatus(ToolStatus.已删除.value());
			toolDao.save(tool);
			deleteToolLog(tool);//删除工具  日志
		}
		return Result.SUCCESS;

	}
	
	/**
	 * string转成数组
	 * 
	 * @param str
	 * @return
	 */
	public List<Integer> parseStringToIntegerList(String str) {
		str = str.replace("[", "");
		str = str.replace("]", "");
		String[] ss = str.split(",");
		List<Integer> integerList = new ArrayList<Integer>();
		for (int i = 0; i < ss.length; i++) {
			Integer integer = Integer.parseInt(ss[i]);

			integerList.add(integer);
		}
		return integerList;

	}

	
	/**
	 * 判断是否有修改权限
	 * @param toolId
	 * @return
	 */
	public boolean getCanUpdate(Integer toolId) {
		Tool tool = toolDao.get(toolId);
		
		//是自己的工具   未共享工具
		if(isSubmitUser(tool)&&isBeforRlease(tool)){
			return true;
		}
		
		return false;
	}
	
	/**
	 * 是自己的工具
	 * @param po
	 * @return
	 */
	private boolean isSubmitUser(Tool tool) {
		if(SessionUtil.loginUser().getId()==tool.getSubmitUser().getId()){
			return true;
		}
		return false;
	}
	
	/**
	 * 未共享工具
	 * @param tool
	 * @return
	 */
	private boolean isBeforRlease(Tool tool) {
		if(ToolStatus.未共享.value().equals(tool.getStatus())){
			return true;
		}
		return false;
	}

	
}
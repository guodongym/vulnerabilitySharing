package com.starsec.service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.starsec.constants.MessageType;
import com.starsec.constants.TaskStatus;
import com.starsec.dao.SysAttachmentDao;
import com.starsec.dao.SysLogDao;
import com.starsec.dao.SysMessageDao;
import com.starsec.dao.SysUserDao;
import com.starsec.dao.TaskDao;
import com.starsec.dao.TaskTypeDao;
import com.starsec.dao.TaskUserDao;
import com.starsec.model.DataTablePage;
import com.starsec.model.Result;
import com.starsec.po.SysAttachment;
import com.starsec.po.SysMessage;
import com.starsec.po.SysUser;
import com.starsec.po.Task;
import com.starsec.po.TaskType;
import com.starsec.po.TaskUser;
import com.starsec.util.DateUtil;
import com.starsec.util.SessionUtil;
import com.starsec.vo.PageParameBean;
import com.starsec.vo.TaskVo;

/**
 * 任务
 * 
 * @author cheng cheng
 *
 */
@Service
public class TaskService {
	// 任务
	@Autowired
	private TaskDao taskDao;
	// 任务类型
	@Autowired
	private TaskTypeDao taskTypeDao;

	@Autowired
	private SysUserDao sysUserDao;

	// 任务用户关联信息
	@Autowired
	private TaskUserDao taskUserDao;

	@Autowired
	private SysAttachmentDao sysAttachmentDao;

	@Autowired
	private SysMessageDao sysMessageDao;

	// 日志
	@Autowired
	private SysLogDao sysLogDao;
	// 日志模块
	private static final String logTarget = "任务";

	/**
	 * 任务类型统计
	 * 
	 * @return
	 */
	public List<TaskVo> getTaskTypeStatistic() {
		List<TaskVo> taskTypeStatistic = taskDao.getTaskTypeStatistic();
		return taskTypeStatistic;
	}
	/**
	 * 任务状态统计
	 * 
	 * @return
	 */
	public List<TaskVo> getTaskStatusStatistic() {
		List<TaskVo> taskStatusStatistic = taskDao.getTaskStatusStatistic();
		return taskStatusStatistic;
	}

	/**
	 * 任务 个人榜
	 * 
	 * @param pageParameBean
	 * @return
	 */
	public DataTablePage findPagePersonalTaskRanks(PageParameBean pageParameBean) {
		pageParameBean.resetPageNo();
		DataTablePage pagePersonalTaskRanks = taskDao.findPagePersonalTaskRanks(pageParameBean);
		return pagePersonalTaskRanks;
	}
	/**
	 * 任务 单位榜
	 * 
	 * @param pageParameBean
	 * @return
	 */
	public DataTablePage findPageDepartmentTaskRanks(PageParameBean pageParameBean) {
		pageParameBean.resetPageNo();
		DataTablePage pageDepartmentTaskRanks = taskDao.findPageDepartmentTaskRanks(pageParameBean);
		return pageDepartmentTaskRanks;
	}

	/**
	 * 任务 日志的一部分
	 * 
	 * @param leak
	 * @return
	 */
	private String getPartLogContent(Task task) {
		StringBuffer partLogContent = new StringBuffer();
		partLogContent.append(" 任务id:");
		partLogContent.append(task.getId());
		partLogContent.append("   任务名称:");
		partLogContent.append(task.getTaskName());
		return partLogContent.toString();
	}

	/**
	 * 用日志内容保存日志
	 * 
	 * @param logContent
	 */
	private void saveLog(String logContent) {
		sysLogDao.createSysLog(SessionUtil.loginUserAccount(), logTarget, logContent);
	}

	/**
	 * 添加任务 日志
	 * 
	 * @param task
	 * @param status
	 */
	private void saveTaskLog(Task task, Integer status) {
		if (TaskStatus.已发布.value() == status) {
			String logContent = "添加任务信息    " + getPartLogContent(task);
			saveLog(logContent);
		}
	}
	public Result save(Task task, Integer taskTypeId, Integer status) {
		if (taskTypeId != null && taskTypeId != 0) {
			TaskType taskType = taskTypeDao.get(taskTypeId);
			task.setTaskType(taskType);
		}
		task.setStatus(status);
		task.setReleaseUser(SessionUtil.loginUser());
		task.setReleaseTime(DateUtil.currentTime());
		taskDao.save(task);

		saveTaskLog(task, status);// 添加任务 日志
		return Result.SUCCESS;
	}

	public DataTablePage findPage(DataTablePage page, String likeKeyWord, Integer taskTypeId, Integer status, String createStarTime, String createEndTime) {
		page.resetPageNo();
		return taskDao.findPage(page, likeKeyWord, taskTypeId, status, createStarTime, createEndTime);
	}

	public List<TaskVo> findLatestReleaseTask(Integer pageSize, Integer userID) {
		return taskDao.findLatestReleaseTask(pageSize, userID);
	}

	public List<TaskVo> findLatestFinishTask(Integer pageSize) {
		return taskDao.findLatestFinishTask(pageSize);
	}

	public DataTablePage findReceivingPage(DataTablePage page) {
		page.resetPageNo();
		return taskDao.findReceivingPage(page);
	}

	public DataTablePage findMyTaskPage(DataTablePage page, Integer status) {
		page.resetPageNo();
		return taskDao.findMyTaskPage(page, status);
	}

	public Result receive(Integer taskId) {
		TaskUser taskUser = new TaskUser();
		taskUser.setTask(taskDao.get(taskId));
		taskUser.setSysUser(SessionUtil.loginUser());

		if (taskUserDao.findByTaskId(taskId) == null || taskUserDao.findByTaskId(taskId).size() == 0) {
			taskUser.setLeader(true);
		}

		taskUserDao.save(taskUser);
		receiveLog(taskDao.get(taskId)); // 接受任务 日志
		return Result.SUCCESS;
	}

	/**
	 * 接受任务 日志
	 * 
	 * @param task
	 */
	private void receiveLog(Task task) {
		String logContent = "接受任务    " + getPartLogContent(task);
		saveLog(logContent);
	}

	public Result submitResult(Integer taskId, Integer attachmentId) {
		//判断是否可提交
		if(!submitResultRight(taskId)){
			return Result.error("没有提交任务的权限");
		}
		if (taskId == null || taskId == 0) {
			return Result.error("任务ID为空");
		}
		Task task = taskDao.get(taskId);

		if (attachmentId != null && attachmentId != 0) {
			SysAttachment sysAttachment = sysAttachmentDao.get(attachmentId);
			task.setSysAttachment(sysAttachment);
		}

		SysMessage sysMessage = new SysMessage();
		sysMessage.setSysUser(task.getReleaseUser());
		sysMessage.setTask(task);
		sysMessage.setMessageType(MessageType.任务操作.value());
		sysMessage.setMessage("队长提交了任务成果");
		sysMessage.setMessageTime(DateUtil.currentTime());
		sysMessageDao.save(sysMessage);

		taskDao.update(task);
		submitResultLog(task);// 提交成果 日志
		return Result.SUCCESS;
	}

	/**
	 * 判断是否有提交权限
	 * @param taskId
	 * @return
	 */
	private boolean submitResultRight(Integer taskId) {
		Task task = taskDao.get(taskId);
		//本人是队长,且是未完成
		if(isLeader(task)
				&&TaskStatus.已发布.value().equals(task.getStatus())){
			return true;
		}
		return false;
	}
	/**
	 * 判断本人是队长
	 * @param task
	 * @return
	 */
	private boolean isLeader(Task task) {
		for (TaskUser taskUser : task.getTaskUsers()) {
			//当前用户接受了任务    且任务人是队长
			if(taskUser.getSysUser().getId()==getLoginUserId()
					&&taskUser.isLeader()
					){
				return true;
			}
		}
		return false;
	}
	
	/**
	 * 获得登陆用户的id
	 * @return
	 */
	public Integer getLoginUserId() {
		return SessionUtil.loginUser().getId();
	}
	/**
	 * 提交成果 日志
	 * 
	 * @param task
	 * @param sysMessage
	 */
	private void submitResultLog(Task task) {
		String logContent = "提交成果    " + getPartLogContent(task);
		saveLog(logContent);
	}
	public Result changeLeader(Integer leaderTaskId, Integer leaderUserId) {
		//判断是否有转移队长的权限
		if(!changeLeaderRight(leaderTaskId)){
			return Result.error("没有转移队长权限");
		}
		List<TaskUser> taskUsers = taskUserDao.findByTaskId(leaderTaskId);
		SysMessage sysMessage = new SysMessage();
		for (TaskUser taskUser : taskUsers) {
			if (taskUser.isLeader()) {
				taskUser.setTransfer(true);
				taskUserDao.update(taskUser);
			}
			if (taskUser.getSysUser().getId() == leaderUserId) {
				taskUser.setTransfer(true);
				taskUserDao.update(taskUser);
				sysMessage.setSysUser(taskUser.getSysUser());
				sysMessage.setTask(taskUser.getTask());
				sysMessage.setMessageType(MessageType.队长转移.value());
				sysMessage.setMessage("队长转移");
				sysMessage.setMessageTime(DateUtil.currentTime());
				sysMessageDao.save(sysMessage);
				changeLeaderLog(taskUser.getTask());// 转移队长 日志
			}
		}

		return Result.SUCCESS;
	}

	/**
	 * 判断是否有转移队长的权限
	 * @param leaderTaskId
	 * @return
	 */
	private boolean changeLeaderRight(Integer taskId) {
		Task task = taskDao.get(taskId);
		//本人是队长,且是未完成,,且没有在转移
		if(isLeader(task)
				&&TaskStatus.已发布.value().equals(task.getStatus())
				&&!isChanging(task)
				){
			return true;
		}
		return false;
	}
	/**
	 * 任务是否正在转移
	 * @param task
	 * @return
	 */
	private boolean isChanging(Task task) {
		for (TaskUser taskUser : task.getTaskUsers()) {
			//是队长   且正在转移
			if(taskUser.isLeader()
				&&taskUser.isTransfer()){
				return true;
			}
		}
		return false;
	}
	/**
	 * 转移队长 日志
	 * 
	 * @param task
	 */
	private void changeLeaderLog(Task task) {
		String logContent = "转移队长    " + getPartLogContent(task);
		saveLog(logContent);
	}
	public Result release(Integer taskId) {
		Task task = taskDao.get(taskId);

		task.setStatus(TaskStatus.已发布.value());
		task.setReleaseTime(DateUtil.currentTime());

		taskDao.update(task);
		releaseLog(task);// 发布任务 日志
		return Result.SUCCESS;
	}

	/**
	 * 发布任务 日志
	 * 
	 * @param task
	 */
	private void releaseLog(Task task) {
		String logContent = "发布任务    " + getPartLogContent(task);
		saveLog(logContent);
	}
	public Result delete(Integer taskId) {
		String taskName = taskDao.get(taskId).getTaskName();
		boolean flag = taskDao.deleteById(taskId);
		if (!flag) {
			return Result.error("删除失败");
		}
		deleteLog(taskId, taskName);// 删除任务 日志
		return Result.SUCCESS;
	}

	/**
	 * 删除任务 日志
	 * 
	 * @param taskName
	 * @param taskId
	 */
	private void deleteLog(Integer taskId, String taskName) {
		String logContent = "删除任务    " + " 任务id:" + taskId + "   任务名称:" + taskName;
		saveLog(logContent);
	}
	public Result complete(Integer taskId) {
		Task task = taskDao.get(taskId);
		if (task == null) {
			return Result.error("确认完成失败");
		}
		task.setStatus(TaskStatus.已完成.value());
		task.setTaskFinishTime(DateUtil.currentTime());

		SysMessage sysMessage = new SysMessage();
		Set<TaskUser> taskUsers = task.getTaskUsers();
		for (TaskUser taskUser : taskUsers) {
			if (taskUser.isLeader()) {
				sysMessage.setSysUser(taskUser.getSysUser());
				sysMessage.setTask(task);
				sysMessage.setMessageType(MessageType.任务操作.value());
				sysMessage.setMessage(task.getReleaseUser().getUserAccount() + "确认了任务");
				sysMessage.setMessageTime(DateUtil.currentTime());
				sysMessageDao.save(sysMessage);
			}
		}

		taskDao.update(task);
		completeLog(task);// 确认完成任务 日志
		return Result.SUCCESS;
	}

	/**
	 * 确认完成任务 日志
	 * 
	 * @param task
	 */
	private void completeLog(Task task) {
		String logContent = "确认完成任务    " + getPartLogContent(task);
		saveLog(logContent);
	}

	public Result cancel(Integer taskId) {
		Task task = taskDao.get(taskId);
		if (task == null) {
			return Result.error("取消任务失败");
		}
		task.setStatus(TaskStatus.已取消.value());
		taskDao.update(task);
		cancelLog(task);// 取消任务 日志
		return Result.SUCCESS;
	}

	/**
	 * 取消任务 日志
	 * 
	 * @param task
	 */
	private void cancelLog(Task task) {
		String logContent = "取消任务    " + getPartLogContent(task);
		saveLog(logContent);
	}

	public TaskVo findVoById(Integer taskId) {
		Task task = taskDao.get(taskId);
		TaskVo taskVo = new TaskVo();
		taskVo.from(task);
		return taskVo;
	}
	public Result update(Task task, Integer taskTypeId, Integer status) {
		Task updateTask = taskDao.get(task.getId());

		if (taskTypeId != null && taskTypeId != 0) {
			TaskType taskType = taskTypeDao.get(taskTypeId);
			updateTask.setTaskType(taskType);
		}
		updateTask.setReleaseTime(DateUtil.currentTime());
		updateTask.setStatus(status);
		updateTask.setTaskEndTime(task.getTaskEndTime());
		updateTask.setTaskName(task.getTaskName());
		updateTask.setTaskNum(task.getTaskNum());
		updateTask.setTaskOutline(task.getTaskOutline());
		updateTask.setTaskRequirement(task.getTaskRequirement());
		updateTask.setTaskScore(task.getTaskScore());

		taskDao.update(updateTask);
		updateLog(updateTask, status);// 发布任务信息 日志
		return Result.SUCCESS;
	}

	/**
	 * 修改任务信息 日志
	 * 
	 * @param updateTask
	 * @param status
	 */
	private void updateLog(Task updateTask, Integer status) {
		// 发布任务信息 日志
		if (TaskStatus.已发布.value() == status) {
			String logContent = "发布任务信息    " + getPartLogContent(updateTask);
			saveLog(logContent);
		}

	}

	public Result receiveLeader(Integer taskId) {
		//判断是否有拒绝权限
		if(!receiveLeaderRight(taskId)){
			return Result.error("没有拒绝权限");
		}
		Task task = taskDao.get(taskId);
		Set<TaskUser> taskUsers = task.getTaskUsers();
		SysMessage sysMessage = new SysMessage();
		for (TaskUser taskUser : taskUsers) {
			if (taskUser.isLeader() && taskUser.isTransfer()) {
				taskUser.setLeader(false);
				taskUser.setTransfer(false);

				sysMessage.setSysUser(taskUser.getSysUser());
				sysMessage.setTask(taskUser.getTask());
				sysMessage.setMessageType(MessageType.任务操作.value());
				sysMessage.setMessageTime(DateUtil.currentTime());
			}
			if (!taskUser.isLeader() && taskUser.isTransfer() && taskUser.getSysUser().getId() == SessionUtil.loginUser().getId()) {
				taskUser.setLeader(true);
				taskUser.setTransfer(false);
				sysMessage.setMessage(taskUser.getSysUser().getUserAccount() + "接受了队长");
			}
		}

		taskDao.update(task);
		sysMessageDao.save(sysMessage);
		receiveLeaderLog(task);// 接受队长 日志
		return Result.SUCCESS;
	}

	/**
	 * 判断有没有接受权限
	 * @param taskId
	 * @return
	 */
	private boolean receiveLeaderRight(Integer taskId) {
		Task task = taskDao.get(taskId);
		//本人不是队长,且是未完成,,且正在转移
		if(!isLeader(task)
				&&TaskStatus.已发布.value().equals(task.getStatus())
				&&isChanging(task)
				){
			return true;
		}
		return false;
	}
	/**
	 * 接受队长 日志
	 * 
	 * @param task
	 */
	private void receiveLeaderLog(Task task) {
		String logContent = "接受队长     " + getPartLogContent(task);
		saveLog(logContent);
	}

	public Result refuseLeader(Integer taskId) {
		//判断是否有拒绝权限
		if(!refuseLeaderRight(taskId)){
			return Result.error("没有拒绝权限");
		}
		Task task = taskDao.get(taskId);
		Set<TaskUser> taskUsers = task.getTaskUsers();
		SysMessage sysMessage = new SysMessage();
		for (TaskUser taskUser : taskUsers) {
			if (taskUser.isLeader() && taskUser.isTransfer()) {
				taskUser.setTransfer(false);
				sysMessage.setSysUser(taskUser.getSysUser());
				sysMessage.setTask(taskUser.getTask());
				sysMessage.setMessageType(MessageType.任务操作.value());
				sysMessage.setMessageTime(DateUtil.currentTime());
			}
			if (!taskUser.isLeader() && taskUser.isTransfer() && taskUser.getSysUser().getId() == SessionUtil.loginUser().getId()) {
				taskUser.setTransfer(false);
				sysMessage.setMessage(taskUser.getSysUser().getUserAccount() + "拒绝了接受队长");
			}
		}

		taskDao.update(task);
		sysMessageDao.save(sysMessage);
		refuseLeaderLog(task);// 拒绝接受队长 日志
		return Result.SUCCESS;
	}
	/**
	 * 判断是否有拒绝权限
	 * @param taskId
	 * @return
	 */
	private boolean refuseLeaderRight(Integer taskId) {
		Task task = taskDao.get(taskId);
		//本人不是队长,且是未完成,,且正在转移
		if(!isLeader(task)
				&&TaskStatus.已发布.value().equals(task.getStatus())
				&&isChanging(task)
				){
			return true;
		}
		return false;
	}
	/**
	 * 拒绝接受队长 日志
	 * 
	 * @param task
	 */
	private void refuseLeaderLog(Task task) {
		String logContent = "拒绝接受队长    " + getPartLogContent(task);
		saveLog(logContent);
	}
	
	public Map<String, List<TaskVo>> findTaskTimeLine() {
		List<TaskVo> findTaskTimeLine = taskDao.findTaskTimeLine();

		Map<String, List<TaskVo>> map = new HashMap<String, List<TaskVo>>();
		for (TaskVo taskVo : findTaskTimeLine) {
			Integer year = taskVo.getYear();
			List<TaskVo> list = map.get(String.valueOf(year));
			if (list == null) {
				list = new ArrayList<TaskVo>();
				map.put(String.valueOf(year), list);
			}
			list.add(taskVo);
		}
		return map;
	}
	
	public Result mark(Integer taskId, Integer taskScore, Integer[] userIds, Integer[] scores) {
		int total = 0;
		for (Integer score : scores) {
			total += score;
		}
		if (total > taskScore) {
			return Result.error("分配积分多于设定积分！");
		}
		for (int i = 0; i < userIds.length; i++) {
			SysUser sysUser = sysUserDao.get(userIds[i]);
			sysUser.setTaskScore(sysUser.getTaskScore() + scores[i]);
			sysUserDao.update(sysUser);
		}
		Task task = taskDao.get(taskId);
		task.setStatus(TaskStatus.已打分.value());
		
		return Result.SUCCESS;
	}

}
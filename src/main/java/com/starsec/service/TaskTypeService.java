package com.starsec.service;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.starsec.dao.SysLogDao;
import com.starsec.dao.TaskDao;
import com.starsec.dao.TaskTypeDao;
import com.starsec.model.DataTablePage;
import com.starsec.model.Result;
import com.starsec.po.TaskType;
import com.starsec.util.SessionUtil;

/**
 *任务类型 
 * @author cheng cheng
 *
 */
@Service
public class TaskTypeService{
	
	//任务类型
	@Autowired
	private TaskTypeDao taskTypeDao;
	
	//任务
	@Autowired
	private TaskDao taskDao;
	
	//日志
	@Autowired
	private SysLogDao sysLogDao;
	//日志模块
	private static final String logTarget = "任务类型";
	
	
	/**
	 * 分页查询 任务类型
	 * @param pageParameBean
	 * @return
	 */
	public  DataTablePage findPageTaskTypes(DataTablePage page) {
		//设置页面编号
		page.resetPageNo();
		return taskTypeDao.findPageTasks(page);
	}
	
	/**
	 * 添加修改任务类型
	 * @param taskType
	 * @return
	 */
	public Result saveOrUpdateTaskType(TaskType taskType) {
		if(null== taskType.getId()){
			//保存任务类型
			return saveTaskType(taskType);
		}else{
			//更新任务类型
			return updateTaskType(taskType);
		}
	}

	/**
	 * 更新任务类型
	 * @param taskType
	 * @return
	 */
	private Result updateTaskType(TaskType taskType) {
		//如果 不是原来的任务类型   有相同任务类型   
		if(!isQuondamName(taskType)&&isHaveSameTaskType(taskType)){
			return Result.error("有任务类型名称");
		}
		//获得要更新的任务类型
		TaskType taskTypeForUpdate = getTaskTypeForUpdate(taskType);
		taskTypeDao.update(taskTypeForUpdate);
		updateTaskTypeLog(taskTypeForUpdate);//更新任务类型  日志
		return Result.SUCCESS;
	}
	/**
	 * 更新任务类型  日志
	 * @param taskTypeForUpdate
	 */
	private void updateTaskTypeLog(TaskType taskTypeForUpdate) {
		String logContent = "修改任务类型    "+getPartLogContent(taskTypeForUpdate);
		saveLog(logContent);
	}

	/**
	 * 获得要更新的任务类型
	 * @param taskType
	 * @return
	 */
	private TaskType getTaskTypeForUpdate(TaskType taskType) {
		TaskType taskTypeForUpdate  = taskTypeDao.findTaskTypeById(taskType.getId());
		taskTypeForUpdate.setTaskName(taskType.getTaskName());
		taskTypeForUpdate.setParentId(taskType.getParentId());
		return taskTypeForUpdate;
	}

	private boolean isQuondamName(TaskType taskType) {
		//用id查询漏洞类型
		TaskType taskTypeFinded = taskTypeDao.get(taskType.getId());
		if(taskTypeFinded.getTaskName().
				equals(taskType.getTaskName())){
			return true;
		}
		return false;
	}
	

	
	/**
	 *任务类型 日志 的一部分
	 * @param taskType 
	 * @param leak
	 * @return
	 */
	private String getPartLogContent(TaskType taskType ) {
		StringBuffer partLogContent = new StringBuffer();
		partLogContent.append(" 任务类型id:");
		partLogContent.append(taskType.getId());
		partLogContent.append("   任务类型名称:");
		partLogContent.append(taskType.getTaskName());
		return partLogContent.toString();
	}
	
	/**
	 * 用日志内容保存日志
	 * @param logContent
	 */
	private void saveLog(String logContent) {
		sysLogDao.createSysLog(SessionUtil.loginUserAccount()
				, logTarget
				, logContent);
	}

	/**
	 * 添加任务类型 日志
	 * @param id
	 */
	private void saveTaskTypeLog(Integer id) {
		TaskType taskType = taskTypeDao.get(id);
		String logContent = "添加任务类型    "+getPartLogContent(taskType);
		saveLog(logContent);
		
	}
	/**
	 * 保存任务类型
	 * @param taskType 
	 * @return
	 */
	private Result saveTaskType(TaskType taskType) {
		//如果有相同任务类型
		if(isHaveSameTaskType(taskType)){
			return Result.error("有相同任务类型");
		}
		Integer id = (Integer) taskTypeDao.save(taskType);
		saveTaskTypeLog(id);//添加任务类型  日志
		return Result.SUCCESS;
	}

	/**
	 * 判断是否有相同任务类型
	 * @param taskType
	 * @return
	 */
	private boolean isHaveSameTaskType(TaskType taskType) {
		Long countTaskType = taskTypeDao.findCountByName(taskType.getTaskName());
		if(countTaskType>0){
			return true;
		}
		return false;
	}

	
	/**
	 * 删除任务类型
	 * @param id
	 * @return
	 */
	public Result deleteTaskType(Integer id) {
		//检查 是否有子任务类型
		Boolean isHaveChildTaskType = checkChildTaskType(id);
		if(isHaveChildTaskType){
			return Result.error("请先删除子任务类型");
		}
		//检查是否有任务 
		Boolean isHaveTaskInTaskType =  checkTaskInTaskType(id);
		if(isHaveTaskInTaskType){
			return Result.error("请先删除所属任务");
		}
		TaskType taskType  = taskTypeDao.findTaskTypeById(id);
		String taskTypeName = taskType.getTaskName();
		//开始删除漏洞
		boolean isSuccess =  taskTypeDao.deleteTaskType(taskType);
		if(!isSuccess){
			return Result.error("删除不成功");
		}
		deleteTaskTypeLog(id, taskTypeName);
		return Result.SUCCESS;
	}
	
	private void deleteTaskTypeLog(Integer id, String taskTypeName) {
		String logContent = "删除任务类型    "
				+"  任务类型 id:"
				+id
				+"  任务类型名:"
				+taskTypeName
				;
		saveLog(logContent);
	}

	/**
	 * 检查是否有任务 
	 * @param id
	 * @return
	 */
	private Boolean checkTaskInTaskType(Integer id) {
		Boolean isHaveTaskInTaskType = false;
		TaskType taskType = taskTypeDao.findTaskTypeById(id);
		Long count = taskDao.findCountTaskInTaskType(taskType);
		if(count>0){
			isHaveTaskInTaskType = true;
		}else{
			isHaveTaskInTaskType = false;
		}
		return isHaveTaskInTaskType;
	}

	/**
	 * 检查 是否有子任务类型
	 * @param id
	 * @return
	 */
	private Boolean checkChildTaskType(Integer id) {
		Boolean isHaveChildTaskType = false;
		Long count = taskTypeDao.findCountChild(id);
		if(count>0){
			isHaveChildTaskType = true;
		}else{
			isHaveChildTaskType = false;
		}
		return isHaveChildTaskType;
	}

	/**
	 * 批量删除任务类型
	 * @param idListString
	 * @return
	 */
	public  Result deleteTaskTypeList(String idListString) {
		List<TaskType> taskTypeList = new ArrayList<TaskType>();
		  
		List<Integer> idList = parseStringToIntegerList(idListString);
		for (Integer id : idList) {
			//检查 是否有子任务类型
			Boolean isHaveChildTaskType = checkChildTaskType(id);
			if(isHaveChildTaskType){
				return Result.error("请先删除子任务类型");
			}
			//检查是否有任务 
			Boolean isHaveTaskInTaskType =  checkTaskInTaskType(id);
			if(isHaveTaskInTaskType){
				return Result.error("请先删除所属任务");
			}
			
			//根据id查到任务类型
			TaskType taskTypeForDelete = taskTypeDao.findTaskTypeById(id);
			//添加到list
			taskTypeList.add(taskTypeForDelete);
		}
		//开始批量删除任务类型
		for (TaskType taskType : taskTypeList) {
			Integer id = taskType.getId();
			String taskTypeName = taskType.getTaskName();
			taskTypeDao.delete(taskType);
			deleteTaskTypeLog( id,  taskTypeName);//删除任务类型 日志
		}
		return Result.SUCCESS;
	}



	/**
	 * string转成数组
	 * @param str
	 * @return
	 */
	public List<Integer> parseStringToIntegerList(String str){
		str=str.replace("[",""); 
		str=str.replace("]",""); 
		String[] ss=str.split(",");
		List<Integer> integerList = new ArrayList<Integer>();
		for (int i = 0; i < ss.length; i++) {
			Integer integer = Integer.parseInt(ss[i]);
			
			integerList.add(integer);
		}
		return integerList;
		
	}

	public List<TaskType> findAll() {
		return taskTypeDao.findAll();
	}

	

	
		








	
	
	
	
}
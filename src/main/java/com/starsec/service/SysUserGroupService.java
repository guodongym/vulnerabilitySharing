package com.starsec.service;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.starsec.dao.SysLogDao;
import com.starsec.dao.SysUserDao;
import com.starsec.dao.SysUserGroupDao;
import com.starsec.model.DataTablePage;
import com.starsec.model.Result;
import com.starsec.po.SysUserGroup;
import com.starsec.util.SessionUtil;
import com.starsec.vo.PageParameBean;

/**
 * 用户组
 * @author cheng cheng
 *
 */
@Service
public class SysUserGroupService{
	//用户组
	@Autowired
	private SysUserGroupDao sysUserGroupDao;
	
	//用户信息dao
	@Autowired
	private SysUserDao sysUserDao;
	
	//日志
	@Autowired
	private SysLogDao sysLogDao;
	//日志模块
	private static final String logTarget = "用户组";

	/**
	 * 添加或修改用户组
	 * @param sysUserGroup
	 * @return
	 */

	public Result saveOrUpdateSysUserGroup(SysUserGroup sysUserGroup) {
		if(null==sysUserGroup.getId()){
			//添加用户组
			return saveSysUserGroup( sysUserGroup); 
		}else{
			//修改用户组
			return updateSysUserGroup( sysUserGroup); 
		}
	}
	/**
	 * 修改用户组
	 * @param sysUserGroup
	 * @return
	 */
	private Result updateSysUserGroup(SysUserGroup sysUserGroup) {
		if(isChangUserGroupName(sysUserGroup)&&
				isHasSameUserGroupName(sysUserGroup)){
			return Result.error("有相同的用户组名");
		}
		SysUserGroup sysUserGroupForUpdate = getSysUserGroupForUpdate(sysUserGroup);
		sysUserGroupDao.save(sysUserGroupForUpdate);
		updateSysUserGroupLog(sysUserGroupForUpdate);//修改用户组 日志
		return Result.SUCCESS;
	}
	
	/**
	 * 修改用户组 日志
	 * @param sysUserGroupForUpdate
	 */
	private void updateSysUserGroupLog(SysUserGroup sysUserGroupForUpdate) {
		String logContent = "修改用户组  "+getPartLogContent(sysUserGroupForUpdate);
		saveLog(logContent);
	}
	
	/**
	 * 获得用于更新的用户组
	 * @param sysUserGroup 
	 * @return
	 */
	private SysUserGroup getSysUserGroupForUpdate(SysUserGroup sysUserGroup) {
		SysUserGroup sysUserGroupForUpdate = sysUserGroupDao.get(sysUserGroup.getId());
		sysUserGroupForUpdate.setUserGroupName(sysUserGroup.getUserGroupName());
		return sysUserGroupForUpdate;
	}
	/**
	 * 添加用户组
	 * @param sysUserGroup
	 * @return
	 */
	private Result saveSysUserGroup(SysUserGroup sysUserGroup) {
		//判断是否有相同用户组名
		if(isHasSameUserGroupName(sysUserGroup)){
			return Result.error("有相同的用户组名");
		}
		Integer id = (Integer) sysUserGroupDao.save(sysUserGroup);
		saveSysUserGroupLog(id);//添加用户组 日志
		return Result.SUCCESS;
	}

		

	


	

	/**
	 * 添加用户组 日志
	 * @param id
	 */
	private void saveSysUserGroupLog(Integer id) {
		SysUserGroup sysUserGroup = sysUserGroupDao.get(id);
		String logContent = "添加用户组  "+getPartLogContent(sysUserGroup);
		saveLog(logContent);
	}
	/**
	 * 判断用户组名是否更改
	 * @param sysUserGroup
	 * @return
	 */
	private Boolean isChangUserGroupName(SysUserGroup sysUserGroup) {
		SysUserGroup sysDepartmentForUpdate = getSysDepartmentForUpdate(sysUserGroup);
		//判断用户组名是否更改
		if(sysUserGroup.getUserGroupName().equals(
				sysDepartmentForUpdate.getUserGroupName())){
			return false;
		}else{
			return true;
		}
		
	}


	/*
	 * 
	 * 判断是否有相同用户组名
	 */
	private Boolean isHasSameUserGroupName(SysUserGroup sysUserGroup) {
		Long  countUserGroup= 
				sysUserGroupDao.findCountSysUserGroup(sysUserGroup.getUserGroupName());
		if(countUserGroup>0){
			return true;
		}
		return false;
		
	}


	/**
	 * 得到用于更新的用户组
	 * @param sysUserGroup
	 * @return
	 */
	private SysUserGroup getSysDepartmentForUpdate(SysUserGroup sysUserGroup) {
		//查出要更新的对象 
		SysUserGroup sysUserGroupForUpdate
			= sysUserGroupDao.getSysUserGroupById(sysUserGroup.getId());
//		sysUserGroupForUpdate.setUserGroupName(sysUserGroup.getUserGroupName());
		return sysUserGroupForUpdate;
	}



	/**
	 * string转成数组
	 * @param str
	 * @return
	 */
	public List<Integer> parseStringToIntegerList(String str){
		str=str.replace("[",""); 
		str=str.replace("]",""); 
		String[] ss=str.split(",");
		List<Integer> integerList = new ArrayList<Integer>();
		for (int i = 0; i < ss.length; i++) {
			Integer integer = Integer.parseInt(ss[i]);
			
			integerList.add(integer);
		}
		return integerList;
		
	}


	/**
	 * 删除用户组
	 * @param sysUserGroup
	 * @return
	 */
	public Result deleteSysUserGroup(SysUserGroup sysUserGroup) {
		
		//检查分组下是否有员工
		Boolean isHaveSysUser = checkUserInGroup(sysUserGroup.getId());
		//分组下有员工返回删除不成功 
		if(isHaveSysUser){
			return Result.error("请先删除用户组下所有员工");
		}
		//根据id查到分组
		sysUserGroup = sysUserGroupDao.getSysUserGroupById(sysUserGroup.getId());
//		(Integer id, String name)
		Integer id =  sysUserGroup.getId();
		String name = sysUserGroup.getUserGroupName();
		//开始删除分组
		sysUserGroupDao.delete(sysUserGroup);

		deleteSysUserGroupLog( id,  name);//删除用户组  日志
		return Result.SUCCESS;
	}

	/**
	 * 删除用户组  日志
	 * @param name 
	 * @param id 
	 */
	private void deleteSysUserGroupLog(Integer id, String name) {
		StringBuffer logContent = new StringBuffer();
		logContent.append(" 删除用户组  ");
		logContent.append(" id:");
		logContent.append(id);
		logContent.append("   用户组名称:");
		logContent.append(name);
		sysLogDao.createSysLog(SessionUtil.loginUserAccount()
				, logTarget
				, logContent.toString());
	}

	/**
	 * 检查分组下是否有员工
	 * @param id
	 * @return
	 */
	private Boolean checkUserInGroup(Integer groupId) {
		//查出分组信息
		SysUserGroup sysUserGroup = sysUserGroupDao.getSysUserGroupById(groupId);
		Boolean isHaveSysUser = false;
		Long count = sysUserDao.findCountUserInGroup(sysUserGroup);
		if(count>0){
			isHaveSysUser = true;
		}else{
			isHaveSysUser = false;
		}
		return isHaveSysUser;
	}

	/**
	 * 批量删除用户组
	 * @param idListString
	 * @return
	 */
	public Result deleteSysUserGroupList(String idListString) {
		List<SysUserGroup> sysUserGroupList = new ArrayList<SysUserGroup>();
		  
		List<Integer> idList = parseStringToIntegerList(idListString);
		for (Integer id : idList) {
			
			//检查分组下是否有员工
			Boolean isHaveSysUser = checkUserInGroup(id);
			//分组下有员工返回删除不成功 
			if(isHaveSysUser){
				return Result.error("请先删除用户组下所有员工");
			}
			//查出分组信息
			SysUserGroup sysUserGroup = sysUserGroupDao.getSysUserGroupById(id);
			//添加到list
			sysUserGroupList.add(sysUserGroup);
			
			Integer userGroupId =  sysUserGroup.getId();
			String name = sysUserGroup.getUserGroupName();
			deleteSysUserGroupLog( userGroupId,  name);//删除用户组  日志
		}
		//开始批量删除分组 
		boolean  isSuccess=  sysUserGroupDao.deleteSysDepartmentList(sysUserGroupList);
		if(!isSuccess){
			return Result.error("删除失败");
		}
		return Result.SUCCESS;
		
	}

	/**
	 * 分页查询分组
	 * @param pageParameBean
	 * @return
	 */
	public DataTablePage findPageSysUserGroups(PageParameBean pageParameBean) {
		//设置页面编号
		pageParameBean.resetPageNo();
		return sysUserGroupDao.findPageSysUserGroups(pageParameBean);
	}


	/**
	 * 查询所有的用户组信息
	 * @return
	 */
	public List<SysUserGroup> findSysUserGroups() {
		List<SysUserGroup> sysUserGroups = sysUserGroupDao.findSysUserGroups();
		return sysUserGroups;
		
	}
	
	
	/**
	 *  用户组日志的一部分
	 * @param leak
	 * @return
	 */
	private String getPartLogContent( SysUserGroup sysUserGroup) {
		StringBuffer partLogContent = new StringBuffer();
		partLogContent.append(" id:");
		partLogContent.append(sysUserGroup.getId());
		partLogContent.append("   用户组名:");
		partLogContent.append(sysUserGroup.getUserGroupName());
		return partLogContent.toString();
	}
	
	/**
	 * 用日志内容保存日志
	 * @param logContent
	 */
	private void saveLog(String logContent) {
		sysLogDao.createSysLog(SessionUtil.loginUserAccount()
				, logTarget
				, logContent);
	}
	



	
}
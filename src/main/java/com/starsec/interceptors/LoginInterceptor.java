package com.starsec.interceptors;

import java.io.PrintWriter;
import java.util.Collections;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang.StringUtils;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.method.HandlerMethod;
import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;
import org.springframework.web.util.UrlPathHelper;

import com.starsec.annotation.IgnorePermission;
import com.starsec.constants.Constants;
import com.starsec.po.SysUser;

public class LoginInterceptor extends HandlerInterceptorAdapter {

	private List<String> excludeUrls;

	@SuppressWarnings("unchecked")
	@Override
	public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
		UrlPathHelper helper = new UrlPathHelper();
		String relativePath = helper.getOriginatingRequestUri(request);
		String contextPath = helper.getOriginatingContextPath(request);

		if (!StringUtils.isEmpty(contextPath) && !"/".equals(contextPath)) {
			relativePath = relativePath.substring(contextPath.length());
		}

		int index = relativePath.lastIndexOf('.');
		if (index != -1) {
			relativePath = relativePath.substring(0, index);
		}

		if (relativePath.startsWith("/static/")) {
			return true;
		}

		List<String> excludeUrls = getExcludeUrls();
		if (excludeUrls.contains(relativePath)) {
			return true;
		}

		if (Constants.LOGIN_URL.equals(relativePath)) {
			return true;
		}

		if (!(handler instanceof HandlerMethod)) {
			response.sendRedirect(contextPath + Constants.LOGIN_URL);
			return false;
		}

		HandlerMethod handlerMethod = (HandlerMethod) handler;
		ResponseBody responseBody = handlerMethod.getMethodAnnotation(ResponseBody.class);

		HttpSession session = request.getSession();
		SysUser sysUser = (SysUser) session.getAttribute(Constants.LOGIN_USER);
		
		if (sysUser != null) {
			IgnorePermission ignorePermission = handlerMethod.getMethodAnnotation(IgnorePermission.class);
			if (ignorePermission != null) {
				return true;
			}
			List<String> permissions = (List<String>) session.getAttribute(Constants.LOGIN_USER_PERMISSIONS);
			if (permissions == null) {
				return false;
			}
			boolean contains = permissions.contains(relativePath);
			if (contains) {
				return true;
			}
			if (responseBody != null) {
				response.setCharacterEncoding("UTF-8");
				PrintWriter out = response.getWriter();
				out.flush();
				out.write("{\"error\":true,\"message\":\"您没有权限访该数据\"}");
				out.close();
			} else {
				response.sendRedirect(contextPath + "/403");
			}
			return false;
		}

		if (responseBody != null) {
			response.setCharacterEncoding("UTF-8");
			PrintWriter out = response.getWriter();
			out.flush();
			out.write("{\"error\":true,\"logout\":true,\"message\":\"未登录或登录已超时\"}");
			out.close();
			return false;
		}

		response.sendRedirect(contextPath + Constants.LOGIN_URL);
		return false;
	}

	public List<String> getExcludeUrls() {
		if (excludeUrls == null) {
			excludeUrls = Collections.emptyList();
		}
		return excludeUrls;
	}

	public void setExcludeUrls(List<String> excludeUrls) {
		this.excludeUrls = excludeUrls;
	}
}

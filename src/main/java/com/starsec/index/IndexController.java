package com.starsec.index;

import java.util.List;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;

import com.starsec.constants.Constants;
import com.starsec.po.SysDepartment;
import com.starsec.po.SysUser;
import com.starsec.service.LeakService;
import com.starsec.service.SysDepartmentService;
import com.starsec.service.SysUserService;
import com.starsec.service.TaskService;
import com.starsec.service.ToolService;
import com.starsec.util.SessionUtil;
import com.starsec.vo.LeakVo;
import com.starsec.vo.TaskVo;
import com.starsec.vo.ToolVo;

@Controller
public class IndexController {

	@Autowired
	private SysUserService sysUserService;

	@Autowired
	private LeakService leakService;

	@Autowired
	private ToolService toolService;

	@Autowired
	private TaskService taskService;
	
	@Autowired
	private SysDepartmentService sysDepartmentService;
	

	@RequestMapping(value = "/index")
	public String index(HttpSession session) {
		if (session.getAttribute(Constants.LOGIN_USER) != null) {
			return "redirect:/toHome";
		}
		return "index";
	}

	/**
	 * 跳转到首页
	 * 
	 * @return
	 */
	@RequestMapping(value = "/toHome")
	public String toHome() {
		return "/home/home";
	}

	/**
	 * 跳转到漏洞列表
	 * 
	 * @return
	 */
	@RequestMapping(value = "/toBugList")
	public String toBugList() {
		return "/bug/bugList";
	}
	/**
	 * 跳转到创建漏洞
	 * 
	 * @return 
	 */
	@RequestMapping(value = "/toNewBug")
	public String toNewBug() {
		return "/bug/newBug";
	}

	/**
	 * 跳转到安全审计
	 * 
	 * @return
	 */
	@RequestMapping(value = "/toLog")
	public String toLog() {
		return "/admin/log";
	}

	/**
	 * 跳转到用户设置
	 * 
	 * @return
	 */
	@RequestMapping(value = "/toUsers")
	public String toUsers() {
		return "/admin/user/users";
	}

	/**
	 * 跳转到组织维护
	 * 
	 * @return
	 * 
	 */
	@RequestMapping(value = "/toOrganization")
	public String toOrganization() {
		return "/admin/user/organization";
	}

	/**
	 * 跳转到用户组维护
	 * 
	 * @return
	 * 
	 */
	@RequestMapping(value = "/toGroup")
	public String toGroup() {
		return "/admin/user/group";
	}

	/**
	 * 跳转到漏洞类型维护
	 * 
	 * @return
	 */
	@RequestMapping(value = "/toBugType")
	public String toBugType() {
		return "/admin/bug/bugType";
	}

	/**
	 * 跳转到漏洞删除
	 * 
	 * @return
	 * 
	 */
	@RequestMapping(value = "/toBug")
	public String toBug() {
		return "/admin/bug/bug";
	}

	/**
	 * 跳转到 工具类型维护
	 * 
	 * @return
	 */
	@RequestMapping(value = "/toToolType")
	public String toToolType() {
		return "/admin/tools/toolType";
	}

	/**
	 * 跳转到 工具删除
	 * 
	 * @return
	 */
	@RequestMapping(value = "/toTool")
	public String toTool() {
		return "/admin/tools/tool";
	}

	/**
	 * 跳转到 任务类型维护
	 * 
	 * @return
	 */
	@RequestMapping(value = "/toTaskType")
	public String toTaskType() {
		return "/admin/tasks/taskType";
	}

	/**
	 * 跳转到 积分清零
	 */
	@RequestMapping(value = "/toMark")
	public String toMark() {
		return "/admin/tasks/mark";
	}

	/**
	 * 跳转到 我的漏洞
	 */
	@RequestMapping(value = "/toMyBug")
	public String myBug() {
		return "/bug/myBug";
	}
	/**
	 * 跳转到 漏洞统计
	 */
	@RequestMapping(value = "/toBugStatistics")
	public String toBugStatistics() {
		return "/bug/bugStatistics";
	}

	/**
	 * 跳转到 工具列表
	 */
	@RequestMapping(value = "/toToolList")
	public String toToolList() {
		return "/tool/toolList";
	}

	/**
	 * 跳转到 我的工具
	 */
	@RequestMapping(value = "/toMyTools")
	public String toMyTools() {
		return "/tool/myTools";
	}

	/**
	 * 跳转到 新建工具
	 */
	@RequestMapping(value = "/toNewTool")
	public String toNewTool() {
		return "/tool/newTool";
	}

	/**
	 * 跳转到 工具统计
	 */
	@RequestMapping(value = "/toToolStatistics")
	public String toToolStatistics() {
		return "/tool/toolStatistics";
	}

	/**
	 * 跳转到 任务统计
	 */
	@RequestMapping(value = "/toTaskStatistics")
	public String toTaskStatistics() {
		return "/task/taskStatistics";
	}

	/**
	 * 跳转到 任务列表
	 */
	@RequestMapping(value = "/toTaskList")
	public String toTaskList() {
		return "/task/taskList";
	}

	/**
	 * 跳转到 我的任务
	 */
	@RequestMapping(value = "/toMyTask")
	public String toMyTask() {
		return "/task/myTask";
	}

	/**
	 * 跳转到 新建任务
	 */
	@RequestMapping(value = "/toNewTask")
	public String toNewTask() {
		return "/task/newTask";
	}

	/**
	 * 跳转到 个人中心
	 */
	@RequestMapping(value = "/toUserInfo")
	public String toUserInfo(Integer userID, ModelMap model) {
		SysUser sysUser = sysUserService.findById(userID);
		List<LeakVo> findLatestReleaseLeak = leakService.findLatestReleaseLeak(10, userID);
		List<ToolVo> findLatestReleaseTool = toolService.findLatestReleaseTool(10, userID);
		List<TaskVo> findLatestReleaseTask = taskService.findLatestReleaseTask(10, userID);

		model.put("user", sysUser);
		model.put("leaks", findLatestReleaseLeak);
		model.put("tools", findLatestReleaseTool);
		model.put("tasks", findLatestReleaseTask);
		return "/users/userInfo";
	}

	/**
	 * 跳转到 用户消息
	 */
	@RequestMapping(value = "/toUserNew")
	public String toUserNew() {
		return "/users/new";
	}

	/**
	 * 跳转到 用户信息设置
	 */
	@RequestMapping(value = "/toUserSetting")
	public String toUserSetting(Integer userID, ModelMap model) {
		if(userID != SessionUtil.loginUser().getId()){
			return "redirect:/403";
		}
		
		SysUser sysUser = sysUserService.findById(userID);
		List<SysDepartment> findSysDepartments = sysDepartmentService.findSysDepartments();
		
		model.put("user", sysUser);
		model.put("sysDepartments", findSysDepartments);
		return "/users/userSetting";
	}
}
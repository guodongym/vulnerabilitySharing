package com.starsec.util;

import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.awt.image.CropImageFilter;
import java.awt.image.FilteredImageSource;
import java.awt.image.ImageFilter;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.UUID;

import javax.imageio.ImageIO;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;

import com.starsec.constants.DocumentType;
import com.starsec.constants.ImageType;

@Component
public class FileUploadComponent {

	@Value("${uploadPath}")
	public String uploadPath;

	
	/**
	 * @Title: getUploadPath 
	 * @Description: 获取完整上传路径
	 * @author zhaogd 
	 * @param relativePath  上传的相对路径
	 * @return
	 */
	public String getUploadPath(String relativePath) {
		File rootFolder = new File(uploadPath);
		if (!rootFolder.isDirectory()) {
			rootFolder.mkdirs();
		}
		File file = new File(rootFolder + File.separator + relativePath);
		File parentFile = file.getParentFile();
		if (!parentFile.exists()) {
			parentFile.mkdirs();
		}
		return file.getAbsolutePath();
	}

	
	/**
	 * @Title: uploadFile 
	 * @Description: 上传文件，返回文件信息
	 * @author zhaogd 
	 * @param multipartFile  待上传文件
	 * @return
	 * @throws IOException
	 */
	public FileEntry uploadFile(MultipartFile multipartFile) throws IOException {
		if (multipartFile == null) {
			return FileEntry.error("上传失败，接收文件为空，请稍后重试");
		}
		if (StringUtils.isBlank(multipartFile.getOriginalFilename())) {
			return FileEntry.error("上传失败，文件名称为空");
		}
		if(!filterDocumentType(multipartFile)){
			return FileEntry.error("上传失败，文件类型不匹配");
		}
		String filePath = getRandomFilePath(multipartFile);

		String uploadPath = getUploadPath(filePath);
		File uploadFile = new File(uploadPath);
		multipartFile.transferTo(uploadFile);

		return new FileEntry(multipartFile.getOriginalFilename(), filePath, uploadFile.length());
	}


	/**
	 * @Title: uploadImage 
	 * @Description: 上传图片，不作任务处理
	 * @author zhaogd 
	 * @param imageFile
	 * @return
	 * @throws IOException
	 */
	public FileEntry uploadImage(MultipartFile imageFile) throws IOException {
		if (imageFile == null) {
			return FileEntry.error("error|上传失败，接收文件为空，请稍后重试");
		}
		if (StringUtils.isBlank(imageFile.getOriginalFilename())) {
			return FileEntry.error("error|上传失败，文件名称为空");
		}
		if(!filterImageType(imageFile)){
			return FileEntry.error("error|上传失败，文件类型不匹配");
		}
		String relativePath = getRandomFilePath(imageFile);
		String imagePath = getUploadPath(relativePath);
		File uploadFile = new File(imagePath);
		imageFile.transferTo(uploadFile);
		
		return new FileEntry(imageFile.getOriginalFilename(), relativePath, uploadFile.length());
	}
	
	
	/**
	 * @Title: uploadScaleImage 
	 * @Description: 上传同比例缩放的图片
	 * @author zhaogd 
	 * @param imageFile  待上传图片
	 * @return
	 * @throws IOException
	 */
	public FileEntry uploadScaleImage(MultipartFile imageFile) throws IOException {
		if (imageFile == null) {
			return null;
		}
		if (StringUtils.isBlank(imageFile.getOriginalFilename())) {
			return null;
		}
		if(!filterImageType(imageFile)){
			return null;
		}
		String relativePath = getRandomFilePath(imageFile);
		String imagePath = getUploadPath(relativePath);
		scale(imageFile.getInputStream(), imagePath);
		File uploadFile = new File(imagePath);
		
		return new FileEntry(imageFile.getOriginalFilename(), relativePath, uploadFile.length());
	}
	
	
	/**
	 * @Title: uploadScaleImage 
	 * @Description:  上传图片并按指定大小裁剪
	 * @author zhaogd 
	 * @param imageFile  待上传的图片
	 * @param x  图片左上顶点横坐标
	 * @param y  图片左上顶点纵坐标
	 * @param w  图片宽度
	 * @param h  图片高度
	 * @return
	 * @throws IOException
	 */
	public FileEntry uploadScaleImage(String relativePath, int x, int y, int w, int h) throws IOException {
		String imageFilePath = getUploadPath(relativePath);
		
		//scale(new FileInputStream(imageFilePath), imageFilePath);
		Image img;
		ImageFilter cropFilter;
		BufferedImage bi = ImageIO.read(new File(imageFilePath));
		int srcWidth = bi.getWidth();// 原图宽度
		int srcHeight = bi.getHeight();// 原图高度
		File uploadFile = new File(imageFilePath);
		if (srcWidth >= w && srcHeight >= h) {
			Image image = bi.getScaledInstance(srcWidth, srcHeight, Image.SCALE_DEFAULT);
			cropFilter = new CropImageFilter(x, y, w, h);
			img = Toolkit.getDefaultToolkit().createImage(new FilteredImageSource(image.getSource(), cropFilter));
			BufferedImage scaleImage = new BufferedImage(w, h, BufferedImage.TYPE_INT_BGR);
			Graphics g = scaleImage.getGraphics();
			g.drawImage(img, 0, 0, null);
			g.dispose();

			ImageIO.write(scaleImage, "JPEG", uploadFile);
		}
		return new FileEntry(new File(imageFilePath).getName(), relativePath, uploadFile.length());
	}

	/**
	 * @Title: getRandomFilePath 
	 * @Description: 获取随机文件名
	 * @author zhaogd 
	 * @param multipartFile
	 * @return
	 */
	private String getRandomFilePath(MultipartFile multipartFile) {
		String randomFileName = UUID.randomUUID().toString().replaceAll("-", "");
		String fileName = multipartFile.getOriginalFilename();
		int index = fileName.lastIndexOf('.');
		if (index != -1) {
			String temp = fileName.substring(0,index);
			int tempIndex = temp.lastIndexOf(".");
			if(tempIndex!=-1 && ".tar".equals(temp.substring(tempIndex))){
				randomFileName += fileName.substring(tempIndex);
			}else{
				randomFileName += fileName.substring(index);
			}
		}

		return DateUtil.formatDate(DateUtil.currentDate()) + File.separator + randomFileName;
	}

	/**
	 * @Title: scale 
	 * @Description: 图片同比缩放
	 * @author zhaogd 
	 * @param is  文件流
	 * @param imagePath   文件路径
	 * @throws IOException
	 */
	private final static void scale(InputStream is, String imagePath) throws IOException {
		BufferedImage src = ImageIO.read(is); // 读入文件
		int width = src.getWidth(); // 得到源图宽
		int height = src.getHeight(); // 得到源图长
		if (width > 500 || height > 500) {
			if (width > height) {
				for (int i = 1; i < 20; i++) {
					if ((width / i) <= 500) {
						width = width / i;
						height = height / i;
						break;
					}
				}
			} else {
				for (int i = 1; i < 20; i++) {
					if ((height / i) <= 500) {
						width = width / i;
						height = height / i;
						break;
					}
				}
			}
		} else {
			if (width > height) {
				for (int i = 1; i < 20; i++) {
					if ((width * i) >= 400) {
						width = width * i;
						height = height * i;
						break;
					}
				}
			} else {
				for (int i = 1; i < 20; i++) {
					if ((height * i) >= 400) {
						width = width * i;
						height = height * i;
						break;
					}
				}
			}
		}
		Image image = src.getScaledInstance(width, height, Image.SCALE_DEFAULT);
		BufferedImage tag = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
		Graphics g = tag.getGraphics();
		g.drawImage(image, 0, 0, null); // 绘制缩小后的图
		g.dispose();
		ImageIO.write(tag, "JPEG", new File(imagePath));// 输出到文件流
	}
	
	
	/**
	 * @Title: filterImageType 
	 * @Description: 过滤图片类型
	 * @author zhaogd 
	 * @param multipartFile
	 * @return
	 */
	private boolean filterImageType(MultipartFile multipartFile){
		String filename = multipartFile.getOriginalFilename();
		String suffix = filename.substring(filename.lastIndexOf(".")+1);
		if(!ImageType.getNameList().contains(suffix.toLowerCase())){
			return false;
		}
		if(!ImageType.getValueList().contains(multipartFile.getContentType())){
			return false;
		}
		return true;
	}
	
	/**
	 * @Title: filterDocumentType 
	 * @Description: 过滤文件类型
	 * @author zhaogd 
	 * @param multipartFile
	 * @return
	 */
	private boolean filterDocumentType(MultipartFile multipartFile){
		String filename = multipartFile.getOriginalFilename();
		String suffix = filename.substring(filename.lastIndexOf(".")+1);
		if(!DocumentType.getNameList().contains(suffix.toLowerCase()) && !ImageType.getNameList().contains(suffix.toLowerCase())){
			return false;
		}
		if(!DocumentType.getValueList().contains(multipartFile.getContentType().toLowerCase()) && !ImageType.getValueList().contains(multipartFile.getContentType().toLowerCase())){
			return false;
		}
		return true;
	}
	
}

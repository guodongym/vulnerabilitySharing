package com.starsec.util;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang.StringUtils;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.starsec.constants.Constants;
import com.starsec.util.SessionUtil;

/**
 * @Description:富文本Html处理器，主要处理图片及编码
 * @author:LiaoFei
 * @date :2016-3-28 下午4:13:21
 * @version V1.0
 * 
 */
@Component
public class RichHtmlHandler {

	@Autowired
	private FileUploadComponent fileUploadComponent;
	
	private Document doc = null;
	private String docSrcParent;
	private String docSrcLocationPrex;
	private String nextPartId;
	private String shapeidPrex;
	private String spidPrex;
	private String typeid;

	private List<String> docBase64BlockResults = null;
	private List<String> xmlImgRefs = null;

	
	public String getHandledDocBodyBlock() {
		String raw = WordHtmlGeneratorHelper.string2Ascii(doc.getElementsByTag("body").html());
		return raw.replace("=3D", "=").replace("=", "=3D");
	}

	public String getRawHandledDocBodyBlock() {
		String raw = doc.getElementsByTag("body").html();
		return raw.replace("=3D", "=").replace("=", "=3D");
	}
	
	public List<String> getDocBase64BlockResults() {
		return docBase64BlockResults;
	}

	public List<String> getXmlImgRefs() {
		return xmlImgRefs;
	}

	private void re_init(String html) {
		doc = null;
		doc = Jsoup.parse(wrappHtml(html));
		
		shapeidPrex = "_x56fe__x7247__x0020";
		spidPrex = "_x0000_i";
		typeid = "#_x0000_t75";
		
		// 更换模板必须改
		docSrcLocationPrex = "file:///C:/882C37F5";
		docSrcParent = "file9285.files";
		nextPartId = "01D1FA3A.79F40F20";
	}

	/**
	 * @Description: 获得已经处理过的HTML文件
	 * @throws IOException
	 * @throws
	 * @author:LiaoFei
	 * @date:2016-3-28 下午4:16:34
	 */
	public void handledHtml(boolean isWebApplication,String html) throws IOException {
		re_init(html);
		docBase64BlockResults = new ArrayList<String>();
		xmlImgRefs = new ArrayList<String>();
		
		Elements imags = doc.getElementsByTag("img");

		if (imags == null || imags.size() == 0) {
			return;
		}

		// 转换成word mht 能识别图片标签内容，去替换html中的图片标签
		for (Element item : imags) {
			// 把文件取出来
			String src = item.attr("src");
			String srcRealPath = src;

			if (isWebApplication) {
				HttpServletRequest request = SessionUtil.getRequest();
				String contentPath = request.getContextPath();
				String basePath = request.getScheme()+"://"+request.getServerName()+":"+ request.getServerPort() + contentPath; 
				
				basePath = basePath + Constants.DOWNLOAD_IMAGE_URL;
				if (!StringUtils.isEmpty(basePath)) {
					if (src.startsWith(basePath)) {
						src = src.substring(basePath.length());
					}
				}

				srcRealPath = fileUploadComponent.getUploadPath(src.replace("\\", File.separator));
			}

			File imageFile = new File(srcRealPath);
			String imageFielShortName = imageFile.getName();
			String fileTypeName = srcRealPath.substring(srcRealPath.lastIndexOf(".") + 1);

			String docFileName = "image" + UUID.randomUUID().toString().replace("-", "") + "." + fileTypeName;
			String srcLocationShortName = docSrcParent + "/" + docFileName;

			String styleAttr = item.attr("style"); // 样式
			// 高度
			String imagHeightStr = item.attr("height");;
			if (StringUtils.isEmpty(imagHeightStr)) {
				imagHeightStr = getStyleAttrValue(styleAttr, "height");
			}
			// 宽度
			String imagWidthStr = item.attr("width");;
			if (StringUtils.isEmpty(imagHeightStr)) {
				imagHeightStr = getStyleAttrValue(styleAttr, "width");
			}

			imagHeightStr = imagHeightStr.replace("px", "");
			imagWidthStr = imagWidthStr.replace("px", "");
			if (StringUtils.isEmpty(imagHeightStr)) {
				// 去得到默认的文件高度
				imagHeightStr = "0";
			}
			if (StringUtils.isEmpty(imagWidthStr)) {
				imagWidthStr = "0";
			}
			int imageHeight = Integer.parseInt(imagHeightStr);
			int imageWidth = Integer.parseInt(imagWidthStr);

			// 得到文件的word mht的body块
			String handledDocBodyBlock = WordImageConvertor.toDocBodyBlock(srcRealPath, imageFielShortName, imageHeight, imageWidth, styleAttr, srcLocationShortName, shapeidPrex, spidPrex, typeid);

			item.parent().append(handledDocBodyBlock);
			item.remove();
			// 去替换原生的html中的imag

			String base64Content = WordImageConvertor.imageToBase64(srcRealPath);
			String contextLoacation = docSrcLocationPrex + "/" + docSrcParent + "/" + docFileName;

			String docBase64BlockResult = WordImageConvertor.generateImageBase64Block(nextPartId, contextLoacation, fileTypeName, base64Content);
			docBase64BlockResults.add(docBase64BlockResult);

			String imagXMLHref = "<o:File HRef=3D\"" + docFileName + "\"/>";
			xmlImgRefs.add(imagXMLHref);

		}

	}

	private String getStyleAttrValue(String style, String attributeKey) {
		if (StringUtils.isEmpty(style)) {
			return "";
		}

		// 以";"分割
		String[] styleAttrValues = style.split(";");
		for (String item : styleAttrValues) {
			// 在以 ":"分割
			String[] keyValuePairs = item.split(":");
			if (attributeKey.equals(keyValuePairs[0])) {
				return keyValuePairs[1];
			}
		}

		return "";
	}

	private String wrappHtml(String html) {
		// 因为传递过来都是不完整的doc
		StringBuilder sb = new StringBuilder();
		sb.append("<html>");
		sb.append("<body>");
		sb.append(html);

		sb.append("</body>");
		sb.append("</html>");
		return sb.toString();
	}
	/**
	 * @Description: 测试
	 * @param @param args
	 * @return void
	 * @throws IOException
	 * @throws
	 * @author:LiaoFei
	 * @date:2016-3-29 上午9:39:12
	 */
	public static void main(String[] args) throws IOException {

		StringBuilder sb = new StringBuilder();
		sb.append("<div>");

		sb.append("<img style='height:100px;width:200px;display:block;' src='http://localhost:8080/vulnerabilitySharing/attachment/downloadImage/2016-08-18\183a0cf0be6c448ba8b55d27629dcc59.jpg' />");
		sb.append("<span>中国梦，幸福梦！</span>");
		sb.append("</div>");
		RichHtmlHandler handler = new RichHtmlHandler();

		// 写入文件中，
		try {
			handler.handledHtml(true,sb.toString());

			String logFile = "D:\\log.txt";

			File file = new File(logFile);
			// FileOutputStream out=new FileOutputStream(file);
			FileWriter fw = new FileWriter(file);

			fw.write("======handledDocBody block==========\n");
			fw.write(handler.getHandledDocBodyBlock());

			fw.write("======handledBase64Block==========\n");
			if (handler.getDocBase64BlockResults() != null && handler.getDocBase64BlockResults().size() > 0) {
				for (String item : handler.getDocBase64BlockResults()) {
					fw.write(item + "\n");
				}
			}
			if (handler.getXmlImgRefs() != null && handler.getXmlImgRefs().size() > 0) {
				fw.write("======xmlimaHref==========\n");
				for (String item : handler.getXmlImgRefs()) {
					fw.write(item + "\n");
				}
			}

			fw.close();

		} catch (FileNotFoundException e) {

			e.printStackTrace();
		}

	}

}

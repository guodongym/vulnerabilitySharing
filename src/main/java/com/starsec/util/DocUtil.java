package com.starsec.util;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.HashMap;
import java.util.Map;

import freemarker.template.Configuration;
import freemarker.template.DefaultObjectWrapper;
import freemarker.template.Template;
import freemarker.template.TemplateExceptionHandler;

public class DocUtil {

	private static Configuration configure = null;

	static {
		configure = new Configuration(Configuration.VERSION_2_3_23);
		configure.setDefaultEncoding("utf-8");
		// 加载模板文件
		configure.setClassForTemplateLoading(DocUtil.class, "/");
		// 设置对象包装器
		configure.setObjectWrapper(new DefaultObjectWrapper(Configuration.VERSION_2_3_23));
		// 设置异常处理器
		configure.setTemplateExceptionHandler(TemplateExceptionHandler.IGNORE_HANDLER);
	}

	/**
	 * 根据Doc模板生成word文件
	 * 
	 * @param dataMap
	 *            Map 需要填入模板的数据
	 * @param templateName
	 *            模板文件名称
	 * @param tmpFile
	 *            保存临时文件
	 */
	public static void createDoc(Map<String, Object> dataMap, String templateName, File tmpFile) {
		Template template = null;
		Writer out = null;
		try {
			// 加载需要装填的模板
			// 定义Template对象,注意模板类型名字与templateName要一致
			template = configure.getTemplate(templateName + ".ftl");
			
			WordHtmlGeneratorHelper.handleAllObject(dataMap);
			
			// 输出文档
			if(!tmpFile.getParentFile().exists()){
				tmpFile.getParentFile().mkdirs();
			}
			out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tmpFile), "utf-8"));
			template.process(dataMap, out);
			
		} catch (Exception e) {
			e.printStackTrace();
		}finally{
			try {
				out.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	public static void main(String[] args) {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("leakName", "漏洞测试111");
		createDoc(map, "test", new File("F:/test/test.doc"));
	}

}
package com.starsec.util;

import java.io.CharArrayWriter;
import java.io.PrintWriter;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public class ConvertUtil {

	/**
	 * 把异常信息转化成字符串
	 */
	public static String exception2String(Throwable e) {
		if (e == null) {
			return "\"null\"";
		}
		CharArrayWriter caw = new CharArrayWriter();
		PrintWriter pw = new PrintWriter(caw, true);
		e.printStackTrace(pw);
		return caw.toString();
	}

	/**
	 * 判断两个对象是否相等
	 */
	public static boolean equal(Object o1, Object o2) {
		return o1 == null ? o2 == null : o1.equals(o2);
	}

	/**
	 * @Title: convert 
	 * @Description: po转为vo
	 * @author zhaogd 
	 * @param source po
	 * @param target vo
	 */
	public static void convert(Object source, Object target) {
		if (source == null || target == null) {
			return;
		}
		Method[] sourceMethods = source.getClass().getMethods();
		Map<String, Method> sourceMethodMap = new HashMap<String, Method>();
		for (Method sourceMethod : sourceMethods) {
			String sourceMethodName = sourceMethod.getName();
			if (sourceMethodName.startsWith("get") && sourceMethodName.length() > 3 && sourceMethod.getParameterTypes().length == 0) {
				String sourceFieldName = sourceMethodName.substring(3);
				sourceMethodMap.put(sourceFieldName, sourceMethod);
			}
		}

		Method[] targetMethods = target.getClass().getMethods();
		Map<String, Method> targetMethodMap = new HashMap<String, Method>();
		for (Method targetMethod : targetMethods) {
			String targetMethodName = targetMethod.getName();
			if (targetMethodName.startsWith("set") && targetMethodName.length() > 3 && targetMethod.getParameterTypes().length == 1) {
				String targetFieldName = targetMethodName.substring(3);
				targetMethodMap.put(targetFieldName, targetMethod);
			}
		}

		Set<Entry<String, Method>> sourceMethodEntries = sourceMethodMap.entrySet();
		for (Entry<String, Method> sourceMethodEntry : sourceMethodEntries) {
			String fieldName = sourceMethodEntry.getKey();
			Method sourceMethod = sourceMethodEntry.getValue();
			Method targetMethod = targetMethodMap.get(fieldName);
			if (targetMethod != null) {
				copyProperty(source, sourceMethod, target, targetMethod);
			}
		}
	}

	private static void copyProperty(Object source, Method sourceMethod, Object target, Method targetMethod) {
		Class<?> sourceType = sourceMethod.getReturnType();
		Class<?> targetType = targetMethod.getParameterTypes()[0];
		if (!sourceType.equals(targetType)) {
			return;
		}

		try {
			Object value = sourceMethod.invoke(source);
			targetMethod.invoke(target, value);
		} catch (Exception e) {
		}
	}

	/**
	 * @Title: convert 
	 * @Description: po转为vo
	 * @author zhaogd 
	 * @param source  po 
	 * @param targetClass  vo.class
	 * @return
	 */
	public static <T> T convert(Object source, Class<T> targetClass) {
		if (source == null) {
			return null;
		}
		try {
			T target = targetClass.newInstance();
			convert(source, target);
			return target;
		} catch (Exception e) {
		}
		return null;
	}


	/**
	 * @Title: convert 
	 * @Description: Po集合转为Vo集合,集合长度必须相同
	 * @author zhaogd 
	 * @param sources  Po集合
	 * @param targets  Vo集合
	 */
	public static void convert(List<?> sources, List<?> targets) {
		if (sources == null && !targets.isEmpty()) {
			targets.clear();
		} else if (sources != null && targets != null && sources.size() == targets.size()) {
			for (int i = 0; i < sources.size(); i++) {
				convert(sources.get(i), targets.get(i));
			}
		}
	}

	/**
	 * @Title: convert 
	 * @Description: Po集合转为Vo集合,集合长度必须相同
	 * @author zhaogd 
	 * @param sources  Po集合
	 * @param targetClass  Vo.calss
	 */
	public static <T> List<T> convert(List<?> sources, Class<T> targetClass) {
		List<?> list = sources;
		if (list == null) {
			list = Collections.emptyList();
		}
		List<T> targets = new ArrayList<T>(list.size());
		convert(list, targets, targetClass);
		return targets;
	}

	private static <T> void convert(List<?> sources, List<T> targets, Class<T> targetClass) {
		if (targets == null) {
			return;
		}
		targets.clear();
		if (sources == null) {
			return;
		}
		for (int i = 0; i < sources.size(); i++) {
			try {
				T target = targetClass.newInstance();
				targets.add(target);
				convert(sources.get(i), target);
			} catch (Exception e) {
			}
		}
	}
}

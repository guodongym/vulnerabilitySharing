package com.starsec.controller;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.io.IOUtils;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.starsec.annotation.IgnorePermission;
import com.starsec.constants.Constants;
import com.starsec.constants.RiskLevel;
import com.starsec.model.DataTablePage;
import com.starsec.model.Result;
import com.starsec.po.Leak;
import com.starsec.po.LeakType;
import com.starsec.po.SysAttachment;
import com.starsec.service.LeakService;
import com.starsec.service.LeakTypeService;
import com.starsec.service.SysAttachmentService;
import com.starsec.util.DateUtil;
import com.starsec.util.DocUtil;
import com.starsec.util.FileEntry;
import com.starsec.util.FileUploadComponent;
import com.starsec.util.RichHtmlHandler;
import com.starsec.vo.AuditResultStatistic;
import com.starsec.vo.LeakAmountInLeakType;
import com.starsec.vo.LeakSupplementBean;
import com.starsec.vo.LeakVo;
;
/**
 * 漏洞
 * 
 * @author cheng cheng
 *
 */
@Controller
@RequestMapping(value = "/leak")
public class LeakController {
	@Autowired
	private SysAttachmentService sysAttachmentService;

	/*
	 * 文件上传
	 */
	@Autowired
	private FileUploadComponent fileUploadComponent;

	@Autowired
	private LeakService leakService;
	
	@Autowired
	private LeakTypeService leakTypeService;
	
	@Autowired
	private RichHtmlHandler richHtmlHandler;
	
	@Value("${tmpFilePtah}")
	public String tmpFilePtah;
	
	@Value("${templateName}")
	public String templateName;
	
	/**
	 * 跳转到漏洞信息的页面,并显示
	 * @param leakId
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/idToLeak")
	public String idToLeak(Integer leakId,ModelMap model) {
		LeakVo leakVo = leakService.findVoById(leakId);
		model.addAttribute("leakVo", leakVo);
		return "/bug/bugDetail";
	}
	
	
//	@RequestMapping(value = "/leakDetail")
//	public String LeakDetail() {
//		return "/bug/bugDetail";
//	}

	/**
	 * findPageLeaks分页查询漏洞
	 * 
	 * @param pageParameBean
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/findPageLeaks")
	public DataTablePage findPageLeaks(DataTablePage dataTablePage,
			String likeKeyWord,Integer leakTypeId,Integer leakRiskLevel,
			Integer leakStatus,Integer reviewStatus,String createStarTime,
			String createEndTime,String reviewStartTime,String reviewEndTime
			) {
		DataTablePage pageLeak = leakService.findPageLeaks( dataTablePage,
				 likeKeyWord, leakTypeId, leakRiskLevel,
				 leakStatus, reviewStatus, createStarTime,
				 createEndTime, reviewStartTime, reviewEndTime);
		return pageLeak;
	}
	




	/**
	 *逻辑    删除漏洞 deleteLeak
	 * 
	 * @param id
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/deleteLeak")
	public Result deleteLeak(Integer id) {
		Result result = leakService.deleteLeak(id);
		return result;
	}

	
	/**
	 * 真实  删除漏洞 
	 * 
	 * @param id
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/realDeleteLeak")
	public Result realDeleteLeak(Integer id) {
		Result result = leakService.realDeleteLeak(id);
		return result;
	}
	/**
	 * 批量删除漏洞
	 * 
	 * @param idListString
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/deleteLeakList")
	public Result deleteLeakList(String idListString) {
		Result result = leakService.deleteLeakList(idListString);
		return result;

	}

//	/**
//	 * leak/findPageLeakAndCountComments 分页查询漏洞和评论数
//	 * 
//	 * @param pageParameBean
//	 * @return
//	 */
//	@ResponseBody
//	@RequestMapping(value = "/findPageLeakAndCountComments")
//	public DataTablePage findPageLeakAndCountComments(PageParameBean pageParameBean) {
//		DataTablePage pageLeakAndCountComments = leakService.findPageLeakAndCountComments(pageParameBean);
//		return pageLeakAndCountComments;
//	}

//	/**
//	 *  根据漏洞id获得漏洞信息
//	 * 
//	 * @param pageParameBean
//	 * @return
//	 */
//	@ResponseBody
//	@RequestMapping(value = "/findLeakById")
//	public Leak findLeakById(Integer id) {
//		Leak leak = leakService.findLeakById(id);
//		return leak;
//	}


	/**
	 * 漏洞状态统计,查出提交和未提交的漏洞总数
	 * 
	 * @param request
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/countLeakStatus")
	public Map<String, Object> countLeakStatus() {

		Map<String, Object> hashMap = leakService.countLeakStatus();
		return hashMap;
	}

	/**
	 * 漏洞类型统计,查询每个漏洞类型下的漏洞总数
	 * 
	 * @param request
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/countLeakTypes")
	public List<LeakAmountInLeakType> countLeakTypes() {

		List<LeakAmountInLeakType> leakAmountInLeakTypeList = leakService.countLeakTypes();
		return leakAmountInLeakTypeList;
	}

	/**
	 * 审核结果统计 统计每个审核结果的漏洞个数
	 * 
	 * @param request
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/findAuditResultStatistics")
	public List<AuditResultStatistic> findAuditResultStatistics() {

		List<AuditResultStatistic> auditResultStatisticList = leakService.findAuditResultStatistics();
		return auditResultStatisticList;
	}

	/**
	 * 漏洞 个人榜
	 * 
	 * @return
	 * 
	 */
	@ResponseBody
	@RequestMapping(value = "/findPageSysUserRanks")
	public DataTablePage findPageSysUserRanks(DataTablePage page) {
		DataTablePage pageSysUserRanks = leakService.findPageSysUserRanks(page);
		return pageSysUserRanks;
	}

	/**
	 * 漏洞 单位榜
	 * 
	 * @return
	 * 
	 */
	@ResponseBody
	@RequestMapping(value = "/findPageDepartmentRanks")
	public DataTablePage findPageDepartmentRanks(DataTablePage page) {
		DataTablePage pageDepartmentRanks = leakService.findPageDepartmentRanks(page);
		return pageDepartmentRanks;
	}

//	/**
//	 * 年度漏洞统计
//	 * 
//	 * @return
//	 * 
//	 */
//	@ResponseBody
//	@RequestMapping(value = "/findAnnualLeakStatistis")
//	public List<AnnualLeakStatistic> findAnnualLeakStatistis() {
//		List<AnnualLeakStatistic> annualLeakStatistis = leakService.findAnnualLeakStatistis();
//		return annualLeakStatistis;
//	}

//	/**
//	 * 未发布漏洞信息
//	 * 
//	 * @param pageParameBean
//	 * @return
//	 */
//	@ResponseBody
//	@RequestMapping(value = "/findPageUnreleasedLeaks")
//	public DataTablePage findPageUnreleasedLeaks(PageParameBean pageParameBean, Integer userId) {
//		DataTablePage pageLeak = leakService.findPageUnreleasedLeaks(pageParameBean, userId);
//		return pageLeak;
//
//	}

//	/**
//	 * 已发布漏洞信息
//	 * 
//	 * @param pageParameBean
//	 * @return
//	 */
//	@ResponseBody
//	@RequestMapping(value = "/findPageReleasedLeaks")
//	public DataTablePage findPageReleasedLeaks(PageParameBean pageParameBean, Integer userId) {
//		DataTablePage pageLeaks = leakService.findPageReleasedLeaks(pageParameBean, userId);
//		return pageLeaks;
//	}

	/**
	 * 保存漏洞
	 * 
	 * @param sysDepartment
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/saveLeak")
	public Result saveLeak(Leak leak, LeakSupplementBean leakSupplementBean) {
		// 0是不成功 ,1 是成功
		Result result = leakService.saveLeak(leak, leakSupplementBean);
		return result;
	}
	/**
	 *
	 *  修改漏洞
	 * @param sysDepartment
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/updateLeak")
	public Result updateLeak(Leak leak, LeakSupplementBean leakSupplementBean) {
	
		
		// 0是不成功 ,1 是成功
		Result result = leakService.updateLeak(leak, leakSupplementBean);
		return result;
	}
	
	
	
	/**
	 * 保存并发布漏洞
	 * @param leak
	 * @param leakSupplementBean
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/saveAndReleaseLeak")
	public Result saveAndReleaseLeak(Leak leak, LeakSupplementBean leakSupplementBean) {
		Result result = leakService.saveAndReleaseLeak(leak, leakSupplementBean);
		return result;
	}
	
	/**
	 * 修改并发布漏洞
	 * @param leak
	 * @param leakSupplementBean
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/updateAndReleaseLeak")
	public Result updateAndReleaseLeak(Leak leak, LeakSupplementBean leakSupplementBean) {
		//判断是否有修改权限
		boolean  canUpdate = leakService.getCanUpdate(leak.getId());
		if(!canUpdate){
			return Result.error("没有更新权限");
		}

		Result result = leakService.updateAndReleaseLeak(leak, leakSupplementBean);
		return result;
	}

	
	/**
	 * @Title: getLatestReleaseLeak 
	 * @Description: 首页，获取最新发布漏洞
	 * @author zhaogd 
	 * @param pageSize 需要的漏洞条数
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/getLatestReleaseLeak")
	public List<LeakVo> getLatestReleaseLeak(Integer pageSize){
		if(pageSize == null || pageSize == 0){
			pageSize = 5;
		}
		return leakService.findLatestReleaseLeak(pageSize,null);
	}
	
	/**
	 * @Title: getLatestAuditLeak 
	 * @Description: 首页，获取最新审核漏洞
	 * @author zhaogd 
	 * @param pageSize 需要的漏洞条数
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/getLatestAuditLeak")
	public List<LeakVo> getLatestAuditLeak(Integer pageSize){
		if(pageSize == null || pageSize == 0){
			pageSize = 5;
		}
		return leakService.findLatestAuditLeak(pageSize);
	}
	
	
	/**
	 * 获得页面加载所需信息:漏洞类型,危险等级
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/getLoadingInfo")
	public Map<String, Object> getLoadingInfo( ){
		return leakService.getLoadingInfo();
	}
	
	/**
	 * 上传图片
	 * 
	 * @param request
	 * @return
	 * @throws IOException 
	 */
	@IgnorePermission
	@ResponseBody
	@RequestMapping(value = "/uploadImage")
	public String uploadImage(MultipartFile imageFile, HttpServletRequest request) throws IOException {
		FileEntry fileEntry = fileUploadComponent.uploadImage(imageFile);
		if(StringUtils.isNotBlank(fileEntry.getMessage())){
			return fileEntry.getMessage();
		}
		String ctx = (String) request.getAttribute(Constants.CTX);
		return ctx + Constants.DOWNLOAD_IMAGE_URL + fileEntry.getFilePath();
	}
	
	
	
	/**
	 * @Title: uploadFile
	 * @Description: 上传文件
	 * @author zhaogd
	 * @param imageFile
	 * @param request
	 * @return
	 * @throws IOException
	 */
	@IgnorePermission
	@ResponseBody
	@RequestMapping(value = "/uploadFile")
	public FileEntry uploadFile(MultipartFile multipartFile, HttpServletRequest request) throws IOException {
		FileEntry fileEntry = fileUploadComponent.uploadFile(multipartFile);
		if (!fileEntry.isErrorUpload()) {
			SysAttachment sysAttachment = sysAttachmentService.save(fileEntry);
			fileEntry.setAttachmentId(sysAttachment.getId());
		}
		return fileEntry;
	}
	
	/**
	 * 我的未发布漏洞
	 * @param session
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/findMyUnreleasePageLeaks")
	public DataTablePage findMyUnreleasePageLeaks( HttpSession session,DataTablePage dataTablePage){
		return leakService.findMyUnreleasePageLeaks(session,dataTablePage);
	}
	
	
	/**
	 * 我的已发布漏洞
	 * @param session
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/findMyReleasePageLeaks")
	public DataTablePage findMyReleasePageLeaks(DataTablePage dataTablePage){
		return leakService.findMyReleasePageLeaks(dataTablePage);
	}
	
	/**
	 * 发布漏洞信息
	 * @param leakId
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/releaseLeak")
	public Result releaseLeak(Integer leakId){
		return leakService.releaseLeak(leakId);
	}
	
	
	/**
	 * 我的审核信息
	 * @param leakId
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/pageMyReviewLeaks")
	public DataTablePage pageMyReviewLeaks(DataTablePage page){
		return leakService.pageMyReviewLeaks(page);
	}
	
	
	
	/**
	 * 提交审核
	 * @param leak
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/submitAudit")
	public Result submitAudit(Leak  leak){
		return leakService.submitAudit(leak);
	}
	
	
	/**
	 * 生成通知单
	 * @param leak
	 * @return
	 * @throws IOException 
	 */
	@RequestMapping(value = "/notice")
	public void notice(Integer id, HttpServletRequest request, HttpServletResponse response) throws IOException{
		Leak leak = leakService.findLeakById(id);
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("leakNo", leak.getLeakNo());
		map.put("currentTime", DateUtil.format(DateUtil.currentTime(), "yyyy年MM月dd日"));
		map.put("influenceSystemName", leak.getInfluenceSystemName());
		map.put("leakName", leak.getLeakName());
		map.put("riskLevel", RiskLevel.valueOf(leak.getRiskLevel()).toString());
		map.put("leakTypeName", leak.getLeakType().getLeakName());
		map.put("leakOutline", leak.getLeakOutline().trim());
		
		if(leak.getAuditTime()!=null){
			map.put("auditTime", DateUtil.formatDateTime(leak.getAuditTime()));
		}else{
			map.put("auditTime", "");
		}
		
		richHtmlHandler.handledHtml(true,leak.getLeakDetail());
		map.put("leakDetailBody", richHtmlHandler.getHandledDocBodyBlock());
		map.put("leakDetailImg", richHtmlHandler.getDocBase64BlockResults());
		map.put("leakDetailRef", richHtmlHandler.getXmlImgRefs());
		
		richHtmlHandler.handledHtml(true,leak.getSolution());
		map.put("solutionBody", richHtmlHandler.getHandledDocBodyBlock());
		map.put("solutionImg", richHtmlHandler.getDocBase64BlockResults());
		map.put("solutionRef", richHtmlHandler.getXmlImgRefs());
		
		File file = new File(tmpFilePtah + File.separator + UUID.randomUUID().toString().replaceAll("-", "") + ".doc");
		DocUtil.createDoc(map, templateName, file);
		
		String fileName = "系统漏洞整改通知单"+leak.getLeakNo()+".doc";
		
		String contentType = "application/octet-stream";
		String newFileName;
		if (request.getHeader("User-Agent").toLowerCase().indexOf("firefox") > 0) { // firefox
			newFileName = new String(fileName.getBytes("GBK"), "iso-8859-1");
		} else if (request.getHeader("USER-AGENT").toLowerCase().indexOf("msie") > 0) { // IE
			newFileName = URLEncoder.encode(fileName, "UTF-8");
			newFileName = newFileName.replace("+", "%20");
		} else {
			newFileName = new String(fileName.getBytes("UTF-8"), "iso-8859-1"); // chrom浏览器
		}

		response.addHeader("Content-Disposition", "attachment;filename=\"" + newFileName + "\"");
		response.addHeader("Content-Length", "" + file.length());

		response.setContentType(contentType);

		OutputStream out = new BufferedOutputStream(response.getOutputStream());
		InputStream input = null;
		try {
			input = new BufferedInputStream(new FileInputStream(file));
			byte[] buffer = new byte[1024];
			int length = -1;
			while ((length = input.read(buffer)) != -1) {
				out.write(buffer, 0, length);
			}
			out.flush();
		} finally {
			IOUtils.closeQuietly(input);
			out.close();
			file.delete();
		}
	}
	
	
	/**
	 * 跳转到修改漏洞信息
	 * @param id
	 */
	@RequestMapping(value = "/toUpdateLeak")
	public String toUpdateLeak(Integer leakId,ModelMap model) {
		//判断是否有修改权限
		boolean  canUpdate = leakService.getCanUpdate(leakId);
		if(!canUpdate){
			return "redirect:/403";
		}
		
		LeakVo leakVo = leakService.findVoById(leakId);
		model.addAttribute("leakVo", leakVo);
		//漏洞类型
		List<LeakType> leakTypes = leakTypeService.findAll();
		for (LeakType leakType : leakTypes) {
			if(leakType.getId() == leakVo.getLeakTypeId()){
				leakType.setSelected(true);
			}
		}
		model.put("leakTypes", leakTypes);
		
		//危险等级
		List<Map<String, Object>> riskLevels  = leakService.getRiskLevels(leakVo);
		model.put("riskLevels", riskLevels);
		
		return "/bug/updateLeak";
	}
	
}
package com.starsec.controller;

import java.io.IOException;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.starsec.model.DataTablePage;
import com.starsec.model.Result;
import com.starsec.po.SysAttachment;
import com.starsec.po.SysUser;
import com.starsec.service.SysAttachmentService;
import com.starsec.service.SysUserService;
import com.starsec.util.FileEntry;
import com.starsec.util.FileUploadComponent;
import com.starsec.util.SessionUtil;
/**
 * 用户信息管理
 * @author cheng cheng
 *
 */
@Controller
@RequestMapping(value = "/sysUser")
public class SysUserController {
	@Value("${defaultPassword}")
	public String defaultPassword;
	
	//用户信息管理
	@Autowired  
	private SysUserService sysUserService; 
	
	@Autowired
	private FileUploadComponent fileUploadComponent;
	
	@Autowired
	private SysAttachmentService sysAttachmentService;
	
	/**
	 * 分页查询用户信息,显示用户积分也可以
	 * @param pageParameBean
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/findPageSysUser")
	public DataTablePage findPageSysUser(DataTablePage dataTablePage){
		DataTablePage pageSysUsers = sysUserService.findPageResults(dataTablePage);
		return pageSysUsers;
	}
	/**
	 * 根据id禁用用户
	 * @param id
	 * @return isSuccess 0是不成功 ,1 是成功
	 */
	@ResponseBody
	@RequestMapping(value = "/disableSysUser")
	public Result  disableSysUser(Integer userId){
		return sysUserService.disableSysUser(userId);
	}
	/**
	 * 根据idList禁用多个用户
	 * @param id
	 * @return isSuccess 0是不成功 ,1 是成功
	 */
	@ResponseBody
	@RequestMapping(value = "/disableSysUserList")
	public Result  disableSysUserList(String idListString){
		Result result = sysUserService.updateDisableSysUserList(idListString);
		return result;
	}
	/**
	 * 根据id取消禁用用户
	 * @param id
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/cancelDisableSysUser")
	public Result  cancelDisableSysUser(Integer userId){
		return sysUserService.cancelDisableSysUser(userId);
	}
	
	/**
	 * 根据idList取消禁用多个用户
	 * @param id
	 * @return isSuccess 0是不成功 ,1 是成功
	 */
	@ResponseBody
	@RequestMapping(value = "/cancelDisableSysUserList")
	public Result  cancelDisableSysUserList(String idListString){
		Result result = sysUserService.upadateCancelDisableSysUserList(idListString);
		return result;
	}
	
	/**
	 * 根据idList批量删除用户
	 * @param id
	 * @return isSuccess 0是不成功 ,1 是成功
	 */
	@ResponseBody
	@RequestMapping(value = "/deleteSysUserList")
	public Result  deleteSysUserList(String idListString){
		Result result = sysUserService.deleteSysUserList(idListString);
		return result;
	}
	
	/**
	 * 根据 id删除用户信息
	 * @param id
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/delteSysUserById")
	public Result  deleteSysUserById(Integer userId){
		return sysUserService.deleteSysUserById(userId);
	}
	/**
	 * 添加或修改用户
	 * @param sysUser
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/saveOrUpdateSysUer")
	public Result  saveOrUpdateSysUer(SysUser  sysUser ,Integer[] sysRoleIds,Integer userGroupId){
		Result result = sysUserService.saveOrUpdateSysUer(sysUser,sysRoleIds,userGroupId,defaultPassword);
		return result;
	}
	

	@ResponseBody
	@RequestMapping(value = "/update")
	public Result update(SysUser sysUser,Integer sysDepartmentId,String imageFilePath,Integer x,Integer y ,Integer width,Integer height) throws IOException{
		if(sysUser.getId()!=SessionUtil.loginUser().getId()){
			return Result.error("没有访问权限");
		}
		
		FileEntry fileEntry = null;
		if(StringUtils.isNotBlank(imageFilePath) && width!=null && width !=0 && height!=null && height!=0){
			fileEntry = fileUploadComponent.uploadScaleImage(imageFilePath, x, y, width, height);
		}
		SysAttachment sysAttachment = null;
		if(fileEntry!=null){
			sysAttachment = sysAttachmentService.save(fileEntry);
		}
		
		Result result = sysUserService.update(sysUser,sysDepartmentId,sysAttachment);
		return result;
	}
	
	
	/**
	 * 根据 id显示一个用户信息
	 * @param id
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/toShowUser")
	public SysUser  toShowUser(Integer id){
		SysUser sysUser = sysUserService.findById(id);
		return sysUser;
	}
	
	/**
	 * 跳转到用户页面,带参数用户id 
	 * @param leakId
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/idToUser")
	public String idToUser(Integer userId,ModelMap model) {
		model.addAttribute("userId", userId);
		return "/users/userInfo";
	}
	
	
	/**
	 * 初始化密码
	 * @param userId
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/initPassword")
	public Result initPassword(Integer userId) {
		return sysUserService.initPassword(userId,defaultPassword);
	
	}
	
}
package com.starsec.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.starsec.constants.TaskStatus;
import com.starsec.model.DataTablePage;
import com.starsec.model.Result;
import com.starsec.po.Task;
import com.starsec.po.TaskType;
import com.starsec.service.TaskService;
import com.starsec.service.TaskTypeService;
import com.starsec.vo.PageParameBean;
import com.starsec.vo.TaskVo;

/**
 * 任务
 * 
 * @author cheng cheng
 *
 */
@Controller
@RequestMapping(value = "/task")
public class TaskController {

	@Autowired
	private TaskService taskService;

	@Autowired
	private TaskTypeService taskTypeService;

	@ResponseBody
	@RequestMapping(value = "/findPage")
	public DataTablePage findPage(DataTablePage page, String likeKeyWord, Integer taskTypeId, Integer status, String createStarTime, String createEndTime) {
		DataTablePage data = taskService.findPage(page, likeKeyWord, taskTypeId, status, createStarTime, createEndTime);
		return data;
	}

	@ResponseBody
	@RequestMapping(value = "/save")
	public Result save(Task task, Integer taskTypeId) {
		return taskService.save(task, taskTypeId, TaskStatus.未发布.value());
	}

	@ResponseBody
	@RequestMapping(value = "/saveAndRelease")
	public Result saveAndRelease(Task task, Integer taskTypeId) {
		return taskService.save(task, taskTypeId, TaskStatus.已发布.value());
	}

	/**
	 * 获取所有已接受任务
	 */
	@ResponseBody
	@RequestMapping(value = "/findReceivingPage")
	public DataTablePage findReceivingPage(DataTablePage page) {
		DataTablePage data = taskService.findReceivingPage(page);
		return data;
	}

	/**
	 * 获取所有未发布
	 */
	@ResponseBody
	@RequestMapping(value = "/findNotReleasePage")
	public DataTablePage findNotReleasePage(DataTablePage page) {
		Integer status = TaskStatus.未发布.value();
		DataTablePage data = taskService.findMyTaskPage(page, status);
		return data;
	}

	/**
	 * 获取所有已发布
	 */
	@ResponseBody
	@RequestMapping(value = "/findReleasePage")
	public DataTablePage findReleasePage(DataTablePage page, String likeKeyWord) {
		DataTablePage data = taskService.findMyTaskPage(page, null);
		return data;
	}

	/**
	 * 详情页
	 */
	@RequestMapping(value = "/taskDetail")
	public String taskDetail(Integer taskId, ModelMap model) {
		TaskVo taskVo = taskService.findVoById(taskId);
		model.put("task", taskVo);
		return "/task/taskDetail";
	}

	/**
	 * 首页，获取最新发布
	 */
	@ResponseBody
	@RequestMapping(value = "/getLatestReleaseTask")
	public List<TaskVo> getLatestReleaseTask(Integer pageSize) {
		if (pageSize == null || pageSize == 0) {
			pageSize = 5;
		}
		return taskService.findLatestReleaseTask(pageSize, null);
	}

	/**
	 * 首页，获取最新完成
	 */
	@ResponseBody
	@RequestMapping(value = "/getLatestFinishTask")
	public List<TaskVo> getLatestFinishTask(Integer pageSize) {
		if (pageSize == null || pageSize == 0) {
			pageSize = 5;
		}
		return taskService.findLatestFinishTask(pageSize);
	}

	/**
	 * 接受任务
	 */
	@ResponseBody
	@RequestMapping(value = "/receive")
	public Result receive(Integer taskId) {
		Result result = taskService.receive(taskId);
		return result;
	}

	/**
	 * 提交任务成果
	 */
	@ResponseBody
	@RequestMapping(value = "/submitResult")
	public Result submitResult(Integer taskId, Integer attachmentId) {
		Result result = taskService.submitResult(taskId, attachmentId);
		return result;
	}

	/**
	 * 转移队长
	 */
	@ResponseBody
	@RequestMapping(value = "/changeLeader")
	public Result changeLeader(Integer leaderTaskId, Integer leaderUserId) {
		if (leaderUserId == null || leaderUserId == 0) {
			return Result.error("没有选择队员");
		}
		Result result = taskService.changeLeader(leaderTaskId, leaderUserId);
		return result;
	}

	/**
	 * 接受队长
	 */
	@ResponseBody
	@RequestMapping(value = "/receiveLeader")
	public Result receiveLeader(Integer taskId) {
		Result result = taskService.receiveLeader(taskId);
		return result;
	}

	/**
	 * 拒绝接受队长
	 */
	@ResponseBody
	@RequestMapping(value = "/refuseLeader")
	public Result refuseLeader(Integer taskId) {
		Result result = taskService.refuseLeader(taskId);
		return result;
	}

	/**
	 * 发布任务
	 */
	@ResponseBody
	@RequestMapping(value = "/release")
	public Result release(Integer taskId) {
		Result result = taskService.release(taskId);
		return result;
	}

	/**
	 * 确认完成任务
	 */
	@ResponseBody
	@RequestMapping(value = "/complete")
	public Result complete(Integer taskId) {
		Result result = taskService.complete(taskId);
		return result;
	}

	/**
	 * 取消任务
	 */
	@ResponseBody
	@RequestMapping(value = "/cancel")
	public Result cancel(Integer taskId) {
		Result result = taskService.cancel(taskId);
		return result;
	}

	/**
	 * 删除任务
	 */
	@ResponseBody
	@RequestMapping(value = "/delete")
	public Result delete(Integer taskId) {
		Result result = taskService.delete(taskId);
		return result;
	}

	@RequestMapping(value = "/update")
	public String update(Integer taskId, ModelMap model) {
		TaskVo task = taskService.findVoById(taskId);
		List<TaskType> taskTypes = taskTypeService.findAll();
		model.put("task", task);
		model.put("taskTypes", taskTypes);
		return "/task/updateTask";
	}

	/**
	 * 修改任务
	 */
	@ResponseBody
	@RequestMapping(value = "/doUpdate")
	public Result doUpdate(Task task, Integer taskTypeId) {
		Result result = taskService.update(task, taskTypeId, TaskStatus.未发布.value());
		return result;
	}

	/**
	 * 修改并发布任务
	 */
	@ResponseBody
	@RequestMapping(value = "/doUpdateAndRelease")
	public Result doUpdateAndRelease(Task task, Integer taskTypeId) {
		Result result = taskService.update(task, taskTypeId, TaskStatus.已发布.value());
		return result;
	}
	
	
	/**
	 * 分配积分
	 */
	@ResponseBody
	@RequestMapping(value = "/mark")
	public Result mark(Integer taskId,Integer taskScore,Integer[] userId,Integer[] score) {
		Result result = taskService.mark(taskId,taskScore,userId,score);
		return result;
	}

	/**
	 * 任务统计
	 * 
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/findTaskStatistic")
	public Map<String, Object> findTaskStatistic() {
		Map<String, Object> taskStatistic = new HashMap<String, Object>();
		// 任务状态统计
		List<TaskVo> taskStatusStatistic = taskService.getTaskStatusStatistic();
		taskStatistic.put("taskStatusStatistic", taskStatusStatistic);
		// 任务类型统计
		List<TaskVo> taskTypeStatistic = taskService.getTaskTypeStatistic();
		taskStatistic.put("taskTypeStatistic", taskTypeStatistic);
		return taskStatistic;
	}

	/**
	 * 任务时间线
	 * 
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/findTaskTimeLine")
	public Map<String, List<TaskVo>> findTaskTimeLine() {
		Map<String, List<TaskVo>> findTaskTimeLine = taskService.findTaskTimeLine();
		return findTaskTimeLine;
	}

	/**
	 * 任务 个人榜
	 * 
	 * @param pageParameBean
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/findPagePersonalTaskRanks")
	public DataTablePage findPagePersonalTaskRanks(PageParameBean pageParameBean) {
		DataTablePage pagePersonalTaskRanks = taskService.findPagePersonalTaskRanks(pageParameBean);
		return pagePersonalTaskRanks;
	}

	/**
	 * 任务 单位榜
	 * 
	 * @param pageParameBean
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/findPageDepartmentTaskRanks")
	public DataTablePage findPageDepartmentTaskRanks(PageParameBean pageParameBean) {
		DataTablePage pageDepartmentTaskRanks = taskService.findPageDepartmentTaskRanks(pageParameBean);
		return pageDepartmentTaskRanks;
	}

}
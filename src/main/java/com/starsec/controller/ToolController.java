package com.starsec.controller;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.starsec.annotation.IgnorePermission;
import com.starsec.constants.Constants;
import com.starsec.constants.ToolStatus;
import com.starsec.model.DataTablePage;
import com.starsec.model.Result;
import com.starsec.po.LeakType;
import com.starsec.po.SysAttachment;
import com.starsec.po.Tool;
import com.starsec.po.ToolType;
import com.starsec.service.LeakTypeService;
import com.starsec.service.SysAttachmentService;
import com.starsec.service.ToolService;
import com.starsec.service.ToolTypeService;
import com.starsec.util.FileEntry;
import com.starsec.util.FileUploadComponent;
import com.starsec.vo.PageParameBean;
import com.starsec.vo.ToolVo;

/**
 * 工具
 * 
 * @author cheng cheng
 *
 */
@Controller
@RequestMapping(value = "/tool")
public class ToolController {

	@Autowired
	private ToolService toolService;

	@Autowired
	private FileUploadComponent fileUploadComponent;

	@Autowired
	private SysAttachmentService sysAttachmentService;
	
	@Autowired
	private ToolTypeService toolTypeService;
	
	@Autowired
	private LeakTypeService leakTypeService;

	/**
	 * findPageTools 工具列表
	 */
	@ResponseBody
	@RequestMapping(value = "/findPage")
	public DataTablePage findPage(DataTablePage page, String likeKeyWord, Integer toolTypeId, String createStarTime, String createEndTime) {
		DataTablePage pageTools = toolService.findPage(page, likeKeyWord, toolTypeId, createStarTime, createEndTime);
		return pageTools;
	}

	/**
	 * findMyToolPage 我的未发布
	 */
	@ResponseBody
	@RequestMapping(value = "/findNotReleasePage")
	public DataTablePage findNotReleasePage(DataTablePage page, String likeKeyWord) {
		DataTablePage pageTools = toolService.findMyToolPage(page, likeKeyWord, ToolStatus.未共享.value());
		return pageTools;
	}

	/**
	 * findMyToolPage 我的已发布
	 */
	@ResponseBody
	@RequestMapping(value = "/findReleasePage")
	public DataTablePage findReleasePage(DataTablePage page, String likeKeyWord) {
		DataTablePage pageTools = toolService.findMyToolPage(page, likeKeyWord, ToolStatus.已共享.value());
		return pageTools;
	}

	/**
	 * 上传图片
	 * 
	 * @param request
	 * @return
	 * @throws IOException
	 */
	@IgnorePermission
	@ResponseBody
	@RequestMapping(value = "/uploadImage")
	public String uploadImage(MultipartFile imageFile, HttpServletRequest request) throws IOException {
		FileEntry fileEntry = fileUploadComponent.uploadImage(imageFile);
		if (fileEntry.isErrorUpload() && StringUtils.isNotBlank(fileEntry.getMessage())) {
			return fileEntry.getMessage();
		}
		String ctx = (String) request.getAttribute(Constants.CTX);
		return ctx + Constants.DOWNLOAD_IMAGE_URL + fileEntry.getFilePath();
	}

	/**
	 * @Title: uploadFile
	 * @Description: 上传文件
	 * @author zhaogd
	 * @param imageFile
	 * @param request
	 * @return
	 * @throws IOException
	 */
	@IgnorePermission
	@ResponseBody
	@RequestMapping(value = "/uploadFile")
	public FileEntry uploadFile(MultipartFile multipartFile, HttpServletRequest request) throws IOException {
		FileEntry fileEntry = fileUploadComponent.uploadFile(multipartFile);
		if (!fileEntry.isErrorUpload()) {
			SysAttachment sysAttachment = sysAttachmentService.save(fileEntry);
			fileEntry.setAttachmentId(sysAttachment.getId());
		}
		return fileEntry;
	}

	/**
	 * @Title: save
	 * @Description: 新增
	 * @author zhaogd
	 * @param Tool
	 * @param attachmentId
	 * @param toolTypeId
	 * @param leakTypeIds
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/save")
	public Result save(Tool Tool, Integer attachmentId, Integer toolTypeId, Integer[] leakTypeIds) {
		Result result = toolService.save(Tool, attachmentId, toolTypeId, leakTypeIds, ToolStatus.未共享.value());
		return result;
	}

	@ResponseBody
	@RequestMapping(value = "/saveAndRelease")
	public Result saveAndRelease(Tool Tool, Integer attachmentId, Integer toolTypeId, Integer[] leakTypeIds) {
		Result result = toolService.save(Tool, attachmentId, toolTypeId, leakTypeIds, ToolStatus.已共享.value());
		return result;
	}

	@RequestMapping(value = "/toolDetail")
	public String toolDetail(Integer toolId, ModelMap model) {
		ToolVo toolVo = toolService.findVoById(toolId);
		model.put("tool", toolVo);
		return "tool/toolDetail";
	}

	/**
	 * deleteTool 删除工具
	 * 
	 * @param id
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/delete")
	public Result delete(String toolIds) {
		Result result = toolService.deleteTool(toolIds);
		return result;
	}
	
	
	@RequestMapping(value = "/update")
	public String update(Integer toolId,ModelMap model) {
		//判断是否有修改权限
		boolean  canUpdate = toolService.getCanUpdate(toolId);
		if(!canUpdate){
			return "redirect:/403";
		}

		ToolVo toolVo = toolService.findVoById(toolId);
		List<ToolType> toolTypes = toolTypeService.findAll();
		List<LeakType> leakTypes = leakTypeService.findAll();
		
		for (LeakType leakType : leakTypes) {
			for (LeakType leakTypeSel : toolVo.getLeakTypes()) {
				if(leakType.getId() == leakTypeSel.getId()){
					leakType.setSelected(true);
				}
			}
		}
		model.put("tool", toolVo);
		model.put("toolTypes", toolTypes);
		model.put("leakTypes", leakTypes);
		return "/tool/updateTool";
	}

	
	@ResponseBody
	@RequestMapping(value = "/doUpdate")
	public Result doUpdate(Tool Tool, Integer attachmentId, Integer toolTypeId, Integer[] leakTypeIds) {
		Result result = toolService.update(Tool, attachmentId, toolTypeId, leakTypeIds, ToolStatus.未共享.value());
		return result;
	}

	@ResponseBody
	@RequestMapping(value = "/doUpdateAndRelease")
	public Result doUpdateAndRelease(Tool Tool, Integer attachmentId, Integer toolTypeId, Integer[] leakTypeIds) {
		Result result = toolService.update(Tool, attachmentId, toolTypeId, leakTypeIds, ToolStatus.已共享.value());
		return result;
	}
	
	
	/*
	 * 查询工具统计结果
	 */
	@ResponseBody
	@RequestMapping(value = "/findToolStatistic")
	public Map<String, Object> findToolStatistic() {
		
		Map<String, Object> toolStatistic = new HashMap<String, Object>();
		// 工具 发布统计
		toolStatistic.put("toolReleaseStatistic",toolService.findToolReleaseStatistic());
		// 工具类型统计
		toolStatistic.put("toolTypeStatistics", toolService.findToolTypeStatistics());
		// 工具在用户分组统计
		toolStatistic.put("toolInUserGroupStatistic", toolService.findToolInUserGroupStatistic());
		
		return toolStatistic;
	}

	/**
	 * 工具 个人榜
	 * 
	 * @return
	 * 
	 */
	@ResponseBody
	@RequestMapping(value = "/findPagePersonalToolRanks")
	public DataTablePage findPagePersonalToolRanks(PageParameBean pageParameBean) {
		DataTablePage pagePersonalToolRanks = toolService.findPagePersonalToolRanks(pageParameBean);
		return pagePersonalToolRanks;
	}

	/**
	 * 工具 单位榜
	 * 
	 * @return
	 * 
	 */
	@ResponseBody
	@RequestMapping(value = "/findPageDepartmentToolRanks")
	public DataTablePage findPageDepartmentToolRanks(PageParameBean pageParameBean) {
		DataTablePage pageDepartmentToolRanks = toolService.findPageDepartmentToolRanks(pageParameBean);
		return pageDepartmentToolRanks;
	}

	/**
	 * 分页个人工具信息
	 * 
	 * @return
	 * 
	 */
	@ResponseBody
	@RequestMapping(value = "/findPagePersonalTools")
	public DataTablePage findPagePersonalTools(PageParameBean pageParameBean, Integer userId, Integer status) {
		DataTablePage pagePersonalTools = toolService.findPagePersonalTools(pageParameBean, userId, status);
		return pagePersonalTools;
	}

	/**
	 * 发布工具
	 * 
	 * @return
	 * 
	 */
	@ResponseBody
	@RequestMapping(value = "/releaseTool")
	public Result releaseTool(Integer toolId) {
		Result result = toolService.releaseTool(toolId);
		return result;
	}

	/**
	 * @Title: getLatestReleaseTool
	 * @Description: 首页，获取最新发布的工具
	 * @author zhaogd
	 * @param pageSize
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/getLatestReleaseTool")
	public List<ToolVo> getLatestReleaseTool(Integer pageSize) {
		if (pageSize == null || pageSize == 0) {
			pageSize = 5;
		}
		return toolService.findLatestReleaseTool(pageSize,null);
	}
	
	/**
	 *根据工具id删除工具
	 * @param toolId
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/deleteTool")
	public Result deleteTool(Integer toolId) {
		return toolService.deleteTool( toolId);
	}
	

	/**
	 *  批量删除工具
	 * deleteTools
	 * @param idListString
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/deleteTools")
	public Result deleteTools(String idListString) {
		Result result = toolService.deleteTools(idListString);
		return result;

	}

}